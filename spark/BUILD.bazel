scala_library(
    name = "lib",
    srcs = glob(["src/main/**/*.scala"]),
    resources = [
        "src/main/resources/log4j2.properties",
    ],
    deps = [
        "//aggregator:lib",
        "//api:lib",
        "//api:thrift",
        "//online:lib",
        "//tools/build_rules/spark:spark-exec",
        maven_artifact("com.fasterxml.jackson.core:jackson-core"),
        maven_artifact("com.fasterxml.jackson.core:jackson-databind"),
        scala_artifact("com.fasterxml.jackson.module:jackson-module-scala"),
        maven_artifact("com.google.guava:guava"),
        maven_artifact("commons-io:commons-io"),
        maven_artifact("commons-lang:commons-lang"),
        maven_artifact("org.apache.kafka:kafka-clients"),
        scala_artifact("org.json4s:json4s-core"),
        scala_artifact("org.json4s:json4s-jackson"),
        scala_artifact("org.json4s:json4s-ast"),
        scala_artifact("org.scala-lang.modules:scala-collection-compat"),
        scala_artifact("org.scala-lang.modules:scala-parser-combinators"),
        maven_artifact("org.slf4j:slf4j-api"),
        maven_artifact("org.apache.logging.log4j:log4j-slf4j-impl"),
        maven_artifact("com.google.code.gson:gson"),
        maven_artifact("jakarta.servlet:jakarta.servlet-api"),
        maven_artifact("org.yaml:snakeyaml"),
        maven_artifact("org.apache.datasketches:datasketches-memory"),
        maven_artifact("org.apache.datasketches:datasketches-java"),
        scala_artifact("org.rogach:scallop"),
        maven_artifact("io.netty:netty-all"),
        maven_artifact("io.netty:netty-transport"),
        maven_artifact("io.netty:netty-handler"),
        maven_artifact("io.netty:netty-buffer"),
        maven_artifact("io.netty:netty-codec-http"),
        maven_artifact("io.netty:netty-common"),
        maven_artifact("io.netty:netty-codec"),
        scala_artifact("io.delta:delta-spark"),
    ],
)

scala_library(
    name = "test-lib",
    srcs = glob(["src/test/**/*.scala"]),
    visibility = ["//visibility:public"],
    deps = [
        ":lib",
        "//aggregator:lib",
        "//aggregator:test-lib",
        "//api:lib",
        "//api:thrift",
        "//online:lib",
        "//tools/build_rules/spark:spark-exec",
        # Library
        maven_artifact("com.google.code.gson:gson"),
        maven_artifact("com.google.guava:guava"),
        scala_artifact("org.rogach:scallop"),
        maven_artifact("commons.io:commons-io"),
        maven_artifact("commons.lang:commons-lang"),
        scala_artifact("org.scala-lang.modules:scala-java8-compat"),
        scala_artifact("com.fasterxml.jackson.module:jackson-module-scala"),
        maven_artifact("org.slf4j:slf4j-api"),
        maven_artifact("org.apache.logging.log4j:log4j-slf4j-impl"),
        scala_artifact("org.json4s:json4s-core"),
        scala_artifact("org.json4s:json4s-jackson"),
        scala_artifact("org.json4s:json4s-ast"),
        maven_artifact("org.yaml:snakeyaml"),
        # Testing
        scala_artifact("org.scalatest:scalatest-matchers-core"),
        scala_artifact("org.scalatest:scalatest-core"),
        scala_artifact("org.scalatest:scalatest"),
        scala_artifact("org.scalatest:scalatest-flatspec"),
        scala_artifact("org.scalatest:scalatest-funsuite"),
        scala_artifact("org.scalatest:scalatest-shouldmatchers"),
        scala_artifact("org.scalactic:scalactic"),
        scala_artifact("org.scalatestplus:mockito-3-4"),
        maven_artifact("org.scalatest:scalatest-compatible"),
        maven_artifact("junit:junit"),
        maven_artifact("com.novocode:junit-interface"),
        maven_artifact("org.mockito:mockito-core"),
    ],
)

scala_test_suite(
    name = "test",
    srcs = glob(["src/test/**/*.scala"]),
    visibility = ["//visibility:public"],
    jvm_flags = [
        "--add-opens=java.base/java.lang=ALL-UNNAMED",
        "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
        "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
        "--add-opens=java.base/java.io=ALL-UNNAMED",
        "--add-opens=java.base/java.net=ALL-UNNAMED",
        "--add-opens=java.base/java.nio=ALL-UNNAMED",
        "--add-opens=java.base/java.util=ALL-UNNAMED",
        "--add-opens=java.base/java.util.concurrent=ALL-UNNAMED",
        "--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED",
        "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
        "--add-opens=java.base/sun.nio.cs=ALL-UNNAMED",
        "--add-opens=java.base/sun.security.action=ALL-UNNAMED",
        "--add-opens=java.base/sun.util.calendar=ALL-UNNAMED",
    ],
    deps = [
        ":lib",
        ":test-lib",
        "//aggregator:lib",
        "//aggregator:test-lib",
        "//api:lib",
        "//api:thrift",
        "//online:lib",
        "//tools/build_rules/spark:spark-exec",
        # Library
        maven_artifact("com.google.code.gson:gson"),
        maven_artifact("com.google.guava:guava"),
        scala_artifact("org.rogach:scallop"),
        maven_artifact("commons.io:commons-io"),
        maven_artifact("commons.lang:commons-lang"),
        scala_artifact("org.scala-lang.modules:scala-java8-compat"),
        scala_artifact("com.fasterxml.jackson.module:jackson-module-scala"),
        maven_artifact("org.slf4j:slf4j-api"),
        maven_artifact("org.apache.logging.log4j:log4j-slf4j-impl"),
        scala_artifact("org.json4s:json4s-core"),
        scala_artifact("org.json4s:json4s-jackson"),
        scala_artifact("org.json4s:json4s-ast"),
        maven_artifact("org.yaml:snakeyaml"),
        # Testing
        scala_artifact("org.scalatest:scalatest-matchers-core"),
        scala_artifact("org.scalatest:scalatest-core"),
        scala_artifact("org.scalatest:scalatest"),
        scala_artifact("org.scalatest:scalatest-flatspec"),
        scala_artifact("org.scalatest:scalatest-funsuite"),
        scala_artifact("org.scalatest:scalatest-shouldmatchers"),
        scala_artifact("org.scalactic:scalactic"),
        scala_artifact("org.scalatestplus:mockito-3-4"),
        maven_artifact("org.scalatest:scalatest-compatible"),
        maven_artifact("junit:junit"),
        maven_artifact("com.novocode:junit-interface"),
        maven_artifact("org.mockito:mockito-core"),
    ],
)

jvm_binary(
    name = "assembly",
    deploy_env = ["//tools/build_rules/spark:spark"],
    main_class = "ai.chronon.spark.Driver",
    runtime_deps = [":lib"],
)
