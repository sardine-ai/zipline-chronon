scala_library(
    name = "lib",
    srcs = glob(["src/main/**/*.scala"]),
    format = select({
        "//tools/config:scala_2_13": False,  # Disable for 2.13
        "//conditions:default": True,  # Enable for other versions
    }),
    visibility = ["//visibility:public"],
    deps = [
        "//aggregator:lib",
        "//api:lib",
        "//api:thrift_java",
        "//online:lib",
        "//tools/build_rules/spark:spark-exec",
        ":shaded_snakeyaml",
        maven_artifact("com.fasterxml.jackson.core:jackson-core"),
        maven_artifact("com.fasterxml.jackson.core:jackson-databind"),
        maven_artifact_with_suffix("com.fasterxml.jackson.module:jackson-module-scala"),
        maven_artifact("com.google.guava:guava"),
        maven_artifact("commons-io:commons-io"),
        maven_artifact("commons-lang:commons-lang"),
        maven_artifact("org.apache.kafka:kafka-clients"),
        maven_artifact_with_suffix("org.json4s:json4s-core"),
        maven_artifact_with_suffix("org.json4s:json4s-jackson"),
        maven_artifact_with_suffix("org.json4s:json4s-ast"),
        maven_artifact_with_suffix("org.scala-lang.modules:scala-collection-compat"),
        maven_artifact_with_suffix("org.scala-lang.modules:scala-parser-combinators"),
        maven_artifact("org.slf4j:slf4j-api"),
        maven_artifact("org.apache.logging.log4j:log4j-api"),
        maven_artifact("org.apache.logging.log4j:log4j-core"),
        maven_artifact("com.google.code.gson:gson"),
        maven_artifact("jakarta.servlet:jakarta.servlet-api"),
        maven_artifact("org.apache.datasketches:datasketches-memory"),
        maven_artifact("org.apache.datasketches:datasketches-java"),
        maven_artifact_with_suffix("org.rogach:scallop"),
        maven_artifact("io.netty:netty-all"),
        maven_artifact("io.netty:netty-transport"),
        maven_artifact("io.netty:netty-handler"),
        maven_artifact("io.netty:netty-buffer"),
        maven_artifact("io.netty:netty-codec-http"),
        maven_artifact("io.netty:netty-common"),
        maven_artifact("io.netty:netty-codec"),
        maven_artifact_with_suffix("io.delta:delta-spark"),
        maven_artifact("net.sf.py4j:py4j"),
        maven_artifact("org.apache.avro:avro"),
        maven_artifact("org.apache.thrift:libthrift"),
        maven_artifact("org.apache.hadoop:hadoop-common"),
        maven_artifact("org.apache.hadoop:hadoop-client-api"),
    ],
)

test_deps = [
    ":lib",
    "//aggregator:lib",
    "//aggregator:test_lib",
    "//api:lib",
    "//api:thrift_java",
    "//online:lib",
    "//tools/build_rules/spark:spark-exec",
    # Library
    maven_artifact("com.google.code.gson:gson"),
    maven_artifact("com.google.guava:guava"),
    maven_artifact_with_suffix("org.rogach:scallop"),
    maven_artifact("commons.io:commons-io"),
    maven_artifact("commons.lang:commons-lang"),
    maven_artifact_with_suffix("org.scala-lang.modules:scala-java8-compat"),
    maven_artifact_with_suffix("com.fasterxml.jackson.module:jackson-module-scala"),
    maven_artifact("org.slf4j:slf4j-api"),
    maven_artifact_with_suffix("org.json4s:json4s-core"),
    maven_artifact_with_suffix("org.json4s:json4s-jackson"),
    maven_artifact_with_suffix("org.json4s:json4s-ast"),
    maven_artifact("org.yaml:snakeyaml"),
    maven_artifact("org.apache.avro:avro"),
    maven_artifact("com.fasterxml.jackson.core:jackson-core"),
    maven_artifact("com.fasterxml.jackson.core:jackson-databind"),
    maven_artifact("org.apache.hive:hive-exec"),
    # Testing
    maven_artifact_with_suffix("org.scalatest:scalatest-matchers-core"),
    maven_artifact_with_suffix("org.scalatest:scalatest-core"),
    maven_artifact_with_suffix("org.scalatest:scalatest"),
    maven_artifact_with_suffix("org.scalatest:scalatest-flatspec"),
    maven_artifact_with_suffix("org.scalatest:scalatest-funsuite"),
    maven_artifact_with_suffix("org.scalatest:scalatest-shouldmatchers"),
    maven_artifact_with_suffix("org.scalactic:scalactic"),
    maven_artifact_with_suffix("org.scalatestplus:mockito-3-4"),
    maven_artifact("org.scalatest:scalatest-compatible"),
    maven_artifact("junit:junit"),
    maven_artifact("com.novocode:junit-interface"),
    maven_artifact("org.mockito:mockito-core"),
    maven_artifact("org.apache.hadoop:hadoop-common"),
    maven_artifact("org.apache.hadoop:hadoop-client-api"),
]

scala_library(
    name = "test_lib",
    srcs = glob(["src/test/**/*.scala"]),
    format = select({
        "//tools/config:scala_2_13": False,  # Disable for 2.13
        "//conditions:default": True,  # Enable for other versions
    }),
    visibility = ["//visibility:public"],
    deps = test_deps + _RUNFILES_DEP,
)

scala_test_suite(
    name = "tests",
    srcs = glob([
        "src/test/scala/ai/chronon/spark/test/*.scala",
        "src/test/scala/ai/chronon/spark/test/udafs/*.scala",
        "src/test/scala/ai/chronon/spark/test/stats/drift/*.scala",
        "src/test/scala/ai/chronon/spark/test/bootstrap/*.scala",
    ]),
    data = glob(["spark/src/test/resources/**/*"]),
    # defined in prelude_bazel file
    jvm_flags = _JVM_FLAGS_FOR_ACCESSING_BASE_JAVA_CLASSES,
    tags = ["large"],
    visibility = ["//visibility:public"],
    deps = test_deps + [":test_lib"],
)

scala_test_suite(
    name = "fetcher_test",
    srcs = glob(["src/test/scala/ai/chronon/spark/test/fetcher/*.scala"]),
    data = [
        "//spark/src/test/resources:test-resources",
    ],
    # defined in prelude_bazel file
    jvm_flags = _JVM_FLAGS_FOR_ACCESSING_BASE_JAVA_CLASSES,
    resources = ["//spark/src/test/resources:test-resources"],
    visibility = ["//visibility:public"],
    deps = test_deps + [
        ":test_lib",
    ] + _RUNFILES_DEP,
)

scala_test_suite(
    name = "groupby_test",
    srcs = glob(["src/test/scala/ai/chronon/spark/test/groupby/*.scala"]),
    data = glob(["spark/src/test/resources/**/*"]),
    # defined in prelude_bazel file
    jvm_flags = _JVM_FLAGS_FOR_ACCESSING_BASE_JAVA_CLASSES,
    visibility = ["//visibility:public"],
    deps = test_deps + [":test_lib"],
)

scala_test_suite(
    name = "join_test",
    srcs = glob(["src/test/scala/ai/chronon/spark/test/join/*.scala"]),
    data = glob(["spark/src/test/resources/**/*"]),
    # defined in prelude_bazel file
    jvm_flags = _JVM_FLAGS_FOR_ACCESSING_BASE_JAVA_CLASSES,
    tags = ["large"],
    visibility = ["//visibility:public"],
    deps = test_deps + [":test_lib"],
)

scala_test_suite(
    name = "analyzer_test",
    srcs = glob(["src/test/scala/ai/chronon/spark/test/analyzer/*.scala"]),
    data = glob(["spark/src/test/resources/**/*"]),
    # defined in prelude_bazel file
    jvm_flags = _JVM_FLAGS_FOR_ACCESSING_BASE_JAVA_CLASSES,
    visibility = ["//visibility:public"],
    deps = test_deps + [":test_lib"],
)

scala_test_suite(
    name = "streaming_test",
    srcs = glob(["src/test/scala/ai/chronon/spark/test/streaming/*.scala"]),
    data = glob(["spark/src/test/resources/**/*"]),
    # defined in prelude_bazel file
    jvm_flags = _JVM_FLAGS_FOR_ACCESSING_BASE_JAVA_CLASSES,
    visibility = ["//visibility:public"],
    deps = test_deps + [":test_lib"],
)

jvm_binary(
    name = "spark_assembly",
    deploy_env = ["//tools/build_rules/spark:spark"],
    main_class = "ai.chronon.spark.Driver",
    runtime_deps = [":lib"],
)

create_shaded_library(
    name = "shaded_snakeyaml",
    input_artifact = "org.yaml:snakeyaml",
    inline_rules = [
        "rule org.yaml.snakeyaml.** org.yaml.shaded_snakeyaml.@1",
    ],
)