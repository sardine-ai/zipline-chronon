#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import ai.chronon.api.common.ttypes

from thrift.transport import TTransport
all_structs = []


class Cardinality(object):
    LOW = 0
    HIGH = 1

    _VALUES_TO_NAMES = {
        0: "LOW",
        1: "HIGH",
    }

    _NAMES_TO_VALUES = {
        "LOW": 0,
        "HIGH": 1,
    }


class DriftMetric(object):
    """
    +----------------------------------+-------------------+----------------+----------------------------------+
    | Metric                           | Moderate Drift    | Severe Drift   | Notes                            |
    +----------------------------------+-------------------+----------------+----------------------------------+
    | Jensen-Shannon Divergence        | 0.05 - 0.1        | > 0.1          | Max value is ln(2) â‰ˆ 0.69        |
    +----------------------------------+-------------------+----------------+----------------------------------+
    | Hellinger Distance               | 0.1 - 0.25        | > 0.25         | Ranges from 0 to 1               |
    +----------------------------------+-------------------+----------------+----------------------------------+
    | Population Stability Index (PSI) | 0.1 - 0.2         | > 0.2          | Industry standard in some fields |
    +----------------------------------+-------------------+----------------+----------------------------------+
    *

    """
    JENSEN_SHANNON = 0
    HELLINGER = 1
    PSI = 3

    _VALUES_TO_NAMES = {
        0: "JENSEN_SHANNON",
        1: "HELLINGER",
        3: "PSI",
    }

    _NAMES_TO_VALUES = {
        "JENSEN_SHANNON": 0,
        "HELLINGER": 1,
        "PSI": 3,
    }


class TileKey(object):
    """
    Attributes:
     - column
     - slice
     - name
     - sizeMillis

    """


    def __init__(self, column=None, slice=None, name=None, sizeMillis=None,):
        self.column = column
        self.slice = slice
        self.name = name
        self.sizeMillis = sizeMillis

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.column = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.slice = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.sizeMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TileKey')
        if self.column is not None:
            oprot.writeFieldBegin('column', TType.STRING, 1)
            oprot.writeString(self.column.encode('utf-8') if sys.version_info[0] == 2 else self.column)
            oprot.writeFieldEnd()
        if self.slice is not None:
            oprot.writeFieldBegin('slice', TType.STRING, 2)
            oprot.writeString(self.slice.encode('utf-8') if sys.version_info[0] == 2 else self.slice)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.sizeMillis is not None:
            oprot.writeFieldBegin('sizeMillis', TType.I64, 4)
            oprot.writeI64(self.sizeMillis)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TileSummary(object):
    """
    Attributes:
     - percentiles
     - histogram
     - count
     - nullCount
     - innerCount
     - innerNullCount
     - lengthPercentiles
     - stringLengthPercentiles

    """


    def __init__(self, percentiles=None, histogram=None, count=None, nullCount=None, innerCount=None, innerNullCount=None, lengthPercentiles=None, stringLengthPercentiles=None,):
        self.percentiles = percentiles
        self.histogram = histogram
        self.count = count
        self.nullCount = nullCount
        self.innerCount = innerCount
        self.innerNullCount = innerNullCount
        self.lengthPercentiles = lengthPercentiles
        self.stringLengthPercentiles = stringLengthPercentiles

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.percentiles = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readDouble()
                        self.percentiles.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.histogram = {}
                    (_ktype7, _vtype8, _size6) = iprot.readMapBegin()
                    for _i10 in range(_size6):
                        _key11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val12 = iprot.readI64()
                        self.histogram[_key11] = _val12
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.nullCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.innerCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.innerNullCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.lengthPercentiles = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readI32()
                        self.lengthPercentiles.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.stringLengthPercentiles = []
                    (_etype22, _size19) = iprot.readListBegin()
                    for _i23 in range(_size19):
                        _elem24 = iprot.readI32()
                        self.stringLengthPercentiles.append(_elem24)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TileSummary')
        if self.percentiles is not None:
            oprot.writeFieldBegin('percentiles', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.percentiles))
            for iter25 in self.percentiles:
                oprot.writeDouble(iter25)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.histogram is not None:
            oprot.writeFieldBegin('histogram', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.histogram))
            for kiter26, viter27 in self.histogram.items():
                oprot.writeString(kiter26.encode('utf-8') if sys.version_info[0] == 2 else kiter26)
                oprot.writeI64(viter27)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I64, 3)
            oprot.writeI64(self.count)
            oprot.writeFieldEnd()
        if self.nullCount is not None:
            oprot.writeFieldBegin('nullCount', TType.I64, 4)
            oprot.writeI64(self.nullCount)
            oprot.writeFieldEnd()
        if self.innerCount is not None:
            oprot.writeFieldBegin('innerCount', TType.I64, 5)
            oprot.writeI64(self.innerCount)
            oprot.writeFieldEnd()
        if self.innerNullCount is not None:
            oprot.writeFieldBegin('innerNullCount', TType.I64, 6)
            oprot.writeI64(self.innerNullCount)
            oprot.writeFieldEnd()
        if self.lengthPercentiles is not None:
            oprot.writeFieldBegin('lengthPercentiles', TType.LIST, 7)
            oprot.writeListBegin(TType.I32, len(self.lengthPercentiles))
            for iter28 in self.lengthPercentiles:
                oprot.writeI32(iter28)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.stringLengthPercentiles is not None:
            oprot.writeFieldBegin('stringLengthPercentiles', TType.LIST, 8)
            oprot.writeListBegin(TType.I32, len(self.stringLengthPercentiles))
            for iter29 in self.stringLengthPercentiles:
                oprot.writeI32(iter29)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TileSeriesKey(object):
    """
    Attributes:
     - column
     - slice
     - groupName
     - nodeName

    """


    def __init__(self, column=None, slice=None, groupName=None, nodeName=None,):
        self.column = column
        self.slice = slice
        self.groupName = groupName
        self.nodeName = nodeName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.column = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.slice = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.groupName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.nodeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TileSeriesKey')
        if self.column is not None:
            oprot.writeFieldBegin('column', TType.STRING, 1)
            oprot.writeString(self.column.encode('utf-8') if sys.version_info[0] == 2 else self.column)
            oprot.writeFieldEnd()
        if self.slice is not None:
            oprot.writeFieldBegin('slice', TType.STRING, 2)
            oprot.writeString(self.slice.encode('utf-8') if sys.version_info[0] == 2 else self.slice)
            oprot.writeFieldEnd()
        if self.groupName is not None:
            oprot.writeFieldBegin('groupName', TType.STRING, 3)
            oprot.writeString(self.groupName.encode('utf-8') if sys.version_info[0] == 2 else self.groupName)
            oprot.writeFieldEnd()
        if self.nodeName is not None:
            oprot.writeFieldBegin('nodeName', TType.STRING, 4)
            oprot.writeString(self.nodeName.encode('utf-8') if sys.version_info[0] == 2 else self.nodeName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TileSummarySeries(object):
    """
    Attributes:
     - percentiles
     - histogram
     - count
     - nullCount
     - innerCount
     - innerNullCount
     - lengthPercentiles
     - stringLengthPercentiles
     - timestamps
     - key

    """


    def __init__(self, percentiles=None, histogram=None, count=None, nullCount=None, innerCount=None, innerNullCount=None, lengthPercentiles=None, stringLengthPercentiles=None, timestamps=None, key=None,):
        self.percentiles = percentiles
        self.histogram = histogram
        self.count = count
        self.nullCount = nullCount
        self.innerCount = innerCount
        self.innerNullCount = innerNullCount
        self.lengthPercentiles = lengthPercentiles
        self.stringLengthPercentiles = stringLengthPercentiles
        self.timestamps = timestamps
        self.key = key

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.percentiles = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = []
                        (_etype39, _size36) = iprot.readListBegin()
                        for _i40 in range(_size36):
                            _elem41 = iprot.readDouble()
                            _elem35.append(_elem41)
                        iprot.readListEnd()
                        self.percentiles.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.histogram = {}
                    (_ktype43, _vtype44, _size42) = iprot.readMapBegin()
                    for _i46 in range(_size42):
                        _key47 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val48 = []
                        (_etype52, _size49) = iprot.readListBegin()
                        for _i53 in range(_size49):
                            _elem54 = iprot.readI64()
                            _val48.append(_elem54)
                        iprot.readListEnd()
                        self.histogram[_key47] = _val48
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.count = []
                    (_etype58, _size55) = iprot.readListBegin()
                    for _i59 in range(_size55):
                        _elem60 = iprot.readI64()
                        self.count.append(_elem60)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.nullCount = []
                    (_etype64, _size61) = iprot.readListBegin()
                    for _i65 in range(_size61):
                        _elem66 = iprot.readI64()
                        self.nullCount.append(_elem66)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.innerCount = []
                    (_etype70, _size67) = iprot.readListBegin()
                    for _i71 in range(_size67):
                        _elem72 = iprot.readI64()
                        self.innerCount.append(_elem72)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.innerNullCount = []
                    (_etype76, _size73) = iprot.readListBegin()
                    for _i77 in range(_size73):
                        _elem78 = iprot.readI64()
                        self.innerNullCount.append(_elem78)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.lengthPercentiles = []
                    (_etype82, _size79) = iprot.readListBegin()
                    for _i83 in range(_size79):
                        _elem84 = []
                        (_etype88, _size85) = iprot.readListBegin()
                        for _i89 in range(_size85):
                            _elem90 = iprot.readI32()
                            _elem84.append(_elem90)
                        iprot.readListEnd()
                        self.lengthPercentiles.append(_elem84)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.stringLengthPercentiles = []
                    (_etype94, _size91) = iprot.readListBegin()
                    for _i95 in range(_size91):
                        _elem96 = []
                        (_etype100, _size97) = iprot.readListBegin()
                        for _i101 in range(_size97):
                            _elem102 = iprot.readI32()
                            _elem96.append(_elem102)
                        iprot.readListEnd()
                        self.stringLengthPercentiles.append(_elem96)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 200:
                if ftype == TType.LIST:
                    self.timestamps = []
                    (_etype106, _size103) = iprot.readListBegin()
                    for _i107 in range(_size103):
                        _elem108 = iprot.readI64()
                        self.timestamps.append(_elem108)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 300:
                if ftype == TType.STRUCT:
                    self.key = TileSeriesKey()
                    self.key.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TileSummarySeries')
        if self.percentiles is not None:
            oprot.writeFieldBegin('percentiles', TType.LIST, 1)
            oprot.writeListBegin(TType.LIST, len(self.percentiles))
            for iter109 in self.percentiles:
                oprot.writeListBegin(TType.DOUBLE, len(iter109))
                for iter110 in iter109:
                    oprot.writeDouble(iter110)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.histogram is not None:
            oprot.writeFieldBegin('histogram', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.histogram))
            for kiter111, viter112 in self.histogram.items():
                oprot.writeString(kiter111.encode('utf-8') if sys.version_info[0] == 2 else kiter111)
                oprot.writeListBegin(TType.I64, len(viter112))
                for iter113 in viter112:
                    oprot.writeI64(iter113)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.LIST, 3)
            oprot.writeListBegin(TType.I64, len(self.count))
            for iter114 in self.count:
                oprot.writeI64(iter114)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nullCount is not None:
            oprot.writeFieldBegin('nullCount', TType.LIST, 4)
            oprot.writeListBegin(TType.I64, len(self.nullCount))
            for iter115 in self.nullCount:
                oprot.writeI64(iter115)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.innerCount is not None:
            oprot.writeFieldBegin('innerCount', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.innerCount))
            for iter116 in self.innerCount:
                oprot.writeI64(iter116)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.innerNullCount is not None:
            oprot.writeFieldBegin('innerNullCount', TType.LIST, 6)
            oprot.writeListBegin(TType.I64, len(self.innerNullCount))
            for iter117 in self.innerNullCount:
                oprot.writeI64(iter117)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.lengthPercentiles is not None:
            oprot.writeFieldBegin('lengthPercentiles', TType.LIST, 7)
            oprot.writeListBegin(TType.LIST, len(self.lengthPercentiles))
            for iter118 in self.lengthPercentiles:
                oprot.writeListBegin(TType.I32, len(iter118))
                for iter119 in iter118:
                    oprot.writeI32(iter119)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.stringLengthPercentiles is not None:
            oprot.writeFieldBegin('stringLengthPercentiles', TType.LIST, 8)
            oprot.writeListBegin(TType.LIST, len(self.stringLengthPercentiles))
            for iter120 in self.stringLengthPercentiles:
                oprot.writeListBegin(TType.I32, len(iter120))
                for iter121 in iter120:
                    oprot.writeI32(iter121)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.timestamps is not None:
            oprot.writeFieldBegin('timestamps', TType.LIST, 200)
            oprot.writeListBegin(TType.I64, len(self.timestamps))
            for iter122 in self.timestamps:
                oprot.writeI64(iter122)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRUCT, 300)
            self.key.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TileDrift(object):
    """
    Attributes:
     - percentileDrift
     - histogramDrift
     - countChangePercent
     - nullRatioChangePercent
     - innerCountChangePercent
     - innerNullCountChangePercent
     - lengthPercentilesDrift
     - stringLengthPercentilesDrift

    """


    def __init__(self, percentileDrift=None, histogramDrift=None, countChangePercent=None, nullRatioChangePercent=None, innerCountChangePercent=None, innerNullCountChangePercent=None, lengthPercentilesDrift=None, stringLengthPercentilesDrift=None,):
        self.percentileDrift = percentileDrift
        self.histogramDrift = histogramDrift
        self.countChangePercent = countChangePercent
        self.nullRatioChangePercent = nullRatioChangePercent
        self.innerCountChangePercent = innerCountChangePercent
        self.innerNullCountChangePercent = innerNullCountChangePercent
        self.lengthPercentilesDrift = lengthPercentilesDrift
        self.stringLengthPercentilesDrift = stringLengthPercentilesDrift

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.percentileDrift = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.histogramDrift = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.countChangePercent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.nullRatioChangePercent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.innerCountChangePercent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.innerNullCountChangePercent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.lengthPercentilesDrift = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.stringLengthPercentilesDrift = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TileDrift')
        if self.percentileDrift is not None:
            oprot.writeFieldBegin('percentileDrift', TType.DOUBLE, 1)
            oprot.writeDouble(self.percentileDrift)
            oprot.writeFieldEnd()
        if self.histogramDrift is not None:
            oprot.writeFieldBegin('histogramDrift', TType.DOUBLE, 2)
            oprot.writeDouble(self.histogramDrift)
            oprot.writeFieldEnd()
        if self.countChangePercent is not None:
            oprot.writeFieldBegin('countChangePercent', TType.DOUBLE, 3)
            oprot.writeDouble(self.countChangePercent)
            oprot.writeFieldEnd()
        if self.nullRatioChangePercent is not None:
            oprot.writeFieldBegin('nullRatioChangePercent', TType.DOUBLE, 4)
            oprot.writeDouble(self.nullRatioChangePercent)
            oprot.writeFieldEnd()
        if self.innerCountChangePercent is not None:
            oprot.writeFieldBegin('innerCountChangePercent', TType.DOUBLE, 5)
            oprot.writeDouble(self.innerCountChangePercent)
            oprot.writeFieldEnd()
        if self.innerNullCountChangePercent is not None:
            oprot.writeFieldBegin('innerNullCountChangePercent', TType.DOUBLE, 6)
            oprot.writeDouble(self.innerNullCountChangePercent)
            oprot.writeFieldEnd()
        if self.lengthPercentilesDrift is not None:
            oprot.writeFieldBegin('lengthPercentilesDrift', TType.DOUBLE, 7)
            oprot.writeDouble(self.lengthPercentilesDrift)
            oprot.writeFieldEnd()
        if self.stringLengthPercentilesDrift is not None:
            oprot.writeFieldBegin('stringLengthPercentilesDrift', TType.DOUBLE, 8)
            oprot.writeDouble(self.stringLengthPercentilesDrift)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TileDriftSeries(object):
    """
    Attributes:
     - percentileDriftSeries
     - histogramDriftSeries
     - countChangePercentSeries
     - nullRatioChangePercentSeries
     - innerCountChangePercentSeries
     - innerNullCountChangePercentSeries
     - lengthPercentilesDriftSeries
     - stringLengthPercentilesDriftSeries
     - timestamps
     - key

    """


    def __init__(self, percentileDriftSeries=None, histogramDriftSeries=None, countChangePercentSeries=None, nullRatioChangePercentSeries=None, innerCountChangePercentSeries=None, innerNullCountChangePercentSeries=None, lengthPercentilesDriftSeries=None, stringLengthPercentilesDriftSeries=None, timestamps=None, key=None,):
        self.percentileDriftSeries = percentileDriftSeries
        self.histogramDriftSeries = histogramDriftSeries
        self.countChangePercentSeries = countChangePercentSeries
        self.nullRatioChangePercentSeries = nullRatioChangePercentSeries
        self.innerCountChangePercentSeries = innerCountChangePercentSeries
        self.innerNullCountChangePercentSeries = innerNullCountChangePercentSeries
        self.lengthPercentilesDriftSeries = lengthPercentilesDriftSeries
        self.stringLengthPercentilesDriftSeries = stringLengthPercentilesDriftSeries
        self.timestamps = timestamps
        self.key = key

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.percentileDriftSeries = []
                    (_etype126, _size123) = iprot.readListBegin()
                    for _i127 in range(_size123):
                        _elem128 = iprot.readDouble()
                        self.percentileDriftSeries.append(_elem128)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.histogramDriftSeries = []
                    (_etype132, _size129) = iprot.readListBegin()
                    for _i133 in range(_size129):
                        _elem134 = iprot.readDouble()
                        self.histogramDriftSeries.append(_elem134)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.countChangePercentSeries = []
                    (_etype138, _size135) = iprot.readListBegin()
                    for _i139 in range(_size135):
                        _elem140 = iprot.readDouble()
                        self.countChangePercentSeries.append(_elem140)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.nullRatioChangePercentSeries = []
                    (_etype144, _size141) = iprot.readListBegin()
                    for _i145 in range(_size141):
                        _elem146 = iprot.readDouble()
                        self.nullRatioChangePercentSeries.append(_elem146)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.innerCountChangePercentSeries = []
                    (_etype150, _size147) = iprot.readListBegin()
                    for _i151 in range(_size147):
                        _elem152 = iprot.readDouble()
                        self.innerCountChangePercentSeries.append(_elem152)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.innerNullCountChangePercentSeries = []
                    (_etype156, _size153) = iprot.readListBegin()
                    for _i157 in range(_size153):
                        _elem158 = iprot.readDouble()
                        self.innerNullCountChangePercentSeries.append(_elem158)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.lengthPercentilesDriftSeries = []
                    (_etype162, _size159) = iprot.readListBegin()
                    for _i163 in range(_size159):
                        _elem164 = iprot.readDouble()
                        self.lengthPercentilesDriftSeries.append(_elem164)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.stringLengthPercentilesDriftSeries = []
                    (_etype168, _size165) = iprot.readListBegin()
                    for _i169 in range(_size165):
                        _elem170 = iprot.readDouble()
                        self.stringLengthPercentilesDriftSeries.append(_elem170)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 200:
                if ftype == TType.LIST:
                    self.timestamps = []
                    (_etype174, _size171) = iprot.readListBegin()
                    for _i175 in range(_size171):
                        _elem176 = iprot.readI64()
                        self.timestamps.append(_elem176)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 300:
                if ftype == TType.STRUCT:
                    self.key = TileSeriesKey()
                    self.key.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TileDriftSeries')
        if self.percentileDriftSeries is not None:
            oprot.writeFieldBegin('percentileDriftSeries', TType.LIST, 1)
            oprot.writeListBegin(TType.DOUBLE, len(self.percentileDriftSeries))
            for iter177 in self.percentileDriftSeries:
                oprot.writeDouble(iter177)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.histogramDriftSeries is not None:
            oprot.writeFieldBegin('histogramDriftSeries', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.histogramDriftSeries))
            for iter178 in self.histogramDriftSeries:
                oprot.writeDouble(iter178)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.countChangePercentSeries is not None:
            oprot.writeFieldBegin('countChangePercentSeries', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.countChangePercentSeries))
            for iter179 in self.countChangePercentSeries:
                oprot.writeDouble(iter179)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nullRatioChangePercentSeries is not None:
            oprot.writeFieldBegin('nullRatioChangePercentSeries', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.nullRatioChangePercentSeries))
            for iter180 in self.nullRatioChangePercentSeries:
                oprot.writeDouble(iter180)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.innerCountChangePercentSeries is not None:
            oprot.writeFieldBegin('innerCountChangePercentSeries', TType.LIST, 5)
            oprot.writeListBegin(TType.DOUBLE, len(self.innerCountChangePercentSeries))
            for iter181 in self.innerCountChangePercentSeries:
                oprot.writeDouble(iter181)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.innerNullCountChangePercentSeries is not None:
            oprot.writeFieldBegin('innerNullCountChangePercentSeries', TType.LIST, 6)
            oprot.writeListBegin(TType.DOUBLE, len(self.innerNullCountChangePercentSeries))
            for iter182 in self.innerNullCountChangePercentSeries:
                oprot.writeDouble(iter182)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.lengthPercentilesDriftSeries is not None:
            oprot.writeFieldBegin('lengthPercentilesDriftSeries', TType.LIST, 7)
            oprot.writeListBegin(TType.DOUBLE, len(self.lengthPercentilesDriftSeries))
            for iter183 in self.lengthPercentilesDriftSeries:
                oprot.writeDouble(iter183)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.stringLengthPercentilesDriftSeries is not None:
            oprot.writeFieldBegin('stringLengthPercentilesDriftSeries', TType.LIST, 8)
            oprot.writeListBegin(TType.DOUBLE, len(self.stringLengthPercentilesDriftSeries))
            for iter184 in self.stringLengthPercentilesDriftSeries:
                oprot.writeDouble(iter184)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.timestamps is not None:
            oprot.writeFieldBegin('timestamps', TType.LIST, 200)
            oprot.writeListBegin(TType.I64, len(self.timestamps))
            for iter185 in self.timestamps:
                oprot.writeI64(iter185)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRUCT, 300)
            self.key.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DriftSpec(object):
    """
    Attributes:
     - slices
     - derivations
     - columnCardinalityHints
     - tileSize
     - lookbackWindows
     - driftMetric

    """


    def __init__(self, slices=None, derivations=None, columnCardinalityHints=None, tileSize=None, lookbackWindows=None, driftMetric=0,):
        self.slices = slices
        self.derivations = derivations
        self.columnCardinalityHints = columnCardinalityHints
        self.tileSize = tileSize
        self.lookbackWindows = lookbackWindows
        self.driftMetric = driftMetric

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.slices = []
                    (_etype189, _size186) = iprot.readListBegin()
                    for _i190 in range(_size186):
                        _elem191 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.slices.append(_elem191)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.derivations = {}
                    (_ktype193, _vtype194, _size192) = iprot.readMapBegin()
                    for _i196 in range(_size192):
                        _key197 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val198 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.derivations[_key197] = _val198
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.columnCardinalityHints = {}
                    (_ktype200, _vtype201, _size199) = iprot.readMapBegin()
                    for _i203 in range(_size199):
                        _key204 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val205 = iprot.readI32()
                        self.columnCardinalityHints[_key204] = _val205
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.tileSize = ai.chronon.api.common.ttypes.Window()
                    self.tileSize.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.lookbackWindows = []
                    (_etype209, _size206) = iprot.readListBegin()
                    for _i210 in range(_size206):
                        _elem211 = ai.chronon.api.common.ttypes.Window()
                        _elem211.read(iprot)
                        self.lookbackWindows.append(_elem211)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.driftMetric = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DriftSpec')
        if self.slices is not None:
            oprot.writeFieldBegin('slices', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.slices))
            for iter212 in self.slices:
                oprot.writeString(iter212.encode('utf-8') if sys.version_info[0] == 2 else iter212)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.derivations is not None:
            oprot.writeFieldBegin('derivations', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.derivations))
            for kiter213, viter214 in self.derivations.items():
                oprot.writeString(kiter213.encode('utf-8') if sys.version_info[0] == 2 else kiter213)
                oprot.writeString(viter214.encode('utf-8') if sys.version_info[0] == 2 else viter214)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.columnCardinalityHints is not None:
            oprot.writeFieldBegin('columnCardinalityHints', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.I32, len(self.columnCardinalityHints))
            for kiter215, viter216 in self.columnCardinalityHints.items():
                oprot.writeString(kiter215.encode('utf-8') if sys.version_info[0] == 2 else kiter215)
                oprot.writeI32(viter216)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.tileSize is not None:
            oprot.writeFieldBegin('tileSize', TType.STRUCT, 4)
            self.tileSize.write(oprot)
            oprot.writeFieldEnd()
        if self.lookbackWindows is not None:
            oprot.writeFieldBegin('lookbackWindows', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.lookbackWindows))
            for iter217 in self.lookbackWindows:
                iter217.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.driftMetric is not None:
            oprot.writeFieldBegin('driftMetric', TType.I32, 6)
            oprot.writeI32(self.driftMetric)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class JoinDriftRequest(object):
    """
    Attributes:
     - name
     - startTs
     - endTs
     - offset
     - algorithm
     - columnName

    """


    def __init__(self, name=None, startTs=None, endTs=None, offset=None, algorithm=None, columnName=None,):
        self.name = name
        self.startTs = startTs
        self.endTs = endTs
        self.offset = offset
        self.algorithm = algorithm
        self.columnName = columnName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.startTs = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.endTs = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.offset = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.algorithm = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.columnName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('JoinDriftRequest')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.startTs is not None:
            oprot.writeFieldBegin('startTs', TType.I64, 2)
            oprot.writeI64(self.startTs)
            oprot.writeFieldEnd()
        if self.endTs is not None:
            oprot.writeFieldBegin('endTs', TType.I64, 3)
            oprot.writeI64(self.endTs)
            oprot.writeFieldEnd()
        if self.offset is not None:
            oprot.writeFieldBegin('offset', TType.STRING, 6)
            oprot.writeString(self.offset.encode('utf-8') if sys.version_info[0] == 2 else self.offset)
            oprot.writeFieldEnd()
        if self.algorithm is not None:
            oprot.writeFieldBegin('algorithm', TType.I32, 7)
            oprot.writeI32(self.algorithm)
            oprot.writeFieldEnd()
        if self.columnName is not None:
            oprot.writeFieldBegin('columnName', TType.STRING, 8)
            oprot.writeString(self.columnName.encode('utf-8') if sys.version_info[0] == 2 else self.columnName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.startTs is None:
            raise TProtocolException(message='Required field startTs is unset!')
        if self.endTs is None:
            raise TProtocolException(message='Required field endTs is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class JoinDriftResponse(object):
    """
    Attributes:
     - driftSeries

    """


    def __init__(self, driftSeries=None,):
        self.driftSeries = driftSeries

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.driftSeries = []
                    (_etype221, _size218) = iprot.readListBegin()
                    for _i222 in range(_size218):
                        _elem223 = TileDriftSeries()
                        _elem223.read(iprot)
                        self.driftSeries.append(_elem223)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('JoinDriftResponse')
        if self.driftSeries is not None:
            oprot.writeFieldBegin('driftSeries', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.driftSeries))
            for iter224 in self.driftSeries:
                iter224.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.driftSeries is None:
            raise TProtocolException(message='Required field driftSeries is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class JoinSummaryRequest(object):
    """
    Attributes:
     - name
     - startTs
     - endTs
     - percentiles
     - columnName

    """


    def __init__(self, name=None, startTs=None, endTs=None, percentiles=None, columnName=None,):
        self.name = name
        self.startTs = startTs
        self.endTs = endTs
        self.percentiles = percentiles
        self.columnName = columnName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.startTs = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.endTs = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.percentiles = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.columnName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('JoinSummaryRequest')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.startTs is not None:
            oprot.writeFieldBegin('startTs', TType.I64, 2)
            oprot.writeI64(self.startTs)
            oprot.writeFieldEnd()
        if self.endTs is not None:
            oprot.writeFieldBegin('endTs', TType.I64, 3)
            oprot.writeI64(self.endTs)
            oprot.writeFieldEnd()
        if self.percentiles is not None:
            oprot.writeFieldBegin('percentiles', TType.STRING, 5)
            oprot.writeString(self.percentiles.encode('utf-8') if sys.version_info[0] == 2 else self.percentiles)
            oprot.writeFieldEnd()
        if self.columnName is not None:
            oprot.writeFieldBegin('columnName', TType.STRING, 8)
            oprot.writeString(self.columnName.encode('utf-8') if sys.version_info[0] == 2 else self.columnName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.startTs is None:
            raise TProtocolException(message='Required field startTs is unset!')
        if self.endTs is None:
            raise TProtocolException(message='Required field endTs is unset!')
        if self.columnName is None:
            raise TProtocolException(message='Required field columnName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TileKey)
TileKey.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'column', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'slice', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.I64, 'sizeMillis', None, None, ),  # 4
)
all_structs.append(TileSummary)
TileSummary.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'percentiles', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.MAP, 'histogram', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 2
    (3, TType.I64, 'count', None, None, ),  # 3
    (4, TType.I64, 'nullCount', None, None, ),  # 4
    (5, TType.I64, 'innerCount', None, None, ),  # 5
    (6, TType.I64, 'innerNullCount', None, None, ),  # 6
    (7, TType.LIST, 'lengthPercentiles', (TType.I32, None, False), None, ),  # 7
    (8, TType.LIST, 'stringLengthPercentiles', (TType.I32, None, False), None, ),  # 8
)
all_structs.append(TileSeriesKey)
TileSeriesKey.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'column', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'slice', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'groupName', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'nodeName', 'UTF8', None, ),  # 4
)
all_structs.append(TileSummarySeries)
TileSummarySeries.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'percentiles', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 1
    (2, TType.MAP, 'histogram', (TType.STRING, 'UTF8', TType.LIST, (TType.I64, None, False), False), None, ),  # 2
    (3, TType.LIST, 'count', (TType.I64, None, False), None, ),  # 3
    (4, TType.LIST, 'nullCount', (TType.I64, None, False), None, ),  # 4
    (5, TType.LIST, 'innerCount', (TType.I64, None, False), None, ),  # 5
    (6, TType.LIST, 'innerNullCount', (TType.I64, None, False), None, ),  # 6
    (7, TType.LIST, 'lengthPercentiles', (TType.LIST, (TType.I32, None, False), False), None, ),  # 7
    (8, TType.LIST, 'stringLengthPercentiles', (TType.LIST, (TType.I32, None, False), False), None, ),  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    (200, TType.LIST, 'timestamps', (TType.I64, None, False), None, ),  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    (300, TType.STRUCT, 'key', [TileSeriesKey, None], None, ),  # 300
)
all_structs.append(TileDrift)
TileDrift.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'percentileDrift', None, None, ),  # 1
    (2, TType.DOUBLE, 'histogramDrift', None, None, ),  # 2
    (3, TType.DOUBLE, 'countChangePercent', None, None, ),  # 3
    (4, TType.DOUBLE, 'nullRatioChangePercent', None, None, ),  # 4
    (5, TType.DOUBLE, 'innerCountChangePercent', None, None, ),  # 5
    (6, TType.DOUBLE, 'innerNullCountChangePercent', None, None, ),  # 6
    (7, TType.DOUBLE, 'lengthPercentilesDrift', None, None, ),  # 7
    (8, TType.DOUBLE, 'stringLengthPercentilesDrift', None, None, ),  # 8
)
all_structs.append(TileDriftSeries)
TileDriftSeries.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'percentileDriftSeries', (TType.DOUBLE, None, False), None, ),  # 1
    (2, TType.LIST, 'histogramDriftSeries', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'countChangePercentSeries', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.LIST, 'nullRatioChangePercentSeries', (TType.DOUBLE, None, False), None, ),  # 4
    (5, TType.LIST, 'innerCountChangePercentSeries', (TType.DOUBLE, None, False), None, ),  # 5
    (6, TType.LIST, 'innerNullCountChangePercentSeries', (TType.DOUBLE, None, False), None, ),  # 6
    (7, TType.LIST, 'lengthPercentilesDriftSeries', (TType.DOUBLE, None, False), None, ),  # 7
    (8, TType.LIST, 'stringLengthPercentilesDriftSeries', (TType.DOUBLE, None, False), None, ),  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    (200, TType.LIST, 'timestamps', (TType.I64, None, False), None, ),  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    None,  # 210
    None,  # 211
    None,  # 212
    None,  # 213
    None,  # 214
    None,  # 215
    None,  # 216
    None,  # 217
    None,  # 218
    None,  # 219
    None,  # 220
    None,  # 221
    None,  # 222
    None,  # 223
    None,  # 224
    None,  # 225
    None,  # 226
    None,  # 227
    None,  # 228
    None,  # 229
    None,  # 230
    None,  # 231
    None,  # 232
    None,  # 233
    None,  # 234
    None,  # 235
    None,  # 236
    None,  # 237
    None,  # 238
    None,  # 239
    None,  # 240
    None,  # 241
    None,  # 242
    None,  # 243
    None,  # 244
    None,  # 245
    None,  # 246
    None,  # 247
    None,  # 248
    None,  # 249
    None,  # 250
    None,  # 251
    None,  # 252
    None,  # 253
    None,  # 254
    None,  # 255
    None,  # 256
    None,  # 257
    None,  # 258
    None,  # 259
    None,  # 260
    None,  # 261
    None,  # 262
    None,  # 263
    None,  # 264
    None,  # 265
    None,  # 266
    None,  # 267
    None,  # 268
    None,  # 269
    None,  # 270
    None,  # 271
    None,  # 272
    None,  # 273
    None,  # 274
    None,  # 275
    None,  # 276
    None,  # 277
    None,  # 278
    None,  # 279
    None,  # 280
    None,  # 281
    None,  # 282
    None,  # 283
    None,  # 284
    None,  # 285
    None,  # 286
    None,  # 287
    None,  # 288
    None,  # 289
    None,  # 290
    None,  # 291
    None,  # 292
    None,  # 293
    None,  # 294
    None,  # 295
    None,  # 296
    None,  # 297
    None,  # 298
    None,  # 299
    (300, TType.STRUCT, 'key', [TileSeriesKey, None], None, ),  # 300
)
all_structs.append(DriftSpec)
DriftSpec.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'slices', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.MAP, 'derivations', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.MAP, 'columnCardinalityHints', (TType.STRING, 'UTF8', TType.I32, None, False), None, ),  # 3
    (4, TType.STRUCT, 'tileSize', [ai.chronon.api.common.ttypes.Window, None], None, ),  # 4
    (5, TType.LIST, 'lookbackWindows', (TType.STRUCT, [ai.chronon.api.common.ttypes.Window, None], False), None, ),  # 5
    (6, TType.I32, 'driftMetric', None, 0, ),  # 6
)
all_structs.append(JoinDriftRequest)
JoinDriftRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I64, 'startTs', None, None, ),  # 2
    (3, TType.I64, 'endTs', None, None, ),  # 3
    None,  # 4
    None,  # 5
    (6, TType.STRING, 'offset', 'UTF8', None, ),  # 6
    (7, TType.I32, 'algorithm', None, None, ),  # 7
    (8, TType.STRING, 'columnName', 'UTF8', None, ),  # 8
)
all_structs.append(JoinDriftResponse)
JoinDriftResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'driftSeries', (TType.STRUCT, [TileDriftSeries, None], False), None, ),  # 1
)
all_structs.append(JoinSummaryRequest)
JoinSummaryRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I64, 'startTs', None, None, ),  # 2
    (3, TType.I64, 'endTs', None, None, ),  # 3
    None,  # 4
    (5, TType.STRING, 'percentiles', 'UTF8', None, ),  # 5
    None,  # 6
    None,  # 7
    (8, TType.STRING, 'columnName', 'UTF8', None, ),  # 8
)
fix_spec(all_structs)
del all_structs
