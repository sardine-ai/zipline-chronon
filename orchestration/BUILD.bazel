scala_library(
    name = "lib",
    srcs = glob(["src/main/**/*.scala"]),
    format = select({
        "//tools/config:scala_2_13": False,  # Disable for 2.13
        "//conditions:default": True,  # Enable for other versions
    }),
    visibility = ["//visibility:public"],
    deps = _VERTX_DEPS + [
        "//service_commons:lib",
        "//api:lib",
        "//api:thrift_java",
        "//online:lib",
        maven_artifact_with_suffix("org.apache.logging.log4j:log4j-api-scala"),
        maven_artifact("org.apache.logging.log4j:log4j-core"),
        maven_artifact("org.apache.logging.log4j:log4j-api"),
        maven_artifact("org.slf4j:slf4j-api"),
        maven_artifact("io.temporal:temporal-sdk"),
        maven_artifact("io.temporal:temporal-serviceclient"),
        maven_artifact("com.fasterxml.jackson.core:jackson-databind"),
        maven_artifact("com.google.protobuf:protobuf-java"),
        maven_artifact("com.google.code.findbugs:jsr305"),
        maven_artifact("io.grpc:grpc-core"),
        maven_artifact("io.grpc:grpc-stub"),
        maven_artifact("io.grpc:grpc-inprocess"),
        maven_artifact("com.google.cloud:google-cloud-spanner"),
        maven_artifact("org.postgresql:postgresql"),
        maven_artifact_with_suffix("com.typesafe.slick:slick"),
    ],
)

test_deps = _VERTX_DEPS + _SCALA_TEST_DEPS + [
    ":lib",
    "//api:thrift_java",
    "//api:lib",
    "//online:lib",
    "//service_commons:lib",
    maven_artifact_with_suffix("org.apache.logging.log4j:log4j-api-scala"),
    maven_artifact("org.apache.logging.log4j:log4j-core"),
    maven_artifact("org.apache.logging.log4j:log4j-api"),
    maven_artifact("org.slf4j:slf4j-api"),
    maven_artifact("io.temporal:temporal-sdk"),
    maven_artifact("io.temporal:temporal-testing"),
    maven_artifact("io.temporal:temporal-serviceclient"),
    maven_artifact("com.fasterxml.jackson.core:jackson-core"),
    maven_artifact("com.fasterxml.jackson.core:jackson-databind"),
    maven_artifact("io.grpc:grpc-core"),
    maven_artifact("io.grpc:grpc-stub"),
    maven_artifact("io.grpc:grpc-inprocess"),
    maven_artifact("com.google.guava:guava"),
    maven_artifact("com.google.protobuf:protobuf-java"),
    maven_artifact("org.testcontainers:postgresql"),
    maven_artifact("org.testcontainers:jdbc"),
    maven_artifact("org.testcontainers:testcontainers"),
    maven_artifact_with_suffix("com.typesafe.slick:slick"),
]

scala_library(
    name = "test_lib",
    srcs = glob(["src/test/**/*.scala"]),
    format = select({
        "//tools/config:scala_2_13": False,  # Disable for 2.13
        "//conditions:default": True,  # Enable for other versions
    }),
    visibility = ["//visibility:public"],
    deps = test_deps,
)

scala_test_suite(
    name = "tests",
    srcs = glob(
        ["src/test/**/*.scala"],
        # Excluding integration tests
        exclude = [
            "src/test/**/NodeExecutionWorkflowIntegrationSpec.scala",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = test_deps + [":test_lib"],
)

scala_test_suite(
    name = "integration_tests",
    srcs = glob(
        [
            "src/test/**/NodeExecutionWorkflowIntegrationSpec.scala",
        ],
    ),
    visibility = ["//visibility:public"],
    deps = test_deps + [":test_lib"],
)

jvm_binary(
    name = "orchestration_assembly",
    main_class = "ai.chronon.service.ChrononServiceLauncher",
    runtime_deps = [":lib"],
)
