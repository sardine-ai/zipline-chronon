//
// Autogenerated by Thrift Compiler (0.21.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


TimeUnit = {
  '0' : 'HOURS',
  'HOURS' : 0,
  '1' : 'DAYS',
  'DAYS' : 1,
  '2' : 'MINUTES',
  'MINUTES' : 2
};
Window = function(args) {
  this.length = null;
  this.timeUnit = null;
  if (args) {
    if (args.length !== undefined && args.length !== null) {
      this.length = args.length;
    }
    if (args.timeUnit !== undefined && args.timeUnit !== null) {
      this.timeUnit = args.timeUnit;
    }
  }
};
Window.prototype = {};
Window.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.length = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timeUnit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Window.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('Window');
  if (this.length !== null && this.length !== undefined) {
    output.writeFieldBegin('length', Thrift.Type.I32, 1);
    output.writeI32(this.length);
    output.writeFieldEnd();
  }
  if (this.timeUnit !== null && this.timeUnit !== undefined) {
    output.writeFieldBegin('timeUnit', Thrift.Type.I32, 2);
    output.writeI32(this.timeUnit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

