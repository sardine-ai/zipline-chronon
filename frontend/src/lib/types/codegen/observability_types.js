//
// Autogenerated by Thrift Compiler (0.21.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


Cardinality = {
  '0' : 'LOW',
  'LOW' : 0,
  '1' : 'HIGH',
  'HIGH' : 1
};
DriftMetric = {
  '0' : 'JENSEN_SHANNON',
  'JENSEN_SHANNON' : 0,
  '1' : 'HELLINGER',
  'HELLINGER' : 1,
  '3' : 'PSI',
  'PSI' : 3
};
TileKey = function(args) {
  this.column = null;
  this.slice = null;
  this.name = null;
  this.sizeMillis = null;
  if (args) {
    if (args.column !== undefined && args.column !== null) {
      this.column = args.column;
    }
    if (args.slice !== undefined && args.slice !== null) {
      this.slice = args.slice;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.sizeMillis !== undefined && args.sizeMillis !== null) {
      this.sizeMillis = args.sizeMillis;
    }
  }
};
TileKey.prototype = {};
TileKey.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.slice = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.sizeMillis = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TileKey.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('TileKey');
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 1);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.slice !== null && this.slice !== undefined) {
    output.writeFieldBegin('slice', Thrift.Type.STRING, 2);
    output.writeString(this.slice);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.sizeMillis !== null && this.sizeMillis !== undefined) {
    output.writeFieldBegin('sizeMillis', Thrift.Type.I64, 4);
    output.writeI64(this.sizeMillis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TileSummary = function(args) {
  this.percentiles = null;
  this.histogram = null;
  this.count = null;
  this.nullCount = null;
  this.innerCount = null;
  this.innerNullCount = null;
  this.lengthPercentiles = null;
  this.stringLengthPercentiles = null;
  if (args) {
    if (args.percentiles !== undefined && args.percentiles !== null) {
      this.percentiles = Thrift.copyList(args.percentiles, [null]);
    }
    if (args.histogram !== undefined && args.histogram !== null) {
      this.histogram = Thrift.copyMap(args.histogram, [null]);
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.nullCount !== undefined && args.nullCount !== null) {
      this.nullCount = args.nullCount;
    }
    if (args.innerCount !== undefined && args.innerCount !== null) {
      this.innerCount = args.innerCount;
    }
    if (args.innerNullCount !== undefined && args.innerNullCount !== null) {
      this.innerNullCount = args.innerNullCount;
    }
    if (args.lengthPercentiles !== undefined && args.lengthPercentiles !== null) {
      this.lengthPercentiles = Thrift.copyList(args.lengthPercentiles, [null]);
    }
    if (args.stringLengthPercentiles !== undefined && args.stringLengthPercentiles !== null) {
      this.stringLengthPercentiles = Thrift.copyList(args.stringLengthPercentiles, [null]);
    }
  }
};
TileSummary.prototype = {};
TileSummary.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.percentiles = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readDouble().value;
          this.percentiles.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.histogram = {};
        var _rtmp35 = input.readMapBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          if (_i6 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key7 = null;
          var val8 = null;
          key7 = input.readString().value;
          val8 = input.readI64().value;
          this.histogram[key7] = val8;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.count = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.nullCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.innerCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.innerNullCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.lengthPercentiles = [];
        var _rtmp310 = input.readListBegin();
        var _size9 = _rtmp310.size || 0;
        for (var _i11 = 0; _i11 < _size9; ++_i11) {
          var elem12 = null;
          elem12 = input.readI32().value;
          this.lengthPercentiles.push(elem12);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        this.stringLengthPercentiles = [];
        var _rtmp314 = input.readListBegin();
        var _size13 = _rtmp314.size || 0;
        for (var _i15 = 0; _i15 < _size13; ++_i15) {
          var elem16 = null;
          elem16 = input.readI32().value;
          this.stringLengthPercentiles.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TileSummary.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('TileSummary');
  if (this.percentiles !== null && this.percentiles !== undefined) {
    output.writeFieldBegin('percentiles', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.DOUBLE, this.percentiles.length);
    for (var iter17 in this.percentiles) {
      if (this.percentiles.hasOwnProperty(iter17)) {
        iter17 = this.percentiles[iter17];
        output.writeDouble(iter17);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.histogram !== null && this.histogram !== undefined) {
    output.writeFieldBegin('histogram', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.histogram));
    for (var kiter18 in this.histogram) {
      if (this.histogram.hasOwnProperty(kiter18)) {
        var viter19 = this.histogram[kiter18];
        output.writeString(kiter18);
        output.writeI64(viter19);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I64, 3);
    output.writeI64(this.count);
    output.writeFieldEnd();
  }
  if (this.nullCount !== null && this.nullCount !== undefined) {
    output.writeFieldBegin('nullCount', Thrift.Type.I64, 4);
    output.writeI64(this.nullCount);
    output.writeFieldEnd();
  }
  if (this.innerCount !== null && this.innerCount !== undefined) {
    output.writeFieldBegin('innerCount', Thrift.Type.I64, 5);
    output.writeI64(this.innerCount);
    output.writeFieldEnd();
  }
  if (this.innerNullCount !== null && this.innerNullCount !== undefined) {
    output.writeFieldBegin('innerNullCount', Thrift.Type.I64, 6);
    output.writeI64(this.innerNullCount);
    output.writeFieldEnd();
  }
  if (this.lengthPercentiles !== null && this.lengthPercentiles !== undefined) {
    output.writeFieldBegin('lengthPercentiles', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.I32, this.lengthPercentiles.length);
    for (var iter20 in this.lengthPercentiles) {
      if (this.lengthPercentiles.hasOwnProperty(iter20)) {
        iter20 = this.lengthPercentiles[iter20];
        output.writeI32(iter20);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stringLengthPercentiles !== null && this.stringLengthPercentiles !== undefined) {
    output.writeFieldBegin('stringLengthPercentiles', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.I32, this.stringLengthPercentiles.length);
    for (var iter21 in this.stringLengthPercentiles) {
      if (this.stringLengthPercentiles.hasOwnProperty(iter21)) {
        iter21 = this.stringLengthPercentiles[iter21];
        output.writeI32(iter21);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TileSeriesKey = function(args) {
  this.column = null;
  this.slice = null;
  this.groupName = null;
  this.nodeName = null;
  if (args) {
    if (args.column !== undefined && args.column !== null) {
      this.column = args.column;
    }
    if (args.slice !== undefined && args.slice !== null) {
      this.slice = args.slice;
    }
    if (args.groupName !== undefined && args.groupName !== null) {
      this.groupName = args.groupName;
    }
    if (args.nodeName !== undefined && args.nodeName !== null) {
      this.nodeName = args.nodeName;
    }
  }
};
TileSeriesKey.prototype = {};
TileSeriesKey.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.slice = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.groupName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nodeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TileSeriesKey.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('TileSeriesKey');
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 1);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.slice !== null && this.slice !== undefined) {
    output.writeFieldBegin('slice', Thrift.Type.STRING, 2);
    output.writeString(this.slice);
    output.writeFieldEnd();
  }
  if (this.groupName !== null && this.groupName !== undefined) {
    output.writeFieldBegin('groupName', Thrift.Type.STRING, 3);
    output.writeString(this.groupName);
    output.writeFieldEnd();
  }
  if (this.nodeName !== null && this.nodeName !== undefined) {
    output.writeFieldBegin('nodeName', Thrift.Type.STRING, 4);
    output.writeString(this.nodeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TileSummarySeries = function(args) {
  this.percentiles = null;
  this.histogram = null;
  this.count = null;
  this.nullCount = null;
  this.innerCount = null;
  this.innerNullCount = null;
  this.lengthPercentiles = null;
  this.stringLengthPercentiles = null;
  this.timestamps = null;
  this.key = null;
  if (args) {
    if (args.percentiles !== undefined && args.percentiles !== null) {
      this.percentiles = Thrift.copyList(args.percentiles, [Thrift.copyList, null]);
    }
    if (args.histogram !== undefined && args.histogram !== null) {
      this.histogram = Thrift.copyMap(args.histogram, [Thrift.copyList, null]);
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = Thrift.copyList(args.count, [null]);
    }
    if (args.nullCount !== undefined && args.nullCount !== null) {
      this.nullCount = Thrift.copyList(args.nullCount, [null]);
    }
    if (args.innerCount !== undefined && args.innerCount !== null) {
      this.innerCount = Thrift.copyList(args.innerCount, [null]);
    }
    if (args.innerNullCount !== undefined && args.innerNullCount !== null) {
      this.innerNullCount = Thrift.copyList(args.innerNullCount, [null]);
    }
    if (args.lengthPercentiles !== undefined && args.lengthPercentiles !== null) {
      this.lengthPercentiles = Thrift.copyList(args.lengthPercentiles, [Thrift.copyList, null]);
    }
    if (args.stringLengthPercentiles !== undefined && args.stringLengthPercentiles !== null) {
      this.stringLengthPercentiles = Thrift.copyList(args.stringLengthPercentiles, [Thrift.copyList, null]);
    }
    if (args.timestamps !== undefined && args.timestamps !== null) {
      this.timestamps = Thrift.copyList(args.timestamps, [null]);
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = new TileSeriesKey(args.key);
    }
  }
};
TileSummarySeries.prototype = {};
TileSummarySeries.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.percentiles = [];
        var _rtmp323 = input.readListBegin();
        var _size22 = _rtmp323.size || 0;
        for (var _i24 = 0; _i24 < _size22; ++_i24) {
          var elem25 = null;
          elem25 = [];
          var _rtmp327 = input.readListBegin();
          var _size26 = _rtmp327.size || 0;
          for (var _i28 = 0; _i28 < _size26; ++_i28) {
            var elem29 = null;
            elem29 = input.readDouble().value;
            elem25.push(elem29);
          }
          input.readListEnd();
          this.percentiles.push(elem25);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.histogram = {};
        var _rtmp331 = input.readMapBegin();
        var _size30 = _rtmp331.size || 0;
        for (var _i32 = 0; _i32 < _size30; ++_i32) {
          if (_i32 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key33 = null;
          var val34 = null;
          key33 = input.readString().value;
          val34 = [];
          var _rtmp336 = input.readListBegin();
          var _size35 = _rtmp336.size || 0;
          for (var _i37 = 0; _i37 < _size35; ++_i37) {
            var elem38 = null;
            elem38 = input.readI64().value;
            val34.push(elem38);
          }
          input.readListEnd();
          this.histogram[key33] = val34;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.count = [];
        var _rtmp340 = input.readListBegin();
        var _size39 = _rtmp340.size || 0;
        for (var _i41 = 0; _i41 < _size39; ++_i41) {
          var elem42 = null;
          elem42 = input.readI64().value;
          this.count.push(elem42);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.nullCount = [];
        var _rtmp344 = input.readListBegin();
        var _size43 = _rtmp344.size || 0;
        for (var _i45 = 0; _i45 < _size43; ++_i45) {
          var elem46 = null;
          elem46 = input.readI64().value;
          this.nullCount.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.innerCount = [];
        var _rtmp348 = input.readListBegin();
        var _size47 = _rtmp348.size || 0;
        for (var _i49 = 0; _i49 < _size47; ++_i49) {
          var elem50 = null;
          elem50 = input.readI64().value;
          this.innerCount.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.innerNullCount = [];
        var _rtmp352 = input.readListBegin();
        var _size51 = _rtmp352.size || 0;
        for (var _i53 = 0; _i53 < _size51; ++_i53) {
          var elem54 = null;
          elem54 = input.readI64().value;
          this.innerNullCount.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.lengthPercentiles = [];
        var _rtmp356 = input.readListBegin();
        var _size55 = _rtmp356.size || 0;
        for (var _i57 = 0; _i57 < _size55; ++_i57) {
          var elem58 = null;
          elem58 = [];
          var _rtmp360 = input.readListBegin();
          var _size59 = _rtmp360.size || 0;
          for (var _i61 = 0; _i61 < _size59; ++_i61) {
            var elem62 = null;
            elem62 = input.readI32().value;
            elem58.push(elem62);
          }
          input.readListEnd();
          this.lengthPercentiles.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        this.stringLengthPercentiles = [];
        var _rtmp364 = input.readListBegin();
        var _size63 = _rtmp364.size || 0;
        for (var _i65 = 0; _i65 < _size63; ++_i65) {
          var elem66 = null;
          elem66 = [];
          var _rtmp368 = input.readListBegin();
          var _size67 = _rtmp368.size || 0;
          for (var _i69 = 0; _i69 < _size67; ++_i69) {
            var elem70 = null;
            elem70 = input.readI32().value;
            elem66.push(elem70);
          }
          input.readListEnd();
          this.stringLengthPercentiles.push(elem66);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 200:
      if (ftype == Thrift.Type.LIST) {
        this.timestamps = [];
        var _rtmp372 = input.readListBegin();
        var _size71 = _rtmp372.size || 0;
        for (var _i73 = 0; _i73 < _size71; ++_i73) {
          var elem74 = null;
          elem74 = input.readI64().value;
          this.timestamps.push(elem74);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 300:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new TileSeriesKey();
        this.key[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TileSummarySeries.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('TileSummarySeries');
  if (this.percentiles !== null && this.percentiles !== undefined) {
    output.writeFieldBegin('percentiles', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.LIST, this.percentiles.length);
    for (var iter75 in this.percentiles) {
      if (this.percentiles.hasOwnProperty(iter75)) {
        iter75 = this.percentiles[iter75];
        output.writeListBegin(Thrift.Type.DOUBLE, iter75.length);
        for (var iter76 in iter75) {
          if (iter75.hasOwnProperty(iter76)) {
            iter76 = iter75[iter76];
            output.writeDouble(iter76);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.histogram !== null && this.histogram !== undefined) {
    output.writeFieldBegin('histogram', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.histogram));
    for (var kiter77 in this.histogram) {
      if (this.histogram.hasOwnProperty(kiter77)) {
        var viter78 = this.histogram[kiter77];
        output.writeString(kiter77);
        output.writeListBegin(Thrift.Type.I64, viter78.length);
        for (var iter79 in viter78) {
          if (viter78.hasOwnProperty(iter79)) {
            iter79 = viter78[iter79];
            output.writeI64(iter79);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.count.length);
    for (var iter80 in this.count) {
      if (this.count.hasOwnProperty(iter80)) {
        iter80 = this.count[iter80];
        output.writeI64(iter80);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nullCount !== null && this.nullCount !== undefined) {
    output.writeFieldBegin('nullCount', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I64, this.nullCount.length);
    for (var iter81 in this.nullCount) {
      if (this.nullCount.hasOwnProperty(iter81)) {
        iter81 = this.nullCount[iter81];
        output.writeI64(iter81);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.innerCount !== null && this.innerCount !== undefined) {
    output.writeFieldBegin('innerCount', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.innerCount.length);
    for (var iter82 in this.innerCount) {
      if (this.innerCount.hasOwnProperty(iter82)) {
        iter82 = this.innerCount[iter82];
        output.writeI64(iter82);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.innerNullCount !== null && this.innerNullCount !== undefined) {
    output.writeFieldBegin('innerNullCount', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I64, this.innerNullCount.length);
    for (var iter83 in this.innerNullCount) {
      if (this.innerNullCount.hasOwnProperty(iter83)) {
        iter83 = this.innerNullCount[iter83];
        output.writeI64(iter83);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lengthPercentiles !== null && this.lengthPercentiles !== undefined) {
    output.writeFieldBegin('lengthPercentiles', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.LIST, this.lengthPercentiles.length);
    for (var iter84 in this.lengthPercentiles) {
      if (this.lengthPercentiles.hasOwnProperty(iter84)) {
        iter84 = this.lengthPercentiles[iter84];
        output.writeListBegin(Thrift.Type.I32, iter84.length);
        for (var iter85 in iter84) {
          if (iter84.hasOwnProperty(iter85)) {
            iter85 = iter84[iter85];
            output.writeI32(iter85);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stringLengthPercentiles !== null && this.stringLengthPercentiles !== undefined) {
    output.writeFieldBegin('stringLengthPercentiles', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.LIST, this.stringLengthPercentiles.length);
    for (var iter86 in this.stringLengthPercentiles) {
      if (this.stringLengthPercentiles.hasOwnProperty(iter86)) {
        iter86 = this.stringLengthPercentiles[iter86];
        output.writeListBegin(Thrift.Type.I32, iter86.length);
        for (var iter87 in iter86) {
          if (iter86.hasOwnProperty(iter87)) {
            iter87 = iter86[iter87];
            output.writeI32(iter87);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamps !== null && this.timestamps !== undefined) {
    output.writeFieldBegin('timestamps', Thrift.Type.LIST, 200);
    output.writeListBegin(Thrift.Type.I64, this.timestamps.length);
    for (var iter88 in this.timestamps) {
      if (this.timestamps.hasOwnProperty(iter88)) {
        iter88 = this.timestamps[iter88];
        output.writeI64(iter88);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 300);
    this.key[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TileDrift = function(args) {
  this.percentileDrift = null;
  this.histogramDrift = null;
  this.countChangePercent = null;
  this.nullRatioChangePercent = null;
  this.innerCountChangePercent = null;
  this.innerNullCountChangePercent = null;
  this.lengthPercentilesDrift = null;
  this.stringLengthPercentilesDrift = null;
  if (args) {
    if (args.percentileDrift !== undefined && args.percentileDrift !== null) {
      this.percentileDrift = args.percentileDrift;
    }
    if (args.histogramDrift !== undefined && args.histogramDrift !== null) {
      this.histogramDrift = args.histogramDrift;
    }
    if (args.countChangePercent !== undefined && args.countChangePercent !== null) {
      this.countChangePercent = args.countChangePercent;
    }
    if (args.nullRatioChangePercent !== undefined && args.nullRatioChangePercent !== null) {
      this.nullRatioChangePercent = args.nullRatioChangePercent;
    }
    if (args.innerCountChangePercent !== undefined && args.innerCountChangePercent !== null) {
      this.innerCountChangePercent = args.innerCountChangePercent;
    }
    if (args.innerNullCountChangePercent !== undefined && args.innerNullCountChangePercent !== null) {
      this.innerNullCountChangePercent = args.innerNullCountChangePercent;
    }
    if (args.lengthPercentilesDrift !== undefined && args.lengthPercentilesDrift !== null) {
      this.lengthPercentilesDrift = args.lengthPercentilesDrift;
    }
    if (args.stringLengthPercentilesDrift !== undefined && args.stringLengthPercentilesDrift !== null) {
      this.stringLengthPercentilesDrift = args.stringLengthPercentilesDrift;
    }
  }
};
TileDrift.prototype = {};
TileDrift.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.percentileDrift = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.histogramDrift = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.countChangePercent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.nullRatioChangePercent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.innerCountChangePercent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.innerNullCountChangePercent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lengthPercentilesDrift = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.stringLengthPercentilesDrift = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TileDrift.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('TileDrift');
  if (this.percentileDrift !== null && this.percentileDrift !== undefined) {
    output.writeFieldBegin('percentileDrift', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.percentileDrift);
    output.writeFieldEnd();
  }
  if (this.histogramDrift !== null && this.histogramDrift !== undefined) {
    output.writeFieldBegin('histogramDrift', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.histogramDrift);
    output.writeFieldEnd();
  }
  if (this.countChangePercent !== null && this.countChangePercent !== undefined) {
    output.writeFieldBegin('countChangePercent', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.countChangePercent);
    output.writeFieldEnd();
  }
  if (this.nullRatioChangePercent !== null && this.nullRatioChangePercent !== undefined) {
    output.writeFieldBegin('nullRatioChangePercent', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.nullRatioChangePercent);
    output.writeFieldEnd();
  }
  if (this.innerCountChangePercent !== null && this.innerCountChangePercent !== undefined) {
    output.writeFieldBegin('innerCountChangePercent', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.innerCountChangePercent);
    output.writeFieldEnd();
  }
  if (this.innerNullCountChangePercent !== null && this.innerNullCountChangePercent !== undefined) {
    output.writeFieldBegin('innerNullCountChangePercent', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.innerNullCountChangePercent);
    output.writeFieldEnd();
  }
  if (this.lengthPercentilesDrift !== null && this.lengthPercentilesDrift !== undefined) {
    output.writeFieldBegin('lengthPercentilesDrift', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.lengthPercentilesDrift);
    output.writeFieldEnd();
  }
  if (this.stringLengthPercentilesDrift !== null && this.stringLengthPercentilesDrift !== undefined) {
    output.writeFieldBegin('stringLengthPercentilesDrift', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.stringLengthPercentilesDrift);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TileDriftSeries = function(args) {
  this.percentileDriftSeries = null;
  this.histogramDriftSeries = null;
  this.countChangePercentSeries = null;
  this.nullRatioChangePercentSeries = null;
  this.innerCountChangePercentSeries = null;
  this.innerNullCountChangePercentSeries = null;
  this.lengthPercentilesDriftSeries = null;
  this.stringLengthPercentilesDriftSeries = null;
  this.timestamps = null;
  this.key = null;
  if (args) {
    if (args.percentileDriftSeries !== undefined && args.percentileDriftSeries !== null) {
      this.percentileDriftSeries = Thrift.copyList(args.percentileDriftSeries, [null]);
    }
    if (args.histogramDriftSeries !== undefined && args.histogramDriftSeries !== null) {
      this.histogramDriftSeries = Thrift.copyList(args.histogramDriftSeries, [null]);
    }
    if (args.countChangePercentSeries !== undefined && args.countChangePercentSeries !== null) {
      this.countChangePercentSeries = Thrift.copyList(args.countChangePercentSeries, [null]);
    }
    if (args.nullRatioChangePercentSeries !== undefined && args.nullRatioChangePercentSeries !== null) {
      this.nullRatioChangePercentSeries = Thrift.copyList(args.nullRatioChangePercentSeries, [null]);
    }
    if (args.innerCountChangePercentSeries !== undefined && args.innerCountChangePercentSeries !== null) {
      this.innerCountChangePercentSeries = Thrift.copyList(args.innerCountChangePercentSeries, [null]);
    }
    if (args.innerNullCountChangePercentSeries !== undefined && args.innerNullCountChangePercentSeries !== null) {
      this.innerNullCountChangePercentSeries = Thrift.copyList(args.innerNullCountChangePercentSeries, [null]);
    }
    if (args.lengthPercentilesDriftSeries !== undefined && args.lengthPercentilesDriftSeries !== null) {
      this.lengthPercentilesDriftSeries = Thrift.copyList(args.lengthPercentilesDriftSeries, [null]);
    }
    if (args.stringLengthPercentilesDriftSeries !== undefined && args.stringLengthPercentilesDriftSeries !== null) {
      this.stringLengthPercentilesDriftSeries = Thrift.copyList(args.stringLengthPercentilesDriftSeries, [null]);
    }
    if (args.timestamps !== undefined && args.timestamps !== null) {
      this.timestamps = Thrift.copyList(args.timestamps, [null]);
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = new TileSeriesKey(args.key);
    }
  }
};
TileDriftSeries.prototype = {};
TileDriftSeries.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.percentileDriftSeries = [];
        var _rtmp390 = input.readListBegin();
        var _size89 = _rtmp390.size || 0;
        for (var _i91 = 0; _i91 < _size89; ++_i91) {
          var elem92 = null;
          elem92 = input.readDouble().value;
          this.percentileDriftSeries.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.histogramDriftSeries = [];
        var _rtmp394 = input.readListBegin();
        var _size93 = _rtmp394.size || 0;
        for (var _i95 = 0; _i95 < _size93; ++_i95) {
          var elem96 = null;
          elem96 = input.readDouble().value;
          this.histogramDriftSeries.push(elem96);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.countChangePercentSeries = [];
        var _rtmp398 = input.readListBegin();
        var _size97 = _rtmp398.size || 0;
        for (var _i99 = 0; _i99 < _size97; ++_i99) {
          var elem100 = null;
          elem100 = input.readDouble().value;
          this.countChangePercentSeries.push(elem100);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.nullRatioChangePercentSeries = [];
        var _rtmp3102 = input.readListBegin();
        var _size101 = _rtmp3102.size || 0;
        for (var _i103 = 0; _i103 < _size101; ++_i103) {
          var elem104 = null;
          elem104 = input.readDouble().value;
          this.nullRatioChangePercentSeries.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.innerCountChangePercentSeries = [];
        var _rtmp3106 = input.readListBegin();
        var _size105 = _rtmp3106.size || 0;
        for (var _i107 = 0; _i107 < _size105; ++_i107) {
          var elem108 = null;
          elem108 = input.readDouble().value;
          this.innerCountChangePercentSeries.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.innerNullCountChangePercentSeries = [];
        var _rtmp3110 = input.readListBegin();
        var _size109 = _rtmp3110.size || 0;
        for (var _i111 = 0; _i111 < _size109; ++_i111) {
          var elem112 = null;
          elem112 = input.readDouble().value;
          this.innerNullCountChangePercentSeries.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.lengthPercentilesDriftSeries = [];
        var _rtmp3114 = input.readListBegin();
        var _size113 = _rtmp3114.size || 0;
        for (var _i115 = 0; _i115 < _size113; ++_i115) {
          var elem116 = null;
          elem116 = input.readDouble().value;
          this.lengthPercentilesDriftSeries.push(elem116);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        this.stringLengthPercentilesDriftSeries = [];
        var _rtmp3118 = input.readListBegin();
        var _size117 = _rtmp3118.size || 0;
        for (var _i119 = 0; _i119 < _size117; ++_i119) {
          var elem120 = null;
          elem120 = input.readDouble().value;
          this.stringLengthPercentilesDriftSeries.push(elem120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 200:
      if (ftype == Thrift.Type.LIST) {
        this.timestamps = [];
        var _rtmp3122 = input.readListBegin();
        var _size121 = _rtmp3122.size || 0;
        for (var _i123 = 0; _i123 < _size121; ++_i123) {
          var elem124 = null;
          elem124 = input.readI64().value;
          this.timestamps.push(elem124);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 300:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new TileSeriesKey();
        this.key[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TileDriftSeries.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('TileDriftSeries');
  if (this.percentileDriftSeries !== null && this.percentileDriftSeries !== undefined) {
    output.writeFieldBegin('percentileDriftSeries', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.DOUBLE, this.percentileDriftSeries.length);
    for (var iter125 in this.percentileDriftSeries) {
      if (this.percentileDriftSeries.hasOwnProperty(iter125)) {
        iter125 = this.percentileDriftSeries[iter125];
        output.writeDouble(iter125);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.histogramDriftSeries !== null && this.histogramDriftSeries !== undefined) {
    output.writeFieldBegin('histogramDriftSeries', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.DOUBLE, this.histogramDriftSeries.length);
    for (var iter126 in this.histogramDriftSeries) {
      if (this.histogramDriftSeries.hasOwnProperty(iter126)) {
        iter126 = this.histogramDriftSeries[iter126];
        output.writeDouble(iter126);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.countChangePercentSeries !== null && this.countChangePercentSeries !== undefined) {
    output.writeFieldBegin('countChangePercentSeries', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.DOUBLE, this.countChangePercentSeries.length);
    for (var iter127 in this.countChangePercentSeries) {
      if (this.countChangePercentSeries.hasOwnProperty(iter127)) {
        iter127 = this.countChangePercentSeries[iter127];
        output.writeDouble(iter127);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nullRatioChangePercentSeries !== null && this.nullRatioChangePercentSeries !== undefined) {
    output.writeFieldBegin('nullRatioChangePercentSeries', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.DOUBLE, this.nullRatioChangePercentSeries.length);
    for (var iter128 in this.nullRatioChangePercentSeries) {
      if (this.nullRatioChangePercentSeries.hasOwnProperty(iter128)) {
        iter128 = this.nullRatioChangePercentSeries[iter128];
        output.writeDouble(iter128);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.innerCountChangePercentSeries !== null && this.innerCountChangePercentSeries !== undefined) {
    output.writeFieldBegin('innerCountChangePercentSeries', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.DOUBLE, this.innerCountChangePercentSeries.length);
    for (var iter129 in this.innerCountChangePercentSeries) {
      if (this.innerCountChangePercentSeries.hasOwnProperty(iter129)) {
        iter129 = this.innerCountChangePercentSeries[iter129];
        output.writeDouble(iter129);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.innerNullCountChangePercentSeries !== null && this.innerNullCountChangePercentSeries !== undefined) {
    output.writeFieldBegin('innerNullCountChangePercentSeries', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.DOUBLE, this.innerNullCountChangePercentSeries.length);
    for (var iter130 in this.innerNullCountChangePercentSeries) {
      if (this.innerNullCountChangePercentSeries.hasOwnProperty(iter130)) {
        iter130 = this.innerNullCountChangePercentSeries[iter130];
        output.writeDouble(iter130);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lengthPercentilesDriftSeries !== null && this.lengthPercentilesDriftSeries !== undefined) {
    output.writeFieldBegin('lengthPercentilesDriftSeries', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.DOUBLE, this.lengthPercentilesDriftSeries.length);
    for (var iter131 in this.lengthPercentilesDriftSeries) {
      if (this.lengthPercentilesDriftSeries.hasOwnProperty(iter131)) {
        iter131 = this.lengthPercentilesDriftSeries[iter131];
        output.writeDouble(iter131);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stringLengthPercentilesDriftSeries !== null && this.stringLengthPercentilesDriftSeries !== undefined) {
    output.writeFieldBegin('stringLengthPercentilesDriftSeries', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.DOUBLE, this.stringLengthPercentilesDriftSeries.length);
    for (var iter132 in this.stringLengthPercentilesDriftSeries) {
      if (this.stringLengthPercentilesDriftSeries.hasOwnProperty(iter132)) {
        iter132 = this.stringLengthPercentilesDriftSeries[iter132];
        output.writeDouble(iter132);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamps !== null && this.timestamps !== undefined) {
    output.writeFieldBegin('timestamps', Thrift.Type.LIST, 200);
    output.writeListBegin(Thrift.Type.I64, this.timestamps.length);
    for (var iter133 in this.timestamps) {
      if (this.timestamps.hasOwnProperty(iter133)) {
        iter133 = this.timestamps[iter133];
        output.writeI64(iter133);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 300);
    this.key[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DriftSpec = function(args) {
  this.slices = null;
  this.derivations = null;
  this.columnCardinalityHints = null;
  this.tileSize = null;
  this.lookbackWindows = null;
  this.driftMetric = 0;
  if (args) {
    if (args.slices !== undefined && args.slices !== null) {
      this.slices = Thrift.copyList(args.slices, [null]);
    }
    if (args.derivations !== undefined && args.derivations !== null) {
      this.derivations = Thrift.copyMap(args.derivations, [null]);
    }
    if (args.columnCardinalityHints !== undefined && args.columnCardinalityHints !== null) {
      this.columnCardinalityHints = Thrift.copyMap(args.columnCardinalityHints, [null]);
    }
    if (args.tileSize !== undefined && args.tileSize !== null) {
      this.tileSize = new Window(args.tileSize);
    }
    if (args.lookbackWindows !== undefined && args.lookbackWindows !== null) {
      this.lookbackWindows = Thrift.copyList(args.lookbackWindows, [Window]);
    }
    if (args.driftMetric !== undefined && args.driftMetric !== null) {
      this.driftMetric = args.driftMetric;
    }
  }
};
DriftSpec.prototype = {};
DriftSpec.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.slices = [];
        var _rtmp3135 = input.readListBegin();
        var _size134 = _rtmp3135.size || 0;
        for (var _i136 = 0; _i136 < _size134; ++_i136) {
          var elem137 = null;
          elem137 = input.readString().value;
          this.slices.push(elem137);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.derivations = {};
        var _rtmp3139 = input.readMapBegin();
        var _size138 = _rtmp3139.size || 0;
        for (var _i140 = 0; _i140 < _size138; ++_i140) {
          if (_i140 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key141 = null;
          var val142 = null;
          key141 = input.readString().value;
          val142 = input.readString().value;
          this.derivations[key141] = val142;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.columnCardinalityHints = {};
        var _rtmp3144 = input.readMapBegin();
        var _size143 = _rtmp3144.size || 0;
        for (var _i145 = 0; _i145 < _size143; ++_i145) {
          if (_i145 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key146 = null;
          var val147 = null;
          key146 = input.readString().value;
          val147 = input.readI32().value;
          this.columnCardinalityHints[key146] = val147;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tileSize = new Window();
        this.tileSize[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.lookbackWindows = [];
        var _rtmp3149 = input.readListBegin();
        var _size148 = _rtmp3149.size || 0;
        for (var _i150 = 0; _i150 < _size148; ++_i150) {
          var elem151 = null;
          elem151 = new Window();
          elem151[Symbol.for("read")](input);
          this.lookbackWindows.push(elem151);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.driftMetric = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DriftSpec.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('DriftSpec');
  if (this.slices !== null && this.slices !== undefined) {
    output.writeFieldBegin('slices', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.slices.length);
    for (var iter152 in this.slices) {
      if (this.slices.hasOwnProperty(iter152)) {
        iter152 = this.slices[iter152];
        output.writeString(iter152);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.derivations !== null && this.derivations !== undefined) {
    output.writeFieldBegin('derivations', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.derivations));
    for (var kiter153 in this.derivations) {
      if (this.derivations.hasOwnProperty(kiter153)) {
        var viter154 = this.derivations[kiter153];
        output.writeString(kiter153);
        output.writeString(viter154);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.columnCardinalityHints !== null && this.columnCardinalityHints !== undefined) {
    output.writeFieldBegin('columnCardinalityHints', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.columnCardinalityHints));
    for (var kiter155 in this.columnCardinalityHints) {
      if (this.columnCardinalityHints.hasOwnProperty(kiter155)) {
        var viter156 = this.columnCardinalityHints[kiter155];
        output.writeString(kiter155);
        output.writeI32(viter156);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.tileSize !== null && this.tileSize !== undefined) {
    output.writeFieldBegin('tileSize', Thrift.Type.STRUCT, 4);
    this.tileSize[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.lookbackWindows !== null && this.lookbackWindows !== undefined) {
    output.writeFieldBegin('lookbackWindows', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.lookbackWindows.length);
    for (var iter157 in this.lookbackWindows) {
      if (this.lookbackWindows.hasOwnProperty(iter157)) {
        iter157 = this.lookbackWindows[iter157];
        iter157[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.driftMetric !== null && this.driftMetric !== undefined) {
    output.writeFieldBegin('driftMetric', Thrift.Type.I32, 6);
    output.writeI32(this.driftMetric);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

