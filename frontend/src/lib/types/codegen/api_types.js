//
// Autogenerated by Thrift Compiler (0.21.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


Operation = {
  '0' : 'MIN',
  'MIN' : 0,
  '1' : 'MAX',
  'MAX' : 1,
  '2' : 'FIRST',
  'FIRST' : 2,
  '3' : 'LAST',
  'LAST' : 3,
  '4' : 'UNIQUE_COUNT',
  'UNIQUE_COUNT' : 4,
  '5' : 'APPROX_UNIQUE_COUNT',
  'APPROX_UNIQUE_COUNT' : 5,
  '6' : 'COUNT',
  'COUNT' : 6,
  '7' : 'SUM',
  'SUM' : 7,
  '8' : 'AVERAGE',
  'AVERAGE' : 8,
  '9' : 'VARIANCE',
  'VARIANCE' : 9,
  '10' : 'SKEW',
  'SKEW' : 10,
  '11' : 'KURTOSIS',
  'KURTOSIS' : 11,
  '12' : 'APPROX_PERCENTILE',
  'APPROX_PERCENTILE' : 12,
  '13' : 'LAST_K',
  'LAST_K' : 13,
  '14' : 'FIRST_K',
  'FIRST_K' : 14,
  '15' : 'TOP_K',
  'TOP_K' : 15,
  '16' : 'BOTTOM_K',
  'BOTTOM_K' : 16,
  '17' : 'HISTOGRAM',
  'HISTOGRAM' : 17,
  '18' : 'APPROX_HISTOGRAM_K',
  'APPROX_HISTOGRAM_K' : 18
};
Accuracy = {
  '0' : 'TEMPORAL',
  'TEMPORAL' : 0,
  '1' : 'SNAPSHOT',
  'SNAPSHOT' : 1
};
DataKind = {
  '0' : 'BOOLEAN',
  'BOOLEAN' : 0,
  '1' : 'BYTE',
  'BYTE' : 1,
  '2' : 'SHORT',
  'SHORT' : 2,
  '3' : 'INT',
  'INT' : 3,
  '4' : 'LONG',
  'LONG' : 4,
  '5' : 'FLOAT',
  'FLOAT' : 5,
  '6' : 'DOUBLE',
  'DOUBLE' : 6,
  '7' : 'STRING',
  'STRING' : 7,
  '8' : 'BINARY',
  'BINARY' : 8,
  '9' : 'DATE',
  'DATE' : 9,
  '10' : 'TIMESTAMP',
  'TIMESTAMP' : 10,
  '11' : 'MAP',
  'MAP' : 11,
  '12' : 'LIST',
  'LIST' : 12,
  '13' : 'STRUCT',
  'STRUCT' : 13
};
ModelType = {
  '0' : 'XGBoost',
  'XGBoost' : 0,
  '1' : 'PyTorch',
  'PyTorch' : 1,
  '2' : 'TensorFlow',
  'TensorFlow' : 2,
  '3' : 'ScikitLearn',
  'ScikitLearn' : 3,
  '4' : 'LightGBM',
  'LightGBM' : 4,
  '100' : 'Other',
  'Other' : 100
};
Query = function(args) {
  this.selects = null;
  this.wheres = null;
  this.startPartition = null;
  this.endPartition = null;
  this.timeColumn = null;
  this.setups = [];
  this.mutationTimeColumn = null;
  this.reversalColumn = null;
  if (args) {
    if (args.selects !== undefined && args.selects !== null) {
      this.selects = Thrift.copyMap(args.selects, [null]);
    }
    if (args.wheres !== undefined && args.wheres !== null) {
      this.wheres = Thrift.copyList(args.wheres, [null]);
    }
    if (args.startPartition !== undefined && args.startPartition !== null) {
      this.startPartition = args.startPartition;
    }
    if (args.endPartition !== undefined && args.endPartition !== null) {
      this.endPartition = args.endPartition;
    }
    if (args.timeColumn !== undefined && args.timeColumn !== null) {
      this.timeColumn = args.timeColumn;
    }
    if (args.setups !== undefined && args.setups !== null) {
      this.setups = Thrift.copyList(args.setups, [null]);
    }
    if (args.mutationTimeColumn !== undefined && args.mutationTimeColumn !== null) {
      this.mutationTimeColumn = args.mutationTimeColumn;
    }
    if (args.reversalColumn !== undefined && args.reversalColumn !== null) {
      this.reversalColumn = args.reversalColumn;
    }
  }
};
Query.prototype = {};
Query.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.selects = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          if (_i2 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key3 = null;
          var val4 = null;
          key3 = input.readString().value;
          val4 = input.readString().value;
          this.selects[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.wheres = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = input.readString().value;
          this.wheres.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.startPartition = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.endPartition = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.timeColumn = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.setups = [];
        var _rtmp310 = input.readListBegin();
        var _size9 = _rtmp310.size || 0;
        for (var _i11 = 0; _i11 < _size9; ++_i11) {
          var elem12 = null;
          elem12 = input.readString().value;
          this.setups.push(elem12);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.mutationTimeColumn = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.reversalColumn = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Query.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('Query');
  if (this.selects !== null && this.selects !== undefined) {
    output.writeFieldBegin('selects', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.selects));
    for (var kiter13 in this.selects) {
      if (this.selects.hasOwnProperty(kiter13)) {
        var viter14 = this.selects[kiter13];
        output.writeString(kiter13);
        output.writeString(viter14);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.wheres !== null && this.wheres !== undefined) {
    output.writeFieldBegin('wheres', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.wheres.length);
    for (var iter15 in this.wheres) {
      if (this.wheres.hasOwnProperty(iter15)) {
        iter15 = this.wheres[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.startPartition !== null && this.startPartition !== undefined) {
    output.writeFieldBegin('startPartition', Thrift.Type.STRING, 3);
    output.writeString(this.startPartition);
    output.writeFieldEnd();
  }
  if (this.endPartition !== null && this.endPartition !== undefined) {
    output.writeFieldBegin('endPartition', Thrift.Type.STRING, 4);
    output.writeString(this.endPartition);
    output.writeFieldEnd();
  }
  if (this.timeColumn !== null && this.timeColumn !== undefined) {
    output.writeFieldBegin('timeColumn', Thrift.Type.STRING, 5);
    output.writeString(this.timeColumn);
    output.writeFieldEnd();
  }
  if (this.setups !== null && this.setups !== undefined) {
    output.writeFieldBegin('setups', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.setups.length);
    for (var iter16 in this.setups) {
      if (this.setups.hasOwnProperty(iter16)) {
        iter16 = this.setups[iter16];
        output.writeString(iter16);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mutationTimeColumn !== null && this.mutationTimeColumn !== undefined) {
    output.writeFieldBegin('mutationTimeColumn', Thrift.Type.STRING, 7);
    output.writeString(this.mutationTimeColumn);
    output.writeFieldEnd();
  }
  if (this.reversalColumn !== null && this.reversalColumn !== undefined) {
    output.writeFieldBegin('reversalColumn', Thrift.Type.STRING, 8);
    output.writeString(this.reversalColumn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StagingQuery = function(args) {
  this.metaData = null;
  this.query = null;
  this.startPartition = null;
  this.setups = null;
  if (args) {
    if (args.metaData !== undefined && args.metaData !== null) {
      this.metaData = new MetaData(args.metaData);
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.startPartition !== undefined && args.startPartition !== null) {
      this.startPartition = args.startPartition;
    }
    if (args.setups !== undefined && args.setups !== null) {
      this.setups = Thrift.copyList(args.setups, [null]);
    }
  }
};
StagingQuery.prototype = {};
StagingQuery.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.metaData = new MetaData();
        this.metaData[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.startPartition = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.setups = [];
        var _rtmp318 = input.readListBegin();
        var _size17 = _rtmp318.size || 0;
        for (var _i19 = 0; _i19 < _size17; ++_i19) {
          var elem20 = null;
          elem20 = input.readString().value;
          this.setups.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StagingQuery.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('StagingQuery');
  if (this.metaData !== null && this.metaData !== undefined) {
    output.writeFieldBegin('metaData', Thrift.Type.STRUCT, 1);
    this.metaData[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 2);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.startPartition !== null && this.startPartition !== undefined) {
    output.writeFieldBegin('startPartition', Thrift.Type.STRING, 3);
    output.writeString(this.startPartition);
    output.writeFieldEnd();
  }
  if (this.setups !== null && this.setups !== undefined) {
    output.writeFieldBegin('setups', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.setups.length);
    for (var iter21 in this.setups) {
      if (this.setups.hasOwnProperty(iter21)) {
        iter21 = this.setups[iter21];
        output.writeString(iter21);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EventSource = function(args) {
  this.table = null;
  this.topic = null;
  this.query = null;
  this.isCumulative = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    }
    if (args.topic !== undefined && args.topic !== null) {
      this.topic = args.topic;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = new Query(args.query);
    }
    if (args.isCumulative !== undefined && args.isCumulative !== null) {
      this.isCumulative = args.isCumulative;
    }
  }
};
EventSource.prototype = {};
EventSource.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.topic = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new Query();
        this.query[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isCumulative = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventSource.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('EventSource');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.topic !== null && this.topic !== undefined) {
    output.writeFieldBegin('topic', Thrift.Type.STRING, 2);
    output.writeString(this.topic);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 3);
    this.query[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.isCumulative !== null && this.isCumulative !== undefined) {
    output.writeFieldBegin('isCumulative', Thrift.Type.BOOL, 4);
    output.writeBool(this.isCumulative);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EntitySource = function(args) {
  this.snapshotTable = null;
  this.mutationTable = null;
  this.mutationTopic = null;
  this.query = null;
  if (args) {
    if (args.snapshotTable !== undefined && args.snapshotTable !== null) {
      this.snapshotTable = args.snapshotTable;
    }
    if (args.mutationTable !== undefined && args.mutationTable !== null) {
      this.mutationTable = args.mutationTable;
    }
    if (args.mutationTopic !== undefined && args.mutationTopic !== null) {
      this.mutationTopic = args.mutationTopic;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = new Query(args.query);
    }
  }
};
EntitySource.prototype = {};
EntitySource.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.snapshotTable = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mutationTable = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.mutationTopic = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new Query();
        this.query[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntitySource.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('EntitySource');
  if (this.snapshotTable !== null && this.snapshotTable !== undefined) {
    output.writeFieldBegin('snapshotTable', Thrift.Type.STRING, 1);
    output.writeString(this.snapshotTable);
    output.writeFieldEnd();
  }
  if (this.mutationTable !== null && this.mutationTable !== undefined) {
    output.writeFieldBegin('mutationTable', Thrift.Type.STRING, 2);
    output.writeString(this.mutationTable);
    output.writeFieldEnd();
  }
  if (this.mutationTopic !== null && this.mutationTopic !== undefined) {
    output.writeFieldBegin('mutationTopic', Thrift.Type.STRING, 3);
    output.writeString(this.mutationTopic);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 4);
    this.query[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExternalSource = function(args) {
  this.metadata = null;
  this.keySchema = null;
  this.valueSchema = null;
  if (args) {
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new MetaData(args.metadata);
    }
    if (args.keySchema !== undefined && args.keySchema !== null) {
      this.keySchema = new TDataType(args.keySchema);
    }
    if (args.valueSchema !== undefined && args.valueSchema !== null) {
      this.valueSchema = new TDataType(args.valueSchema);
    }
  }
};
ExternalSource.prototype = {};
ExternalSource.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new MetaData();
        this.metadata[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.keySchema = new TDataType();
        this.keySchema[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.valueSchema = new TDataType();
        this.valueSchema[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExternalSource.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('ExternalSource');
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 1);
    this.metadata[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.keySchema !== null && this.keySchema !== undefined) {
    output.writeFieldBegin('keySchema', Thrift.Type.STRUCT, 2);
    this.keySchema[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.valueSchema !== null && this.valueSchema !== undefined) {
    output.writeFieldBegin('valueSchema', Thrift.Type.STRUCT, 3);
    this.valueSchema[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JoinSource = function(args) {
  this.join = null;
  this.query = null;
  if (args) {
    if (args.join !== undefined && args.join !== null) {
      this.join = new Join(args.join);
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = new Query(args.query);
    }
  }
};
JoinSource.prototype = {};
JoinSource.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.join = new Join();
        this.join[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new Query();
        this.query[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JoinSource.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('JoinSource');
  if (this.join !== null && this.join !== undefined) {
    output.writeFieldBegin('join', Thrift.Type.STRUCT, 1);
    this.join[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Source = function(args) {
  this.events = null;
  this.entities = null;
  this.joinSource = null;
  if (args) {
    if (args.events !== undefined && args.events !== null) {
      this.events = new EventSource(args.events);
    }
    if (args.entities !== undefined && args.entities !== null) {
      this.entities = new EntitySource(args.entities);
    }
    if (args.joinSource !== undefined && args.joinSource !== null) {
      this.joinSource = new JoinSource(args.joinSource);
    }
  }
};
Source.prototype = {};
Source.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.events = new EventSource();
        this.events[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.entities = new EntitySource();
        this.entities[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.joinSource = new JoinSource();
        this.joinSource[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Source.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('Source');
  if (this.events !== null && this.events !== undefined) {
    output.writeFieldBegin('events', Thrift.Type.STRUCT, 1);
    this.events[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.entities !== null && this.entities !== undefined) {
    output.writeFieldBegin('entities', Thrift.Type.STRUCT, 2);
    this.entities[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.joinSource !== null && this.joinSource !== undefined) {
    output.writeFieldBegin('joinSource', Thrift.Type.STRUCT, 3);
    this.joinSource[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Aggregation = function(args) {
  this.inputColumn = null;
  this.operation = null;
  this.argMap = null;
  this.windows = null;
  this.buckets = null;
  if (args) {
    if (args.inputColumn !== undefined && args.inputColumn !== null) {
      this.inputColumn = args.inputColumn;
    }
    if (args.operation !== undefined && args.operation !== null) {
      this.operation = args.operation;
    }
    if (args.argMap !== undefined && args.argMap !== null) {
      this.argMap = Thrift.copyMap(args.argMap, [null]);
    }
    if (args.windows !== undefined && args.windows !== null) {
      this.windows = Thrift.copyList(args.windows, [Window]);
    }
    if (args.buckets !== undefined && args.buckets !== null) {
      this.buckets = Thrift.copyList(args.buckets, [null]);
    }
  }
};
Aggregation.prototype = {};
Aggregation.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.inputColumn = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.operation = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.argMap = {};
        var _rtmp323 = input.readMapBegin();
        var _size22 = _rtmp323.size || 0;
        for (var _i24 = 0; _i24 < _size22; ++_i24) {
          if (_i24 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key25 = null;
          var val26 = null;
          key25 = input.readString().value;
          val26 = input.readString().value;
          this.argMap[key25] = val26;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.windows = [];
        var _rtmp328 = input.readListBegin();
        var _size27 = _rtmp328.size || 0;
        for (var _i29 = 0; _i29 < _size27; ++_i29) {
          var elem30 = null;
          elem30 = new Window();
          elem30[Symbol.for("read")](input);
          this.windows.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.buckets = [];
        var _rtmp332 = input.readListBegin();
        var _size31 = _rtmp332.size || 0;
        for (var _i33 = 0; _i33 < _size31; ++_i33) {
          var elem34 = null;
          elem34 = input.readString().value;
          this.buckets.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Aggregation.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('Aggregation');
  if (this.inputColumn !== null && this.inputColumn !== undefined) {
    output.writeFieldBegin('inputColumn', Thrift.Type.STRING, 1);
    output.writeString(this.inputColumn);
    output.writeFieldEnd();
  }
  if (this.operation !== null && this.operation !== undefined) {
    output.writeFieldBegin('operation', Thrift.Type.I32, 2);
    output.writeI32(this.operation);
    output.writeFieldEnd();
  }
  if (this.argMap !== null && this.argMap !== undefined) {
    output.writeFieldBegin('argMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.argMap));
    for (var kiter35 in this.argMap) {
      if (this.argMap.hasOwnProperty(kiter35)) {
        var viter36 = this.argMap[kiter35];
        output.writeString(kiter35);
        output.writeString(viter36);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.windows !== null && this.windows !== undefined) {
    output.writeFieldBegin('windows', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.windows.length);
    for (var iter37 in this.windows) {
      if (this.windows.hasOwnProperty(iter37)) {
        iter37 = this.windows[iter37];
        iter37[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.buckets !== null && this.buckets !== undefined) {
    output.writeFieldBegin('buckets', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.buckets.length);
    for (var iter38 in this.buckets) {
      if (this.buckets.hasOwnProperty(iter38)) {
        iter38 = this.buckets[iter38];
        output.writeString(iter38);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggregationPart = function(args) {
  this.inputColumn = null;
  this.operation = null;
  this.argMap = null;
  this.window = null;
  this.bucket = null;
  if (args) {
    if (args.inputColumn !== undefined && args.inputColumn !== null) {
      this.inputColumn = args.inputColumn;
    }
    if (args.operation !== undefined && args.operation !== null) {
      this.operation = args.operation;
    }
    if (args.argMap !== undefined && args.argMap !== null) {
      this.argMap = Thrift.copyMap(args.argMap, [null]);
    }
    if (args.window !== undefined && args.window !== null) {
      this.window = new Window(args.window);
    }
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    }
  }
};
AggregationPart.prototype = {};
AggregationPart.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.inputColumn = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.operation = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.argMap = {};
        var _rtmp340 = input.readMapBegin();
        var _size39 = _rtmp340.size || 0;
        for (var _i41 = 0; _i41 < _size39; ++_i41) {
          if (_i41 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key42 = null;
          var val43 = null;
          key42 = input.readString().value;
          val43 = input.readString().value;
          this.argMap[key42] = val43;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.window = new Window();
        this.window[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.bucket = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggregationPart.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('AggregationPart');
  if (this.inputColumn !== null && this.inputColumn !== undefined) {
    output.writeFieldBegin('inputColumn', Thrift.Type.STRING, 1);
    output.writeString(this.inputColumn);
    output.writeFieldEnd();
  }
  if (this.operation !== null && this.operation !== undefined) {
    output.writeFieldBegin('operation', Thrift.Type.I32, 2);
    output.writeI32(this.operation);
    output.writeFieldEnd();
  }
  if (this.argMap !== null && this.argMap !== undefined) {
    output.writeFieldBegin('argMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.argMap));
    for (var kiter44 in this.argMap) {
      if (this.argMap.hasOwnProperty(kiter44)) {
        var viter45 = this.argMap[kiter44];
        output.writeString(kiter44);
        output.writeString(viter45);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.window !== null && this.window !== undefined) {
    output.writeFieldBegin('window', Thrift.Type.STRUCT, 4);
    this.window[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.STRING, 5);
    output.writeString(this.bucket);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetaData = function(args) {
  this.name = null;
  this.online = null;
  this.production = null;
  this.customJson = null;
  this.dependencies = null;
  this.tableProperties = null;
  this.outputNamespace = null;
  this.team = null;
  this.modeToEnvMap = null;
  this.consistencyCheck = null;
  this.samplePercent = null;
  this.offlineSchedule = null;
  this.consistencySamplePercent = null;
  this.historicalBackfill = null;
  this.driftSpec = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.online !== undefined && args.online !== null) {
      this.online = args.online;
    }
    if (args.production !== undefined && args.production !== null) {
      this.production = args.production;
    }
    if (args.customJson !== undefined && args.customJson !== null) {
      this.customJson = args.customJson;
    }
    if (args.dependencies !== undefined && args.dependencies !== null) {
      this.dependencies = Thrift.copyList(args.dependencies, [null]);
    }
    if (args.tableProperties !== undefined && args.tableProperties !== null) {
      this.tableProperties = Thrift.copyMap(args.tableProperties, [null]);
    }
    if (args.outputNamespace !== undefined && args.outputNamespace !== null) {
      this.outputNamespace = args.outputNamespace;
    }
    if (args.team !== undefined && args.team !== null) {
      this.team = args.team;
    }
    if (args.modeToEnvMap !== undefined && args.modeToEnvMap !== null) {
      this.modeToEnvMap = Thrift.copyMap(args.modeToEnvMap, [Thrift.copyMap, null]);
    }
    if (args.consistencyCheck !== undefined && args.consistencyCheck !== null) {
      this.consistencyCheck = args.consistencyCheck;
    }
    if (args.samplePercent !== undefined && args.samplePercent !== null) {
      this.samplePercent = args.samplePercent;
    }
    if (args.offlineSchedule !== undefined && args.offlineSchedule !== null) {
      this.offlineSchedule = args.offlineSchedule;
    }
    if (args.consistencySamplePercent !== undefined && args.consistencySamplePercent !== null) {
      this.consistencySamplePercent = args.consistencySamplePercent;
    }
    if (args.historicalBackfill !== undefined && args.historicalBackfill !== null) {
      this.historicalBackfill = args.historicalBackfill;
    }
    if (args.driftSpec !== undefined && args.driftSpec !== null) {
      this.driftSpec = new DriftSpec(args.driftSpec);
    }
  }
};
MetaData.prototype = {};
MetaData.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.online = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.production = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.customJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.dependencies = [];
        var _rtmp347 = input.readListBegin();
        var _size46 = _rtmp347.size || 0;
        for (var _i48 = 0; _i48 < _size46; ++_i48) {
          var elem49 = null;
          elem49 = input.readString().value;
          this.dependencies.push(elem49);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        this.tableProperties = {};
        var _rtmp351 = input.readMapBegin();
        var _size50 = _rtmp351.size || 0;
        for (var _i52 = 0; _i52 < _size50; ++_i52) {
          if (_i52 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key53 = null;
          var val54 = null;
          key53 = input.readString().value;
          val54 = input.readString().value;
          this.tableProperties[key53] = val54;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.outputNamespace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.team = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        this.modeToEnvMap = {};
        var _rtmp356 = input.readMapBegin();
        var _size55 = _rtmp356.size || 0;
        for (var _i57 = 0; _i57 < _size55; ++_i57) {
          if (_i57 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key58 = null;
          var val59 = null;
          key58 = input.readString().value;
          val59 = {};
          var _rtmp361 = input.readMapBegin();
          var _size60 = _rtmp361.size || 0;
          for (var _i62 = 0; _i62 < _size60; ++_i62) {
            if (_i62 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key63 = null;
            var val64 = null;
            key63 = input.readString().value;
            val64 = input.readString().value;
            val59[key63] = val64;
          }
          input.readMapEnd();
          this.modeToEnvMap[key58] = val59;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.consistencyCheck = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.samplePercent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.offlineSchedule = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.DOUBLE) {
        this.consistencySamplePercent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.historicalBackfill = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.driftSpec = new DriftSpec();
        this.driftSpec[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaData.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('MetaData');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.online !== null && this.online !== undefined) {
    output.writeFieldBegin('online', Thrift.Type.BOOL, 2);
    output.writeBool(this.online);
    output.writeFieldEnd();
  }
  if (this.production !== null && this.production !== undefined) {
    output.writeFieldBegin('production', Thrift.Type.BOOL, 3);
    output.writeBool(this.production);
    output.writeFieldEnd();
  }
  if (this.customJson !== null && this.customJson !== undefined) {
    output.writeFieldBegin('customJson', Thrift.Type.STRING, 4);
    output.writeString(this.customJson);
    output.writeFieldEnd();
  }
  if (this.dependencies !== null && this.dependencies !== undefined) {
    output.writeFieldBegin('dependencies', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.dependencies.length);
    for (var iter65 in this.dependencies) {
      if (this.dependencies.hasOwnProperty(iter65)) {
        iter65 = this.dependencies[iter65];
        output.writeString(iter65);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tableProperties !== null && this.tableProperties !== undefined) {
    output.writeFieldBegin('tableProperties', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.tableProperties));
    for (var kiter66 in this.tableProperties) {
      if (this.tableProperties.hasOwnProperty(kiter66)) {
        var viter67 = this.tableProperties[kiter66];
        output.writeString(kiter66);
        output.writeString(viter67);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.outputNamespace !== null && this.outputNamespace !== undefined) {
    output.writeFieldBegin('outputNamespace', Thrift.Type.STRING, 7);
    output.writeString(this.outputNamespace);
    output.writeFieldEnd();
  }
  if (this.team !== null && this.team !== undefined) {
    output.writeFieldBegin('team', Thrift.Type.STRING, 8);
    output.writeString(this.team);
    output.writeFieldEnd();
  }
  if (this.modeToEnvMap !== null && this.modeToEnvMap !== undefined) {
    output.writeFieldBegin('modeToEnvMap', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.modeToEnvMap));
    for (var kiter68 in this.modeToEnvMap) {
      if (this.modeToEnvMap.hasOwnProperty(kiter68)) {
        var viter69 = this.modeToEnvMap[kiter68];
        output.writeString(kiter68);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(viter69));
        for (var kiter70 in viter69) {
          if (viter69.hasOwnProperty(kiter70)) {
            var viter71 = viter69[kiter70];
            output.writeString(kiter70);
            output.writeString(viter71);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.consistencyCheck !== null && this.consistencyCheck !== undefined) {
    output.writeFieldBegin('consistencyCheck', Thrift.Type.BOOL, 10);
    output.writeBool(this.consistencyCheck);
    output.writeFieldEnd();
  }
  if (this.samplePercent !== null && this.samplePercent !== undefined) {
    output.writeFieldBegin('samplePercent', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.samplePercent);
    output.writeFieldEnd();
  }
  if (this.offlineSchedule !== null && this.offlineSchedule !== undefined) {
    output.writeFieldBegin('offlineSchedule', Thrift.Type.STRING, 12);
    output.writeString(this.offlineSchedule);
    output.writeFieldEnd();
  }
  if (this.consistencySamplePercent !== null && this.consistencySamplePercent !== undefined) {
    output.writeFieldBegin('consistencySamplePercent', Thrift.Type.DOUBLE, 13);
    output.writeDouble(this.consistencySamplePercent);
    output.writeFieldEnd();
  }
  if (this.historicalBackfill !== null && this.historicalBackfill !== undefined) {
    output.writeFieldBegin('historicalBackfill', Thrift.Type.BOOL, 14);
    output.writeBool(this.historicalBackfill);
    output.writeFieldEnd();
  }
  if (this.driftSpec !== null && this.driftSpec !== undefined) {
    output.writeFieldBegin('driftSpec', Thrift.Type.STRUCT, 15);
    this.driftSpec[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GroupBy = function(args) {
  this.metaData = null;
  this.sources = null;
  this.keyColumns = null;
  this.aggregations = null;
  this.accuracy = null;
  this.backfillStartDate = null;
  this.derivations = null;
  if (args) {
    if (args.metaData !== undefined && args.metaData !== null) {
      this.metaData = new MetaData(args.metaData);
    }
    if (args.sources !== undefined && args.sources !== null) {
      this.sources = Thrift.copyList(args.sources, [Source]);
    }
    if (args.keyColumns !== undefined && args.keyColumns !== null) {
      this.keyColumns = Thrift.copyList(args.keyColumns, [null]);
    }
    if (args.aggregations !== undefined && args.aggregations !== null) {
      this.aggregations = Thrift.copyList(args.aggregations, [Aggregation]);
    }
    if (args.accuracy !== undefined && args.accuracy !== null) {
      this.accuracy = args.accuracy;
    }
    if (args.backfillStartDate !== undefined && args.backfillStartDate !== null) {
      this.backfillStartDate = args.backfillStartDate;
    }
    if (args.derivations !== undefined && args.derivations !== null) {
      this.derivations = Thrift.copyList(args.derivations, [null]);
    }
  }
};
GroupBy.prototype = {};
GroupBy.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.metaData = new MetaData();
        this.metaData[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.sources = [];
        var _rtmp373 = input.readListBegin();
        var _size72 = _rtmp373.size || 0;
        for (var _i74 = 0; _i74 < _size72; ++_i74) {
          var elem75 = null;
          elem75 = new Source();
          elem75[Symbol.for("read")](input);
          this.sources.push(elem75);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.keyColumns = [];
        var _rtmp377 = input.readListBegin();
        var _size76 = _rtmp377.size || 0;
        for (var _i78 = 0; _i78 < _size76; ++_i78) {
          var elem79 = null;
          elem79 = input.readString().value;
          this.keyColumns.push(elem79);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.aggregations = [];
        var _rtmp381 = input.readListBegin();
        var _size80 = _rtmp381.size || 0;
        for (var _i82 = 0; _i82 < _size80; ++_i82) {
          var elem83 = null;
          elem83 = new Aggregation();
          elem83[Symbol.for("read")](input);
          this.aggregations.push(elem83);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.accuracy = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.backfillStartDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.derivations = [];
        var _rtmp385 = input.readListBegin();
        var _size84 = _rtmp385.size || 0;
        for (var _i86 = 0; _i86 < _size84; ++_i86) {
          var elem87 = null;
          elem87 = new Derivation();
          elem87[Symbol.for("read")](input);
          this.derivations.push(elem87);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupBy.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('GroupBy');
  if (this.metaData !== null && this.metaData !== undefined) {
    output.writeFieldBegin('metaData', Thrift.Type.STRUCT, 1);
    this.metaData[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.sources !== null && this.sources !== undefined) {
    output.writeFieldBegin('sources', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.sources.length);
    for (var iter88 in this.sources) {
      if (this.sources.hasOwnProperty(iter88)) {
        iter88 = this.sources[iter88];
        iter88[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.keyColumns !== null && this.keyColumns !== undefined) {
    output.writeFieldBegin('keyColumns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.keyColumns.length);
    for (var iter89 in this.keyColumns) {
      if (this.keyColumns.hasOwnProperty(iter89)) {
        iter89 = this.keyColumns[iter89];
        output.writeString(iter89);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.aggregations !== null && this.aggregations !== undefined) {
    output.writeFieldBegin('aggregations', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.aggregations.length);
    for (var iter90 in this.aggregations) {
      if (this.aggregations.hasOwnProperty(iter90)) {
        iter90 = this.aggregations[iter90];
        iter90[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.accuracy !== null && this.accuracy !== undefined) {
    output.writeFieldBegin('accuracy', Thrift.Type.I32, 5);
    output.writeI32(this.accuracy);
    output.writeFieldEnd();
  }
  if (this.backfillStartDate !== null && this.backfillStartDate !== undefined) {
    output.writeFieldBegin('backfillStartDate', Thrift.Type.STRING, 6);
    output.writeString(this.backfillStartDate);
    output.writeFieldEnd();
  }
  if (this.derivations !== null && this.derivations !== undefined) {
    output.writeFieldBegin('derivations', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.derivations.length);
    for (var iter91 in this.derivations) {
      if (this.derivations.hasOwnProperty(iter91)) {
        iter91 = this.derivations[iter91];
        iter91[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

JoinPart = function(args) {
  this.groupBy = null;
  this.keyMapping = null;
  this.prefix = null;
  if (args) {
    if (args.groupBy !== undefined && args.groupBy !== null) {
      this.groupBy = new GroupBy(args.groupBy);
    }
    if (args.keyMapping !== undefined && args.keyMapping !== null) {
      this.keyMapping = Thrift.copyMap(args.keyMapping, [null]);
    }
    if (args.prefix !== undefined && args.prefix !== null) {
      this.prefix = args.prefix;
    }
  }
};
JoinPart.prototype = {};
JoinPart.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupBy = new GroupBy();
        this.groupBy[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.keyMapping = {};
        var _rtmp393 = input.readMapBegin();
        var _size92 = _rtmp393.size || 0;
        for (var _i94 = 0; _i94 < _size92; ++_i94) {
          if (_i94 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key95 = null;
          var val96 = null;
          key95 = input.readString().value;
          val96 = input.readString().value;
          this.keyMapping[key95] = val96;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.prefix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

JoinPart.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('JoinPart');
  if (this.groupBy !== null && this.groupBy !== undefined) {
    output.writeFieldBegin('groupBy', Thrift.Type.STRUCT, 1);
    this.groupBy[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.keyMapping !== null && this.keyMapping !== undefined) {
    output.writeFieldBegin('keyMapping', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.keyMapping));
    for (var kiter97 in this.keyMapping) {
      if (this.keyMapping.hasOwnProperty(kiter97)) {
        var viter98 = this.keyMapping[kiter97];
        output.writeString(kiter97);
        output.writeString(viter98);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.prefix !== null && this.prefix !== undefined) {
    output.writeFieldBegin('prefix', Thrift.Type.STRING, 3);
    output.writeString(this.prefix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExternalPart = function(args) {
  this.source = null;
  this.keyMapping = null;
  this.prefix = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = new ExternalSource(args.source);
    }
    if (args.keyMapping !== undefined && args.keyMapping !== null) {
      this.keyMapping = Thrift.copyMap(args.keyMapping, [null]);
    }
    if (args.prefix !== undefined && args.prefix !== null) {
      this.prefix = args.prefix;
    }
  }
};
ExternalPart.prototype = {};
ExternalPart.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.source = new ExternalSource();
        this.source[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.keyMapping = {};
        var _rtmp3100 = input.readMapBegin();
        var _size99 = _rtmp3100.size || 0;
        for (var _i101 = 0; _i101 < _size99; ++_i101) {
          if (_i101 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key102 = null;
          var val103 = null;
          key102 = input.readString().value;
          val103 = input.readString().value;
          this.keyMapping[key102] = val103;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.prefix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExternalPart.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('ExternalPart');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRUCT, 1);
    this.source[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.keyMapping !== null && this.keyMapping !== undefined) {
    output.writeFieldBegin('keyMapping', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.keyMapping));
    for (var kiter104 in this.keyMapping) {
      if (this.keyMapping.hasOwnProperty(kiter104)) {
        var viter105 = this.keyMapping[kiter104];
        output.writeString(kiter104);
        output.writeString(viter105);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.prefix !== null && this.prefix !== undefined) {
    output.writeFieldBegin('prefix', Thrift.Type.STRING, 3);
    output.writeString(this.prefix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Derivation = function(args) {
  this.name = null;
  this.expression = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.expression !== undefined && args.expression !== null) {
      this.expression = args.expression;
    }
  }
};
Derivation.prototype = {};
Derivation.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.expression = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Derivation.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('Derivation');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.expression !== null && this.expression !== undefined) {
    output.writeFieldBegin('expression', Thrift.Type.STRING, 2);
    output.writeString(this.expression);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Join = function(args) {
  this.metaData = null;
  this.left = null;
  this.joinParts = null;
  this.skewKeys = null;
  this.onlineExternalParts = null;
  this.labelParts = null;
  this.bootstrapParts = null;
  this.rowIds = null;
  this.derivations = null;
  if (args) {
    if (args.metaData !== undefined && args.metaData !== null) {
      this.metaData = new MetaData(args.metaData);
    }
    if (args.left !== undefined && args.left !== null) {
      this.left = new Source(args.left);
    }
    if (args.joinParts !== undefined && args.joinParts !== null) {
      this.joinParts = Thrift.copyList(args.joinParts, [JoinPart]);
    }
    if (args.skewKeys !== undefined && args.skewKeys !== null) {
      this.skewKeys = Thrift.copyMap(args.skewKeys, [Thrift.copyList, null]);
    }
    if (args.onlineExternalParts !== undefined && args.onlineExternalParts !== null) {
      this.onlineExternalParts = Thrift.copyList(args.onlineExternalParts, [ExternalPart]);
    }
    if (args.labelParts !== undefined && args.labelParts !== null) {
      this.labelParts = new LabelParts(args.labelParts);
    }
    if (args.bootstrapParts !== undefined && args.bootstrapParts !== null) {
      this.bootstrapParts = Thrift.copyList(args.bootstrapParts, [null]);
    }
    if (args.rowIds !== undefined && args.rowIds !== null) {
      this.rowIds = Thrift.copyList(args.rowIds, [null]);
    }
    if (args.derivations !== undefined && args.derivations !== null) {
      this.derivations = Thrift.copyList(args.derivations, [Derivation]);
    }
  }
};
Join.prototype = {};
Join.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.metaData = new MetaData();
        this.metaData[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.left = new Source();
        this.left[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.joinParts = [];
        var _rtmp3107 = input.readListBegin();
        var _size106 = _rtmp3107.size || 0;
        for (var _i108 = 0; _i108 < _size106; ++_i108) {
          var elem109 = null;
          elem109 = new JoinPart();
          elem109[Symbol.for("read")](input);
          this.joinParts.push(elem109);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.skewKeys = {};
        var _rtmp3111 = input.readMapBegin();
        var _size110 = _rtmp3111.size || 0;
        for (var _i112 = 0; _i112 < _size110; ++_i112) {
          if (_i112 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key113 = null;
          var val114 = null;
          key113 = input.readString().value;
          val114 = [];
          var _rtmp3116 = input.readListBegin();
          var _size115 = _rtmp3116.size || 0;
          for (var _i117 = 0; _i117 < _size115; ++_i117) {
            var elem118 = null;
            elem118 = input.readString().value;
            val114.push(elem118);
          }
          input.readListEnd();
          this.skewKeys[key113] = val114;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.onlineExternalParts = [];
        var _rtmp3120 = input.readListBegin();
        var _size119 = _rtmp3120.size || 0;
        for (var _i121 = 0; _i121 < _size119; ++_i121) {
          var elem122 = null;
          elem122 = new ExternalPart();
          elem122[Symbol.for("read")](input);
          this.onlineExternalParts.push(elem122);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.labelParts = new LabelParts();
        this.labelParts[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.bootstrapParts = [];
        var _rtmp3124 = input.readListBegin();
        var _size123 = _rtmp3124.size || 0;
        for (var _i125 = 0; _i125 < _size123; ++_i125) {
          var elem126 = null;
          elem126 = new BootstrapPart();
          elem126[Symbol.for("read")](input);
          this.bootstrapParts.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        this.rowIds = [];
        var _rtmp3128 = input.readListBegin();
        var _size127 = _rtmp3128.size || 0;
        for (var _i129 = 0; _i129 < _size127; ++_i129) {
          var elem130 = null;
          elem130 = input.readString().value;
          this.rowIds.push(elem130);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        this.derivations = [];
        var _rtmp3132 = input.readListBegin();
        var _size131 = _rtmp3132.size || 0;
        for (var _i133 = 0; _i133 < _size131; ++_i133) {
          var elem134 = null;
          elem134 = new Derivation();
          elem134[Symbol.for("read")](input);
          this.derivations.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Join.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('Join');
  if (this.metaData !== null && this.metaData !== undefined) {
    output.writeFieldBegin('metaData', Thrift.Type.STRUCT, 1);
    this.metaData[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.left !== null && this.left !== undefined) {
    output.writeFieldBegin('left', Thrift.Type.STRUCT, 2);
    this.left[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.joinParts !== null && this.joinParts !== undefined) {
    output.writeFieldBegin('joinParts', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.joinParts.length);
    for (var iter135 in this.joinParts) {
      if (this.joinParts.hasOwnProperty(iter135)) {
        iter135 = this.joinParts[iter135];
        iter135[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.skewKeys !== null && this.skewKeys !== undefined) {
    output.writeFieldBegin('skewKeys', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.skewKeys));
    for (var kiter136 in this.skewKeys) {
      if (this.skewKeys.hasOwnProperty(kiter136)) {
        var viter137 = this.skewKeys[kiter136];
        output.writeString(kiter136);
        output.writeListBegin(Thrift.Type.STRING, viter137.length);
        for (var iter138 in viter137) {
          if (viter137.hasOwnProperty(iter138)) {
            iter138 = viter137[iter138];
            output.writeString(iter138);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.onlineExternalParts !== null && this.onlineExternalParts !== undefined) {
    output.writeFieldBegin('onlineExternalParts', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.onlineExternalParts.length);
    for (var iter139 in this.onlineExternalParts) {
      if (this.onlineExternalParts.hasOwnProperty(iter139)) {
        iter139 = this.onlineExternalParts[iter139];
        iter139[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.labelParts !== null && this.labelParts !== undefined) {
    output.writeFieldBegin('labelParts', Thrift.Type.STRUCT, 6);
    this.labelParts[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.bootstrapParts !== null && this.bootstrapParts !== undefined) {
    output.writeFieldBegin('bootstrapParts', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.bootstrapParts.length);
    for (var iter140 in this.bootstrapParts) {
      if (this.bootstrapParts.hasOwnProperty(iter140)) {
        iter140 = this.bootstrapParts[iter140];
        iter140[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rowIds !== null && this.rowIds !== undefined) {
    output.writeFieldBegin('rowIds', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.rowIds.length);
    for (var iter141 in this.rowIds) {
      if (this.rowIds.hasOwnProperty(iter141)) {
        iter141 = this.rowIds[iter141];
        output.writeString(iter141);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.derivations !== null && this.derivations !== undefined) {
    output.writeFieldBegin('derivations', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.derivations.length);
    for (var iter142 in this.derivations) {
      if (this.derivations.hasOwnProperty(iter142)) {
        iter142 = this.derivations[iter142];
        iter142[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BootstrapPart = function(args) {
  this.metaData = null;
  this.table = null;
  this.query = null;
  this.keyColumns = null;
  if (args) {
    if (args.metaData !== undefined && args.metaData !== null) {
      this.metaData = new MetaData(args.metaData);
    }
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = new Query(args.query);
    }
    if (args.keyColumns !== undefined && args.keyColumns !== null) {
      this.keyColumns = Thrift.copyList(args.keyColumns, [null]);
    }
  }
};
BootstrapPart.prototype = {};
BootstrapPart.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.metaData = new MetaData();
        this.metaData[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new Query();
        this.query[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.keyColumns = [];
        var _rtmp3144 = input.readListBegin();
        var _size143 = _rtmp3144.size || 0;
        for (var _i145 = 0; _i145 < _size143; ++_i145) {
          var elem146 = null;
          elem146 = input.readString().value;
          this.keyColumns.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BootstrapPart.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('BootstrapPart');
  if (this.metaData !== null && this.metaData !== undefined) {
    output.writeFieldBegin('metaData', Thrift.Type.STRUCT, 1);
    this.metaData[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 2);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 3);
    this.query[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.keyColumns !== null && this.keyColumns !== undefined) {
    output.writeFieldBegin('keyColumns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.keyColumns.length);
    for (var iter147 in this.keyColumns) {
      if (this.keyColumns.hasOwnProperty(iter147)) {
        iter147 = this.keyColumns[iter147];
        output.writeString(iter147);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LabelParts = function(args) {
  this.labels = null;
  this.leftStartOffset = null;
  this.leftEndOffset = null;
  this.metaData = null;
  if (args) {
    if (args.labels !== undefined && args.labels !== null) {
      this.labels = Thrift.copyList(args.labels, [JoinPart]);
    }
    if (args.leftStartOffset !== undefined && args.leftStartOffset !== null) {
      this.leftStartOffset = args.leftStartOffset;
    }
    if (args.leftEndOffset !== undefined && args.leftEndOffset !== null) {
      this.leftEndOffset = args.leftEndOffset;
    }
    if (args.metaData !== undefined && args.metaData !== null) {
      this.metaData = new MetaData(args.metaData);
    }
  }
};
LabelParts.prototype = {};
LabelParts.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.labels = [];
        var _rtmp3149 = input.readListBegin();
        var _size148 = _rtmp3149.size || 0;
        for (var _i150 = 0; _i150 < _size148; ++_i150) {
          var elem151 = null;
          elem151 = new JoinPart();
          elem151[Symbol.for("read")](input);
          this.labels.push(elem151);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.leftStartOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.leftEndOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.metaData = new MetaData();
        this.metaData[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LabelParts.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('LabelParts');
  if (this.labels !== null && this.labels !== undefined) {
    output.writeFieldBegin('labels', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.labels.length);
    for (var iter152 in this.labels) {
      if (this.labels.hasOwnProperty(iter152)) {
        iter152 = this.labels[iter152];
        iter152[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.leftStartOffset !== null && this.leftStartOffset !== undefined) {
    output.writeFieldBegin('leftStartOffset', Thrift.Type.I32, 2);
    output.writeI32(this.leftStartOffset);
    output.writeFieldEnd();
  }
  if (this.leftEndOffset !== null && this.leftEndOffset !== undefined) {
    output.writeFieldBegin('leftEndOffset', Thrift.Type.I32, 3);
    output.writeI32(this.leftEndOffset);
    output.writeFieldEnd();
  }
  if (this.metaData !== null && this.metaData !== undefined) {
    output.writeFieldBegin('metaData', Thrift.Type.STRUCT, 4);
    this.metaData[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GroupByServingInfo = function(args) {
  this.groupBy = null;
  this.inputAvroSchema = null;
  this.selectedAvroSchema = null;
  this.keyAvroSchema = null;
  this.batchEndDate = null;
  this.dateFormat = null;
  if (args) {
    if (args.groupBy !== undefined && args.groupBy !== null) {
      this.groupBy = new GroupBy(args.groupBy);
    }
    if (args.inputAvroSchema !== undefined && args.inputAvroSchema !== null) {
      this.inputAvroSchema = args.inputAvroSchema;
    }
    if (args.selectedAvroSchema !== undefined && args.selectedAvroSchema !== null) {
      this.selectedAvroSchema = args.selectedAvroSchema;
    }
    if (args.keyAvroSchema !== undefined && args.keyAvroSchema !== null) {
      this.keyAvroSchema = args.keyAvroSchema;
    }
    if (args.batchEndDate !== undefined && args.batchEndDate !== null) {
      this.batchEndDate = args.batchEndDate;
    }
    if (args.dateFormat !== undefined && args.dateFormat !== null) {
      this.dateFormat = args.dateFormat;
    }
  }
};
GroupByServingInfo.prototype = {};
GroupByServingInfo.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupBy = new GroupBy();
        this.groupBy[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.inputAvroSchema = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.selectedAvroSchema = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.keyAvroSchema = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.batchEndDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.dateFormat = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupByServingInfo.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('GroupByServingInfo');
  if (this.groupBy !== null && this.groupBy !== undefined) {
    output.writeFieldBegin('groupBy', Thrift.Type.STRUCT, 1);
    this.groupBy[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.inputAvroSchema !== null && this.inputAvroSchema !== undefined) {
    output.writeFieldBegin('inputAvroSchema', Thrift.Type.STRING, 2);
    output.writeString(this.inputAvroSchema);
    output.writeFieldEnd();
  }
  if (this.selectedAvroSchema !== null && this.selectedAvroSchema !== undefined) {
    output.writeFieldBegin('selectedAvroSchema', Thrift.Type.STRING, 3);
    output.writeString(this.selectedAvroSchema);
    output.writeFieldEnd();
  }
  if (this.keyAvroSchema !== null && this.keyAvroSchema !== undefined) {
    output.writeFieldBegin('keyAvroSchema', Thrift.Type.STRING, 4);
    output.writeString(this.keyAvroSchema);
    output.writeFieldEnd();
  }
  if (this.batchEndDate !== null && this.batchEndDate !== undefined) {
    output.writeFieldBegin('batchEndDate', Thrift.Type.STRING, 5);
    output.writeString(this.batchEndDate);
    output.writeFieldEnd();
  }
  if (this.dateFormat !== null && this.dateFormat !== undefined) {
    output.writeFieldBegin('dateFormat', Thrift.Type.STRING, 6);
    output.writeString(this.dateFormat);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataField = function(args) {
  this.name = null;
  this.dataType = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.dataType !== undefined && args.dataType !== null) {
      this.dataType = new TDataType(args.dataType);
    }
  }
};
DataField.prototype = {};
DataField.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataType = new TDataType();
        this.dataType[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataField.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('DataField');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.dataType !== null && this.dataType !== undefined) {
    output.writeFieldBegin('dataType', Thrift.Type.STRUCT, 2);
    this.dataType[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDataType = function(args) {
  this.kind = null;
  this.params = null;
  this.name = null;
  if (args) {
    if (args.kind !== undefined && args.kind !== null) {
      this.kind = args.kind;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [DataField]);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
TDataType.prototype = {};
TDataType.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.kind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.params = [];
        var _rtmp3154 = input.readListBegin();
        var _size153 = _rtmp3154.size || 0;
        for (var _i155 = 0; _i155 < _size153; ++_i155) {
          var elem156 = null;
          elem156 = new DataField();
          elem156[Symbol.for("read")](input);
          this.params.push(elem156);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDataType.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('TDataType');
  if (this.kind !== null && this.kind !== undefined) {
    output.writeFieldBegin('kind', Thrift.Type.I32, 1);
    output.writeI32(this.kind);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
    for (var iter157 in this.params) {
      if (this.params.hasOwnProperty(iter157)) {
        iter157 = this.params[iter157];
        iter157[Symbol.for("write")](output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataSpec = function(args) {
  this.schema = null;
  this.partitionColumns = null;
  this.retentionDays = null;
  this.props = null;
  if (args) {
    if (args.schema !== undefined && args.schema !== null) {
      this.schema = new TDataType(args.schema);
    }
    if (args.partitionColumns !== undefined && args.partitionColumns !== null) {
      this.partitionColumns = Thrift.copyList(args.partitionColumns, [null]);
    }
    if (args.retentionDays !== undefined && args.retentionDays !== null) {
      this.retentionDays = args.retentionDays;
    }
    if (args.props !== undefined && args.props !== null) {
      this.props = Thrift.copyMap(args.props, [null]);
    }
  }
};
DataSpec.prototype = {};
DataSpec.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.schema = new TDataType();
        this.schema[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.partitionColumns = [];
        var _rtmp3159 = input.readListBegin();
        var _size158 = _rtmp3159.size || 0;
        for (var _i160 = 0; _i160 < _size158; ++_i160) {
          var elem161 = null;
          elem161 = input.readString().value;
          this.partitionColumns.push(elem161);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.retentionDays = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.props = {};
        var _rtmp3163 = input.readMapBegin();
        var _size162 = _rtmp3163.size || 0;
        for (var _i164 = 0; _i164 < _size162; ++_i164) {
          if (_i164 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key165 = null;
          var val166 = null;
          key165 = input.readString().value;
          val166 = input.readString().value;
          this.props[key165] = val166;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataSpec.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('DataSpec');
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.STRUCT, 1);
    this.schema[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.partitionColumns !== null && this.partitionColumns !== undefined) {
    output.writeFieldBegin('partitionColumns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.partitionColumns.length);
    for (var iter167 in this.partitionColumns) {
      if (this.partitionColumns.hasOwnProperty(iter167)) {
        iter167 = this.partitionColumns[iter167];
        output.writeString(iter167);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.retentionDays !== null && this.retentionDays !== undefined) {
    output.writeFieldBegin('retentionDays', Thrift.Type.I32, 3);
    output.writeI32(this.retentionDays);
    output.writeFieldEnd();
  }
  if (this.props !== null && this.props !== undefined) {
    output.writeFieldBegin('props', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.props));
    for (var kiter168 in this.props) {
      if (this.props.hasOwnProperty(kiter168)) {
        var viter169 = this.props[kiter168];
        output.writeString(kiter168);
        output.writeString(viter169);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Model = function(args) {
  this.metaData = null;
  this.modelType = null;
  this.outputSchema = null;
  this.source = null;
  this.modelParams = null;
  if (args) {
    if (args.metaData !== undefined && args.metaData !== null) {
      this.metaData = new MetaData(args.metaData);
    }
    if (args.modelType !== undefined && args.modelType !== null) {
      this.modelType = args.modelType;
    }
    if (args.outputSchema !== undefined && args.outputSchema !== null) {
      this.outputSchema = new TDataType(args.outputSchema);
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = new Source(args.source);
    }
    if (args.modelParams !== undefined && args.modelParams !== null) {
      this.modelParams = Thrift.copyMap(args.modelParams, [null]);
    }
  }
};
Model.prototype = {};
Model.prototype[Symbol.for("read")] = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.metaData = new MetaData();
        this.metaData[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.modelType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.outputSchema = new TDataType();
        this.outputSchema[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.source = new Source();
        this.source[Symbol.for("read")](input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.modelParams = {};
        var _rtmp3171 = input.readMapBegin();
        var _size170 = _rtmp3171.size || 0;
        for (var _i172 = 0; _i172 < _size170; ++_i172) {
          if (_i172 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key173 = null;
          var val174 = null;
          key173 = input.readString().value;
          val174 = input.readString().value;
          this.modelParams[key173] = val174;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Model.prototype[Symbol.for("write")] = function(output) {
  output.writeStructBegin('Model');
  if (this.metaData !== null && this.metaData !== undefined) {
    output.writeFieldBegin('metaData', Thrift.Type.STRUCT, 1);
    this.metaData[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.modelType !== null && this.modelType !== undefined) {
    output.writeFieldBegin('modelType', Thrift.Type.I32, 2);
    output.writeI32(this.modelType);
    output.writeFieldEnd();
  }
  if (this.outputSchema !== null && this.outputSchema !== undefined) {
    output.writeFieldBegin('outputSchema', Thrift.Type.STRUCT, 3);
    this.outputSchema[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRUCT, 4);
    this.source[Symbol.for("write")](output);
    output.writeFieldEnd();
  }
  if (this.modelParams !== null && this.modelParams !== undefined) {
    output.writeFieldBegin('modelParams', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.modelParams));
    for (var kiter175 in this.modelParams) {
      if (this.modelParams.hasOwnProperty(kiter175)) {
        var viter176 = this.modelParams[kiter175];
        output.writeString(kiter175);
        output.writeString(viter176);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

