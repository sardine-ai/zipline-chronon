/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as TDataType from "./TDataType";
export interface IDataField {
    name?: string;
    dataType?: TDataType.ITDataType;
}
export interface IDataFieldArgs {
    name?: string;
    dataType?: TDataType.ITDataTypeArgs;
}
export const DataFieldCodec: thrift.IStructCodec<IDataFieldArgs, IDataField> = {
    encode(args: IDataFieldArgs, output: thrift.TProtocol): void {
        const obj: any = {
            name: args.name,
            dataType: args.dataType
        };
        output.writeStructBegin("DataField");
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 1);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        if (obj.dataType != null) {
            output.writeFieldBegin("dataType", thrift.TType.STRUCT, 2);
            TDataType.TDataTypeCodec.encode(obj.dataType, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IDataField {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.name = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_2: TDataType.ITDataType = TDataType.TDataTypeCodec.decode(input);
                        _args.dataType = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            name: _args.name,
            dataType: _args.dataType
        };
    }
};
export class DataField extends thrift.StructLike implements IDataField {
    public name?: string;
    public dataType?: TDataType.ITDataType;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IDataFieldArgs = {}) {
        super();
        if (args.name != null) {
            const value_3: string = args.name;
            this.name = value_3;
        }
        if (args.dataType != null) {
            const value_4: TDataType.ITDataType = new TDataType.TDataType(args.dataType);
            this.dataType = value_4;
        }
    }
    public static read(input: thrift.TProtocol): DataField {
        return new DataField(DataFieldCodec.decode(input));
    }
    public static write(args: IDataFieldArgs, output: thrift.TProtocol): void {
        return DataFieldCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return DataFieldCodec.encode(this, output);
    }
}
