/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as DriftSpec from "./DriftSpec";
export interface IMetaData {
    name?: string;
    online?: boolean;
    production?: boolean;
    customJson?: string;
    dependencies?: Array<string>;
    tableProperties?: Map<string, string>;
    outputNamespace?: string;
    team?: string;
    modeToEnvMap?: Map<string, Map<string, string>>;
    consistencyCheck?: boolean;
    samplePercent?: number;
    offlineSchedule?: string;
    consistencySamplePercent?: number;
    historicalBackfill?: boolean;
    driftSpec?: DriftSpec.IDriftSpec;
}
export interface IMetaDataArgs {
    name?: string;
    online?: boolean;
    production?: boolean;
    customJson?: string;
    dependencies?: Array<string>;
    tableProperties?: Map<string, string>;
    outputNamespace?: string;
    team?: string;
    modeToEnvMap?: Map<string, Map<string, string>>;
    consistencyCheck?: boolean;
    samplePercent?: number;
    offlineSchedule?: string;
    consistencySamplePercent?: number;
    historicalBackfill?: boolean;
    driftSpec?: DriftSpec.IDriftSpecArgs;
}
export const MetaDataCodec: thrift.IStructCodec<IMetaDataArgs, IMetaData> = {
    encode(args: IMetaDataArgs, output: thrift.TProtocol): void {
        const obj: any = {
            name: args.name,
            online: args.online,
            production: args.production,
            customJson: args.customJson,
            dependencies: args.dependencies,
            tableProperties: args.tableProperties,
            outputNamespace: args.outputNamespace,
            team: args.team,
            modeToEnvMap: args.modeToEnvMap,
            consistencyCheck: args.consistencyCheck,
            samplePercent: args.samplePercent,
            offlineSchedule: args.offlineSchedule,
            consistencySamplePercent: args.consistencySamplePercent,
            historicalBackfill: args.historicalBackfill,
            driftSpec: args.driftSpec
        };
        output.writeStructBegin("MetaData");
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 1);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        if (obj.online != null) {
            output.writeFieldBegin("online", thrift.TType.BOOL, 2);
            output.writeBool(obj.online);
            output.writeFieldEnd();
        }
        if (obj.production != null) {
            output.writeFieldBegin("production", thrift.TType.BOOL, 3);
            output.writeBool(obj.production);
            output.writeFieldEnd();
        }
        if (obj.customJson != null) {
            output.writeFieldBegin("customJson", thrift.TType.STRING, 4);
            output.writeString(obj.customJson);
            output.writeFieldEnd();
        }
        if (obj.dependencies != null) {
            output.writeFieldBegin("dependencies", thrift.TType.LIST, 5);
            output.writeListBegin(thrift.TType.STRING, obj.dependencies.length);
            obj.dependencies.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.tableProperties != null) {
            output.writeFieldBegin("tableProperties", thrift.TType.MAP, 6);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.STRING, obj.tableProperties.size);
            obj.tableProperties.forEach((value_2: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_2);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (obj.outputNamespace != null) {
            output.writeFieldBegin("outputNamespace", thrift.TType.STRING, 7);
            output.writeString(obj.outputNamespace);
            output.writeFieldEnd();
        }
        if (obj.team != null) {
            output.writeFieldBegin("team", thrift.TType.STRING, 8);
            output.writeString(obj.team);
            output.writeFieldEnd();
        }
        if (obj.modeToEnvMap != null) {
            output.writeFieldBegin("modeToEnvMap", thrift.TType.MAP, 9);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.MAP, obj.modeToEnvMap.size);
            obj.modeToEnvMap.forEach((value_3: Map<string, string>, key_2: string): void => {
                output.writeString(key_2);
                output.writeMapBegin(thrift.TType.STRING, thrift.TType.STRING, value_3.size);
                value_3.forEach((value_4: string, key_3: string): void => {
                    output.writeString(key_3);
                    output.writeString(value_4);
                });
                output.writeMapEnd();
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (obj.consistencyCheck != null) {
            output.writeFieldBegin("consistencyCheck", thrift.TType.BOOL, 10);
            output.writeBool(obj.consistencyCheck);
            output.writeFieldEnd();
        }
        if (obj.samplePercent != null) {
            output.writeFieldBegin("samplePercent", thrift.TType.DOUBLE, 11);
            output.writeDouble(obj.samplePercent);
            output.writeFieldEnd();
        }
        if (obj.offlineSchedule != null) {
            output.writeFieldBegin("offlineSchedule", thrift.TType.STRING, 12);
            output.writeString(obj.offlineSchedule);
            output.writeFieldEnd();
        }
        if (obj.consistencySamplePercent != null) {
            output.writeFieldBegin("consistencySamplePercent", thrift.TType.DOUBLE, 13);
            output.writeDouble(obj.consistencySamplePercent);
            output.writeFieldEnd();
        }
        if (obj.historicalBackfill != null) {
            output.writeFieldBegin("historicalBackfill", thrift.TType.BOOL, 14);
            output.writeBool(obj.historicalBackfill);
            output.writeFieldEnd();
        }
        if (obj.driftSpec != null) {
            output.writeFieldBegin("driftSpec", thrift.TType.STRUCT, 15);
            DriftSpec.DriftSpecCodec.encode(obj.driftSpec, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IMetaData {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.name = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.online = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.production = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.customJson = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.LIST) {
                        const value_9: Array<string> = new Array<string>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_10: string = input.readString();
                            value_9.push(value_10);
                        }
                        input.readListEnd();
                        _args.dependencies = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.MAP) {
                        const value_11: Map<string, string> = new Map<string, string>();
                        const metadata_2: thrift.IThriftMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_4: string = input.readString();
                            const value_12: string = input.readString();
                            value_11.set(key_4, value_12);
                        }
                        input.readMapEnd();
                        _args.tableProperties = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_13: string = input.readString();
                        _args.outputNamespace = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_14: string = input.readString();
                        _args.team = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.MAP) {
                        const value_15: Map<string, Map<string, string>> = new Map<string, Map<string, string>>();
                        const metadata_3: thrift.IThriftMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_5: string = input.readString();
                            const value_16: Map<string, string> = new Map<string, string>();
                            const metadata_4: thrift.IThriftMap = input.readMapBegin();
                            const size_4: number = metadata_4.size;
                            for (let i_4: number = 0; i_4 < size_4; i_4++) {
                                const key_6: string = input.readString();
                                const value_17: string = input.readString();
                                value_16.set(key_6, value_17);
                            }
                            input.readMapEnd();
                            value_15.set(key_5, value_16);
                        }
                        input.readMapEnd();
                        _args.modeToEnvMap = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_18: boolean = input.readBool();
                        _args.consistencyCheck = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.DOUBLE) {
                        const value_19: number = input.readDouble();
                        _args.samplePercent = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRING) {
                        const value_20: string = input.readString();
                        _args.offlineSchedule = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.DOUBLE) {
                        const value_21: number = input.readDouble();
                        _args.consistencySamplePercent = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_22: boolean = input.readBool();
                        _args.historicalBackfill = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_23: DriftSpec.IDriftSpec = DriftSpec.DriftSpecCodec.decode(input);
                        _args.driftSpec = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            name: _args.name,
            online: _args.online,
            production: _args.production,
            customJson: _args.customJson,
            dependencies: _args.dependencies,
            tableProperties: _args.tableProperties,
            outputNamespace: _args.outputNamespace,
            team: _args.team,
            modeToEnvMap: _args.modeToEnvMap,
            consistencyCheck: _args.consistencyCheck,
            samplePercent: _args.samplePercent,
            offlineSchedule: _args.offlineSchedule,
            consistencySamplePercent: _args.consistencySamplePercent,
            historicalBackfill: _args.historicalBackfill,
            driftSpec: _args.driftSpec
        };
    }
};
export class MetaData extends thrift.StructLike implements IMetaData {
    public name?: string;
    public online?: boolean;
    public production?: boolean;
    public customJson?: string;
    public dependencies?: Array<string>;
    public tableProperties?: Map<string, string>;
    public outputNamespace?: string;
    public team?: string;
    public modeToEnvMap?: Map<string, Map<string, string>>;
    public consistencyCheck?: boolean;
    public samplePercent?: number;
    public offlineSchedule?: string;
    public consistencySamplePercent?: number;
    public historicalBackfill?: boolean;
    public driftSpec?: DriftSpec.IDriftSpec;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IMetaDataArgs = {}) {
        super();
        if (args.name != null) {
            const value_24: string = args.name;
            this.name = value_24;
        }
        if (args.online != null) {
            const value_25: boolean = args.online;
            this.online = value_25;
        }
        if (args.production != null) {
            const value_26: boolean = args.production;
            this.production = value_26;
        }
        if (args.customJson != null) {
            const value_27: string = args.customJson;
            this.customJson = value_27;
        }
        if (args.dependencies != null) {
            const value_28: Array<string> = new Array<string>();
            args.dependencies.forEach((value_39: string): void => {
                const value_40: string = value_39;
                value_28.push(value_40);
            });
            this.dependencies = value_28;
        }
        if (args.tableProperties != null) {
            const value_29: Map<string, string> = new Map<string, string>();
            args.tableProperties.forEach((value_41: string, key_7: string): void => {
                const value_42: string = value_41;
                const key_8: string = key_7;
                value_29.set(key_8, value_42);
            });
            this.tableProperties = value_29;
        }
        if (args.outputNamespace != null) {
            const value_30: string = args.outputNamespace;
            this.outputNamespace = value_30;
        }
        if (args.team != null) {
            const value_31: string = args.team;
            this.team = value_31;
        }
        if (args.modeToEnvMap != null) {
            const value_32: Map<string, Map<string, string>> = new Map<string, Map<string, string>>();
            args.modeToEnvMap.forEach((value_43: Map<string, string>, key_9: string): void => {
                const value_44: Map<string, string> = new Map<string, string>();
                value_43.forEach((value_45: string, key_11: string): void => {
                    const value_46: string = value_45;
                    const key_12: string = key_11;
                    value_44.set(key_12, value_46);
                });
                const key_10: string = key_9;
                value_32.set(key_10, value_44);
            });
            this.modeToEnvMap = value_32;
        }
        if (args.consistencyCheck != null) {
            const value_33: boolean = args.consistencyCheck;
            this.consistencyCheck = value_33;
        }
        if (args.samplePercent != null) {
            const value_34: number = args.samplePercent;
            this.samplePercent = value_34;
        }
        if (args.offlineSchedule != null) {
            const value_35: string = args.offlineSchedule;
            this.offlineSchedule = value_35;
        }
        if (args.consistencySamplePercent != null) {
            const value_36: number = args.consistencySamplePercent;
            this.consistencySamplePercent = value_36;
        }
        if (args.historicalBackfill != null) {
            const value_37: boolean = args.historicalBackfill;
            this.historicalBackfill = value_37;
        }
        if (args.driftSpec != null) {
            const value_38: DriftSpec.IDriftSpec = new DriftSpec.DriftSpec(args.driftSpec);
            this.driftSpec = value_38;
        }
    }
    public static read(input: thrift.TProtocol): MetaData {
        return new MetaData(MetaDataCodec.decode(input));
    }
    public static write(args: IMetaDataArgs, output: thrift.TProtocol): void {
        return MetaDataCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return MetaDataCodec.encode(this, output);
    }
}
