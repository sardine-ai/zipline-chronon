/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as TileSeriesKey from "./TileSeriesKey";
export interface ITileSummarySeries {
    percentiles?: Array<Array<number>>;
    histogram?: Map<string, Array<thrift.Int64>>;
    count?: Array<thrift.Int64>;
    nullCount?: Array<thrift.Int64>;
    innerCount?: Array<thrift.Int64>;
    innerNullCount?: Array<thrift.Int64>;
    lengthPercentiles?: Array<Array<number>>;
    stringLengthPercentiles?: Array<Array<number>>;
    timestamps?: Array<thrift.Int64>;
    key?: TileSeriesKey.ITileSeriesKey;
}
export interface ITileSummarySeriesArgs {
    percentiles?: Array<Array<number>>;
    histogram?: Map<string, Array<number | string | thrift.Int64>>;
    count?: Array<number | string | thrift.Int64>;
    nullCount?: Array<number | string | thrift.Int64>;
    innerCount?: Array<number | string | thrift.Int64>;
    innerNullCount?: Array<number | string | thrift.Int64>;
    lengthPercentiles?: Array<Array<number>>;
    stringLengthPercentiles?: Array<Array<number>>;
    timestamps?: Array<number | string | thrift.Int64>;
    key?: TileSeriesKey.ITileSeriesKeyArgs;
}
export const TileSummarySeriesCodec: thrift.IStructCodec<ITileSummarySeriesArgs, ITileSummarySeries> = {
    encode(args: ITileSummarySeriesArgs, output: thrift.TProtocol): void {
        const obj: any = {
            percentiles: args.percentiles,
            histogram: args.histogram,
            count: args.count,
            nullCount: args.nullCount,
            innerCount: args.innerCount,
            innerNullCount: args.innerNullCount,
            lengthPercentiles: args.lengthPercentiles,
            stringLengthPercentiles: args.stringLengthPercentiles,
            timestamps: args.timestamps,
            key: args.key
        };
        output.writeStructBegin("TileSummarySeries");
        if (obj.percentiles != null) {
            output.writeFieldBegin("percentiles", thrift.TType.LIST, 1);
            output.writeListBegin(thrift.TType.LIST, obj.percentiles.length);
            obj.percentiles.forEach((value_1: Array<number>): void => {
                output.writeListBegin(thrift.TType.DOUBLE, value_1.length);
                value_1.forEach((value_2: number): void => {
                    output.writeDouble(value_2);
                });
                output.writeListEnd();
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.histogram != null) {
            output.writeFieldBegin("histogram", thrift.TType.MAP, 2);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.LIST, obj.histogram.size);
            obj.histogram.forEach((value_3: Array<number | string | thrift.Int64>, key_1: string): void => {
                output.writeString(key_1);
                output.writeListBegin(thrift.TType.I64, value_3.length);
                value_3.forEach((value_4: number | string | thrift.Int64): void => {
                    output.writeI64((typeof value_4 === "number" ? new thrift.Int64(value_4) : typeof value_4 === "string" ? thrift.Int64.fromDecimalString(value_4) : value_4));
                });
                output.writeListEnd();
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (obj.count != null) {
            output.writeFieldBegin("count", thrift.TType.LIST, 3);
            output.writeListBegin(thrift.TType.I64, obj.count.length);
            obj.count.forEach((value_5: number | string | thrift.Int64): void => {
                output.writeI64((typeof value_5 === "number" ? new thrift.Int64(value_5) : typeof value_5 === "string" ? thrift.Int64.fromDecimalString(value_5) : value_5));
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.nullCount != null) {
            output.writeFieldBegin("nullCount", thrift.TType.LIST, 4);
            output.writeListBegin(thrift.TType.I64, obj.nullCount.length);
            obj.nullCount.forEach((value_6: number | string | thrift.Int64): void => {
                output.writeI64((typeof value_6 === "number" ? new thrift.Int64(value_6) : typeof value_6 === "string" ? thrift.Int64.fromDecimalString(value_6) : value_6));
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.innerCount != null) {
            output.writeFieldBegin("innerCount", thrift.TType.LIST, 5);
            output.writeListBegin(thrift.TType.I64, obj.innerCount.length);
            obj.innerCount.forEach((value_7: number | string | thrift.Int64): void => {
                output.writeI64((typeof value_7 === "number" ? new thrift.Int64(value_7) : typeof value_7 === "string" ? thrift.Int64.fromDecimalString(value_7) : value_7));
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.innerNullCount != null) {
            output.writeFieldBegin("innerNullCount", thrift.TType.LIST, 6);
            output.writeListBegin(thrift.TType.I64, obj.innerNullCount.length);
            obj.innerNullCount.forEach((value_8: number | string | thrift.Int64): void => {
                output.writeI64((typeof value_8 === "number" ? new thrift.Int64(value_8) : typeof value_8 === "string" ? thrift.Int64.fromDecimalString(value_8) : value_8));
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.lengthPercentiles != null) {
            output.writeFieldBegin("lengthPercentiles", thrift.TType.LIST, 7);
            output.writeListBegin(thrift.TType.LIST, obj.lengthPercentiles.length);
            obj.lengthPercentiles.forEach((value_9: Array<number>): void => {
                output.writeListBegin(thrift.TType.I32, value_9.length);
                value_9.forEach((value_10: number): void => {
                    output.writeI32(value_10);
                });
                output.writeListEnd();
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.stringLengthPercentiles != null) {
            output.writeFieldBegin("stringLengthPercentiles", thrift.TType.LIST, 8);
            output.writeListBegin(thrift.TType.LIST, obj.stringLengthPercentiles.length);
            obj.stringLengthPercentiles.forEach((value_11: Array<number>): void => {
                output.writeListBegin(thrift.TType.I32, value_11.length);
                value_11.forEach((value_12: number): void => {
                    output.writeI32(value_12);
                });
                output.writeListEnd();
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.timestamps != null) {
            output.writeFieldBegin("timestamps", thrift.TType.LIST, 200);
            output.writeListBegin(thrift.TType.I64, obj.timestamps.length);
            obj.timestamps.forEach((value_13: number | string | thrift.Int64): void => {
                output.writeI64((typeof value_13 === "number" ? new thrift.Int64(value_13) : typeof value_13 === "string" ? thrift.Int64.fromDecimalString(value_13) : value_13));
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.key != null) {
            output.writeFieldBegin("key", thrift.TType.STRUCT, 300);
            TileSeriesKey.TileSeriesKeyCodec.encode(obj.key, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ITileSummarySeries {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.LIST) {
                        const value_14: Array<Array<number>> = new Array<Array<number>>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_15: Array<number> = new Array<number>();
                            const metadata_2: thrift.IThriftList = input.readListBegin();
                            const size_2: number = metadata_2.size;
                            for (let i_2: number = 0; i_2 < size_2; i_2++) {
                                const value_16: number = input.readDouble();
                                value_15.push(value_16);
                            }
                            input.readListEnd();
                            value_14.push(value_15);
                        }
                        input.readListEnd();
                        _args.percentiles = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.MAP) {
                        const value_17: Map<string, Array<thrift.Int64>> = new Map<string, Array<thrift.Int64>>();
                        const metadata_3: thrift.IThriftMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_2: string = input.readString();
                            const value_18: Array<thrift.Int64> = new Array<thrift.Int64>();
                            const metadata_4: thrift.IThriftList = input.readListBegin();
                            const size_4: number = metadata_4.size;
                            for (let i_4: number = 0; i_4 < size_4; i_4++) {
                                const value_19: thrift.Int64 = input.readI64();
                                value_18.push(value_19);
                            }
                            input.readListEnd();
                            value_17.set(key_2, value_18);
                        }
                        input.readMapEnd();
                        _args.histogram = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.LIST) {
                        const value_20: Array<thrift.Int64> = new Array<thrift.Int64>();
                        const metadata_5: thrift.IThriftList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_21: thrift.Int64 = input.readI64();
                            value_20.push(value_21);
                        }
                        input.readListEnd();
                        _args.count = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.LIST) {
                        const value_22: Array<thrift.Int64> = new Array<thrift.Int64>();
                        const metadata_6: thrift.IThriftList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_23: thrift.Int64 = input.readI64();
                            value_22.push(value_23);
                        }
                        input.readListEnd();
                        _args.nullCount = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.LIST) {
                        const value_24: Array<thrift.Int64> = new Array<thrift.Int64>();
                        const metadata_7: thrift.IThriftList = input.readListBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const value_25: thrift.Int64 = input.readI64();
                            value_24.push(value_25);
                        }
                        input.readListEnd();
                        _args.innerCount = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.LIST) {
                        const value_26: Array<thrift.Int64> = new Array<thrift.Int64>();
                        const metadata_8: thrift.IThriftList = input.readListBegin();
                        const size_8: number = metadata_8.size;
                        for (let i_8: number = 0; i_8 < size_8; i_8++) {
                            const value_27: thrift.Int64 = input.readI64();
                            value_26.push(value_27);
                        }
                        input.readListEnd();
                        _args.innerNullCount = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.LIST) {
                        const value_28: Array<Array<number>> = new Array<Array<number>>();
                        const metadata_9: thrift.IThriftList = input.readListBegin();
                        const size_9: number = metadata_9.size;
                        for (let i_9: number = 0; i_9 < size_9; i_9++) {
                            const value_29: Array<number> = new Array<number>();
                            const metadata_10: thrift.IThriftList = input.readListBegin();
                            const size_10: number = metadata_10.size;
                            for (let i_10: number = 0; i_10 < size_10; i_10++) {
                                const value_30: number = input.readI32();
                                value_29.push(value_30);
                            }
                            input.readListEnd();
                            value_28.push(value_29);
                        }
                        input.readListEnd();
                        _args.lengthPercentiles = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.LIST) {
                        const value_31: Array<Array<number>> = new Array<Array<number>>();
                        const metadata_11: thrift.IThriftList = input.readListBegin();
                        const size_11: number = metadata_11.size;
                        for (let i_11: number = 0; i_11 < size_11; i_11++) {
                            const value_32: Array<number> = new Array<number>();
                            const metadata_12: thrift.IThriftList = input.readListBegin();
                            const size_12: number = metadata_12.size;
                            for (let i_12: number = 0; i_12 < size_12; i_12++) {
                                const value_33: number = input.readI32();
                                value_32.push(value_33);
                            }
                            input.readListEnd();
                            value_31.push(value_32);
                        }
                        input.readListEnd();
                        _args.stringLengthPercentiles = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 200:
                    if (fieldType === thrift.TType.LIST) {
                        const value_34: Array<thrift.Int64> = new Array<thrift.Int64>();
                        const metadata_13: thrift.IThriftList = input.readListBegin();
                        const size_13: number = metadata_13.size;
                        for (let i_13: number = 0; i_13 < size_13; i_13++) {
                            const value_35: thrift.Int64 = input.readI64();
                            value_34.push(value_35);
                        }
                        input.readListEnd();
                        _args.timestamps = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 300:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_36: TileSeriesKey.ITileSeriesKey = TileSeriesKey.TileSeriesKeyCodec.decode(input);
                        _args.key = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            percentiles: _args.percentiles,
            histogram: _args.histogram,
            count: _args.count,
            nullCount: _args.nullCount,
            innerCount: _args.innerCount,
            innerNullCount: _args.innerNullCount,
            lengthPercentiles: _args.lengthPercentiles,
            stringLengthPercentiles: _args.stringLengthPercentiles,
            timestamps: _args.timestamps,
            key: _args.key
        };
    }
};
export class TileSummarySeries extends thrift.StructLike implements ITileSummarySeries {
    public percentiles?: Array<Array<number>>;
    public histogram?: Map<string, Array<thrift.Int64>>;
    public count?: Array<thrift.Int64>;
    public nullCount?: Array<thrift.Int64>;
    public innerCount?: Array<thrift.Int64>;
    public innerNullCount?: Array<thrift.Int64>;
    public lengthPercentiles?: Array<Array<number>>;
    public stringLengthPercentiles?: Array<Array<number>>;
    public timestamps?: Array<thrift.Int64>;
    public key?: TileSeriesKey.ITileSeriesKey;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ITileSummarySeriesArgs = {}) {
        super();
        if (args.percentiles != null) {
            const value_37: Array<Array<number>> = new Array<Array<number>>();
            args.percentiles.forEach((value_47: Array<number>): void => {
                const value_48: Array<number> = new Array<number>();
                value_47.forEach((value_49: number): void => {
                    const value_50: number = value_49;
                    value_48.push(value_50);
                });
                value_37.push(value_48);
            });
            this.percentiles = value_37;
        }
        if (args.histogram != null) {
            const value_38: Map<string, Array<thrift.Int64>> = new Map<string, Array<thrift.Int64>>();
            args.histogram.forEach((value_51: Array<number | string | thrift.Int64>, key_3: string): void => {
                const value_52: Array<thrift.Int64> = new Array<thrift.Int64>();
                value_51.forEach((value_53: number | string | thrift.Int64): void => {
                    const value_54: thrift.Int64 = (typeof value_53 === "number" ? new thrift.Int64(value_53) : typeof value_53 === "string" ? thrift.Int64.fromDecimalString(value_53) : value_53);
                    value_52.push(value_54);
                });
                const key_4: string = key_3;
                value_38.set(key_4, value_52);
            });
            this.histogram = value_38;
        }
        if (args.count != null) {
            const value_39: Array<thrift.Int64> = new Array<thrift.Int64>();
            args.count.forEach((value_55: number | string | thrift.Int64): void => {
                const value_56: thrift.Int64 = (typeof value_55 === "number" ? new thrift.Int64(value_55) : typeof value_55 === "string" ? thrift.Int64.fromDecimalString(value_55) : value_55);
                value_39.push(value_56);
            });
            this.count = value_39;
        }
        if (args.nullCount != null) {
            const value_40: Array<thrift.Int64> = new Array<thrift.Int64>();
            args.nullCount.forEach((value_57: number | string | thrift.Int64): void => {
                const value_58: thrift.Int64 = (typeof value_57 === "number" ? new thrift.Int64(value_57) : typeof value_57 === "string" ? thrift.Int64.fromDecimalString(value_57) : value_57);
                value_40.push(value_58);
            });
            this.nullCount = value_40;
        }
        if (args.innerCount != null) {
            const value_41: Array<thrift.Int64> = new Array<thrift.Int64>();
            args.innerCount.forEach((value_59: number | string | thrift.Int64): void => {
                const value_60: thrift.Int64 = (typeof value_59 === "number" ? new thrift.Int64(value_59) : typeof value_59 === "string" ? thrift.Int64.fromDecimalString(value_59) : value_59);
                value_41.push(value_60);
            });
            this.innerCount = value_41;
        }
        if (args.innerNullCount != null) {
            const value_42: Array<thrift.Int64> = new Array<thrift.Int64>();
            args.innerNullCount.forEach((value_61: number | string | thrift.Int64): void => {
                const value_62: thrift.Int64 = (typeof value_61 === "number" ? new thrift.Int64(value_61) : typeof value_61 === "string" ? thrift.Int64.fromDecimalString(value_61) : value_61);
                value_42.push(value_62);
            });
            this.innerNullCount = value_42;
        }
        if (args.lengthPercentiles != null) {
            const value_43: Array<Array<number>> = new Array<Array<number>>();
            args.lengthPercentiles.forEach((value_63: Array<number>): void => {
                const value_64: Array<number> = new Array<number>();
                value_63.forEach((value_65: number): void => {
                    const value_66: number = value_65;
                    value_64.push(value_66);
                });
                value_43.push(value_64);
            });
            this.lengthPercentiles = value_43;
        }
        if (args.stringLengthPercentiles != null) {
            const value_44: Array<Array<number>> = new Array<Array<number>>();
            args.stringLengthPercentiles.forEach((value_67: Array<number>): void => {
                const value_68: Array<number> = new Array<number>();
                value_67.forEach((value_69: number): void => {
                    const value_70: number = value_69;
                    value_68.push(value_70);
                });
                value_44.push(value_68);
            });
            this.stringLengthPercentiles = value_44;
        }
        if (args.timestamps != null) {
            const value_45: Array<thrift.Int64> = new Array<thrift.Int64>();
            args.timestamps.forEach((value_71: number | string | thrift.Int64): void => {
                const value_72: thrift.Int64 = (typeof value_71 === "number" ? new thrift.Int64(value_71) : typeof value_71 === "string" ? thrift.Int64.fromDecimalString(value_71) : value_71);
                value_45.push(value_72);
            });
            this.timestamps = value_45;
        }
        if (args.key != null) {
            const value_46: TileSeriesKey.ITileSeriesKey = new TileSeriesKey.TileSeriesKey(args.key);
            this.key = value_46;
        }
    }
    public static read(input: thrift.TProtocol): TileSummarySeries {
        return new TileSummarySeries(TileSummarySeriesCodec.decode(input));
    }
    public static write(args: ITileSummarySeriesArgs, output: thrift.TProtocol): void {
        return TileSummarySeriesCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return TileSummarySeriesCodec.encode(this, output);
    }
}
