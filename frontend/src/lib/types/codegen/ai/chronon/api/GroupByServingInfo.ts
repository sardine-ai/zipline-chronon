/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as GroupBy from "./GroupBy";
export interface IGroupByServingInfo {
    groupBy?: GroupBy.IGroupBy;
    inputAvroSchema?: string;
    selectedAvroSchema?: string;
    keyAvroSchema?: string;
    batchEndDate?: string;
    dateFormat?: string;
}
export interface IGroupByServingInfoArgs {
    groupBy?: GroupBy.IGroupByArgs;
    inputAvroSchema?: string;
    selectedAvroSchema?: string;
    keyAvroSchema?: string;
    batchEndDate?: string;
    dateFormat?: string;
}
export const GroupByServingInfoCodec: thrift.IStructCodec<IGroupByServingInfoArgs, IGroupByServingInfo> = {
    encode(args: IGroupByServingInfoArgs, output: thrift.TProtocol): void {
        const obj: any = {
            groupBy: args.groupBy,
            inputAvroSchema: args.inputAvroSchema,
            selectedAvroSchema: args.selectedAvroSchema,
            keyAvroSchema: args.keyAvroSchema,
            batchEndDate: args.batchEndDate,
            dateFormat: args.dateFormat
        };
        output.writeStructBegin("GroupByServingInfo");
        if (obj.groupBy != null) {
            output.writeFieldBegin("groupBy", thrift.TType.STRUCT, 1);
            GroupBy.GroupByCodec.encode(obj.groupBy, output);
            output.writeFieldEnd();
        }
        if (obj.inputAvroSchema != null) {
            output.writeFieldBegin("inputAvroSchema", thrift.TType.STRING, 2);
            output.writeString(obj.inputAvroSchema);
            output.writeFieldEnd();
        }
        if (obj.selectedAvroSchema != null) {
            output.writeFieldBegin("selectedAvroSchema", thrift.TType.STRING, 3);
            output.writeString(obj.selectedAvroSchema);
            output.writeFieldEnd();
        }
        if (obj.keyAvroSchema != null) {
            output.writeFieldBegin("keyAvroSchema", thrift.TType.STRING, 4);
            output.writeString(obj.keyAvroSchema);
            output.writeFieldEnd();
        }
        if (obj.batchEndDate != null) {
            output.writeFieldBegin("batchEndDate", thrift.TType.STRING, 5);
            output.writeString(obj.batchEndDate);
            output.writeFieldEnd();
        }
        if (obj.dateFormat != null) {
            output.writeFieldBegin("dateFormat", thrift.TType.STRING, 6);
            output.writeString(obj.dateFormat);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IGroupByServingInfo {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_1: GroupBy.IGroupBy = GroupBy.GroupByCodec.decode(input);
                        _args.groupBy = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.inputAvroSchema = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.selectedAvroSchema = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.keyAvroSchema = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.batchEndDate = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.dateFormat = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            groupBy: _args.groupBy,
            inputAvroSchema: _args.inputAvroSchema,
            selectedAvroSchema: _args.selectedAvroSchema,
            keyAvroSchema: _args.keyAvroSchema,
            batchEndDate: _args.batchEndDate,
            dateFormat: _args.dateFormat
        };
    }
};
export class GroupByServingInfo extends thrift.StructLike implements IGroupByServingInfo {
    public groupBy?: GroupBy.IGroupBy;
    public inputAvroSchema?: string;
    public selectedAvroSchema?: string;
    public keyAvroSchema?: string;
    public batchEndDate?: string;
    public dateFormat?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IGroupByServingInfoArgs = {}) {
        super();
        if (args.groupBy != null) {
            const value_7: GroupBy.IGroupBy = new GroupBy.GroupBy(args.groupBy);
            this.groupBy = value_7;
        }
        if (args.inputAvroSchema != null) {
            const value_8: string = args.inputAvroSchema;
            this.inputAvroSchema = value_8;
        }
        if (args.selectedAvroSchema != null) {
            const value_9: string = args.selectedAvroSchema;
            this.selectedAvroSchema = value_9;
        }
        if (args.keyAvroSchema != null) {
            const value_10: string = args.keyAvroSchema;
            this.keyAvroSchema = value_10;
        }
        if (args.batchEndDate != null) {
            const value_11: string = args.batchEndDate;
            this.batchEndDate = value_11;
        }
        if (args.dateFormat != null) {
            const value_12: string = args.dateFormat;
            this.dateFormat = value_12;
        }
    }
    public static read(input: thrift.TProtocol): GroupByServingInfo {
        return new GroupByServingInfo(GroupByServingInfoCodec.decode(input));
    }
    public static write(args: IGroupByServingInfoArgs, output: thrift.TProtocol): void {
        return GroupByServingInfoCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return GroupByServingInfoCodec.encode(this, output);
    }
}
