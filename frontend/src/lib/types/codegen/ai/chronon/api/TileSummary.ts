/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface ITileSummary {
    percentiles?: Array<number>;
    histogram?: Map<string, thrift.Int64>;
    count?: thrift.Int64;
    nullCount?: thrift.Int64;
    innerCount?: thrift.Int64;
    innerNullCount?: thrift.Int64;
    lengthPercentiles?: Array<number>;
    stringLengthPercentiles?: Array<number>;
}
export interface ITileSummaryArgs {
    percentiles?: Array<number>;
    histogram?: Map<string, number | string | thrift.Int64>;
    count?: number | string | thrift.Int64;
    nullCount?: number | string | thrift.Int64;
    innerCount?: number | string | thrift.Int64;
    innerNullCount?: number | string | thrift.Int64;
    lengthPercentiles?: Array<number>;
    stringLengthPercentiles?: Array<number>;
}
export const TileSummaryCodec: thrift.IStructCodec<ITileSummaryArgs, ITileSummary> = {
    encode(args: ITileSummaryArgs, output: thrift.TProtocol): void {
        const obj: any = {
            percentiles: args.percentiles,
            histogram: args.histogram,
            count: (typeof args.count === "number" ? new thrift.Int64(args.count) : typeof args.count === "string" ? thrift.Int64.fromDecimalString(args.count) : args.count),
            nullCount: (typeof args.nullCount === "number" ? new thrift.Int64(args.nullCount) : typeof args.nullCount === "string" ? thrift.Int64.fromDecimalString(args.nullCount) : args.nullCount),
            innerCount: (typeof args.innerCount === "number" ? new thrift.Int64(args.innerCount) : typeof args.innerCount === "string" ? thrift.Int64.fromDecimalString(args.innerCount) : args.innerCount),
            innerNullCount: (typeof args.innerNullCount === "number" ? new thrift.Int64(args.innerNullCount) : typeof args.innerNullCount === "string" ? thrift.Int64.fromDecimalString(args.innerNullCount) : args.innerNullCount),
            lengthPercentiles: args.lengthPercentiles,
            stringLengthPercentiles: args.stringLengthPercentiles
        };
        output.writeStructBegin("TileSummary");
        if (obj.percentiles != null) {
            output.writeFieldBegin("percentiles", thrift.TType.LIST, 1);
            output.writeListBegin(thrift.TType.DOUBLE, obj.percentiles.length);
            obj.percentiles.forEach((value_1: number): void => {
                output.writeDouble(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.histogram != null) {
            output.writeFieldBegin("histogram", thrift.TType.MAP, 2);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.I64, obj.histogram.size);
            obj.histogram.forEach((value_2: number | string | thrift.Int64, key_1: string): void => {
                output.writeString(key_1);
                output.writeI64((typeof value_2 === "number" ? new thrift.Int64(value_2) : typeof value_2 === "string" ? thrift.Int64.fromDecimalString(value_2) : value_2));
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (obj.count != null) {
            output.writeFieldBegin("count", thrift.TType.I64, 3);
            output.writeI64((typeof obj.count === "number" ? new thrift.Int64(obj.count) : typeof obj.count === "string" ? thrift.Int64.fromDecimalString(obj.count) : obj.count));
            output.writeFieldEnd();
        }
        if (obj.nullCount != null) {
            output.writeFieldBegin("nullCount", thrift.TType.I64, 4);
            output.writeI64((typeof obj.nullCount === "number" ? new thrift.Int64(obj.nullCount) : typeof obj.nullCount === "string" ? thrift.Int64.fromDecimalString(obj.nullCount) : obj.nullCount));
            output.writeFieldEnd();
        }
        if (obj.innerCount != null) {
            output.writeFieldBegin("innerCount", thrift.TType.I64, 5);
            output.writeI64((typeof obj.innerCount === "number" ? new thrift.Int64(obj.innerCount) : typeof obj.innerCount === "string" ? thrift.Int64.fromDecimalString(obj.innerCount) : obj.innerCount));
            output.writeFieldEnd();
        }
        if (obj.innerNullCount != null) {
            output.writeFieldBegin("innerNullCount", thrift.TType.I64, 6);
            output.writeI64((typeof obj.innerNullCount === "number" ? new thrift.Int64(obj.innerNullCount) : typeof obj.innerNullCount === "string" ? thrift.Int64.fromDecimalString(obj.innerNullCount) : obj.innerNullCount));
            output.writeFieldEnd();
        }
        if (obj.lengthPercentiles != null) {
            output.writeFieldBegin("lengthPercentiles", thrift.TType.LIST, 7);
            output.writeListBegin(thrift.TType.I32, obj.lengthPercentiles.length);
            obj.lengthPercentiles.forEach((value_3: number): void => {
                output.writeI32(value_3);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.stringLengthPercentiles != null) {
            output.writeFieldBegin("stringLengthPercentiles", thrift.TType.LIST, 8);
            output.writeListBegin(thrift.TType.I32, obj.stringLengthPercentiles.length);
            obj.stringLengthPercentiles.forEach((value_4: number): void => {
                output.writeI32(value_4);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ITileSummary {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.LIST) {
                        const value_5: Array<number> = new Array<number>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: number = input.readDouble();
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.percentiles = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.MAP) {
                        const value_7: Map<string, thrift.Int64> = new Map<string, thrift.Int64>();
                        const metadata_2: thrift.IThriftMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_2: string = input.readString();
                            const value_8: thrift.Int64 = input.readI64();
                            value_7.set(key_2, value_8);
                        }
                        input.readMapEnd();
                        _args.histogram = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I64) {
                        const value_9: thrift.Int64 = input.readI64();
                        _args.count = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.I64) {
                        const value_10: thrift.Int64 = input.readI64();
                        _args.nullCount = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.I64) {
                        const value_11: thrift.Int64 = input.readI64();
                        _args.innerCount = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.I64) {
                        const value_12: thrift.Int64 = input.readI64();
                        _args.innerNullCount = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.LIST) {
                        const value_13: Array<number> = new Array<number>();
                        const metadata_3: thrift.IThriftList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_14: number = input.readI32();
                            value_13.push(value_14);
                        }
                        input.readListEnd();
                        _args.lengthPercentiles = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.LIST) {
                        const value_15: Array<number> = new Array<number>();
                        const metadata_4: thrift.IThriftList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_16: number = input.readI32();
                            value_15.push(value_16);
                        }
                        input.readListEnd();
                        _args.stringLengthPercentiles = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            percentiles: _args.percentiles,
            histogram: _args.histogram,
            count: _args.count,
            nullCount: _args.nullCount,
            innerCount: _args.innerCount,
            innerNullCount: _args.innerNullCount,
            lengthPercentiles: _args.lengthPercentiles,
            stringLengthPercentiles: _args.stringLengthPercentiles
        };
    }
};
export class TileSummary extends thrift.StructLike implements ITileSummary {
    public percentiles?: Array<number>;
    public histogram?: Map<string, thrift.Int64>;
    public count?: thrift.Int64;
    public nullCount?: thrift.Int64;
    public innerCount?: thrift.Int64;
    public innerNullCount?: thrift.Int64;
    public lengthPercentiles?: Array<number>;
    public stringLengthPercentiles?: Array<number>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ITileSummaryArgs = {}) {
        super();
        if (args.percentiles != null) {
            const value_17: Array<number> = new Array<number>();
            args.percentiles.forEach((value_25: number): void => {
                const value_26: number = value_25;
                value_17.push(value_26);
            });
            this.percentiles = value_17;
        }
        if (args.histogram != null) {
            const value_18: Map<string, thrift.Int64> = new Map<string, thrift.Int64>();
            args.histogram.forEach((value_27: number | string | thrift.Int64, key_3: string): void => {
                const value_28: thrift.Int64 = (typeof value_27 === "number" ? new thrift.Int64(value_27) : typeof value_27 === "string" ? thrift.Int64.fromDecimalString(value_27) : value_27);
                const key_4: string = key_3;
                value_18.set(key_4, value_28);
            });
            this.histogram = value_18;
        }
        if (args.count != null) {
            const value_19: thrift.Int64 = (typeof args.count === "number" ? new thrift.Int64(args.count) : typeof args.count === "string" ? thrift.Int64.fromDecimalString(args.count) : args.count);
            this.count = value_19;
        }
        if (args.nullCount != null) {
            const value_20: thrift.Int64 = (typeof args.nullCount === "number" ? new thrift.Int64(args.nullCount) : typeof args.nullCount === "string" ? thrift.Int64.fromDecimalString(args.nullCount) : args.nullCount);
            this.nullCount = value_20;
        }
        if (args.innerCount != null) {
            const value_21: thrift.Int64 = (typeof args.innerCount === "number" ? new thrift.Int64(args.innerCount) : typeof args.innerCount === "string" ? thrift.Int64.fromDecimalString(args.innerCount) : args.innerCount);
            this.innerCount = value_21;
        }
        if (args.innerNullCount != null) {
            const value_22: thrift.Int64 = (typeof args.innerNullCount === "number" ? new thrift.Int64(args.innerNullCount) : typeof args.innerNullCount === "string" ? thrift.Int64.fromDecimalString(args.innerNullCount) : args.innerNullCount);
            this.innerNullCount = value_22;
        }
        if (args.lengthPercentiles != null) {
            const value_23: Array<number> = new Array<number>();
            args.lengthPercentiles.forEach((value_29: number): void => {
                const value_30: number = value_29;
                value_23.push(value_30);
            });
            this.lengthPercentiles = value_23;
        }
        if (args.stringLengthPercentiles != null) {
            const value_24: Array<number> = new Array<number>();
            args.stringLengthPercentiles.forEach((value_31: number): void => {
                const value_32: number = value_31;
                value_24.push(value_32);
            });
            this.stringLengthPercentiles = value_24;
        }
    }
    public static read(input: thrift.TProtocol): TileSummary {
        return new TileSummary(TileSummaryCodec.decode(input));
    }
    public static write(args: ITileSummaryArgs, output: thrift.TProtocol): void {
        return TileSummaryCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return TileSummaryCodec.encode(this, output);
    }
}
