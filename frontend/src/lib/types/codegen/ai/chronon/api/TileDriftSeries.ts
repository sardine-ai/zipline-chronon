/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as TileSeriesKey from "./TileSeriesKey";
export interface ITileDriftSeries {
    percentileDriftSeries?: Array<number>;
    histogramDriftSeries?: Array<number>;
    countChangePercentSeries?: Array<number>;
    nullRatioChangePercentSeries?: Array<number>;
    innerCountChangePercentSeries?: Array<number>;
    innerNullCountChangePercentSeries?: Array<number>;
    lengthPercentilesDriftSeries?: Array<number>;
    stringLengthPercentilesDriftSeries?: Array<number>;
    timestamps?: Array<thrift.Int64>;
    key?: TileSeriesKey.ITileSeriesKey;
}
export interface ITileDriftSeriesArgs {
    percentileDriftSeries?: Array<number>;
    histogramDriftSeries?: Array<number>;
    countChangePercentSeries?: Array<number>;
    nullRatioChangePercentSeries?: Array<number>;
    innerCountChangePercentSeries?: Array<number>;
    innerNullCountChangePercentSeries?: Array<number>;
    lengthPercentilesDriftSeries?: Array<number>;
    stringLengthPercentilesDriftSeries?: Array<number>;
    timestamps?: Array<number | string | thrift.Int64>;
    key?: TileSeriesKey.ITileSeriesKeyArgs;
}
export const TileDriftSeriesCodec: thrift.IStructCodec<ITileDriftSeriesArgs, ITileDriftSeries> = {
    encode(args: ITileDriftSeriesArgs, output: thrift.TProtocol): void {
        const obj: any = {
            percentileDriftSeries: args.percentileDriftSeries,
            histogramDriftSeries: args.histogramDriftSeries,
            countChangePercentSeries: args.countChangePercentSeries,
            nullRatioChangePercentSeries: args.nullRatioChangePercentSeries,
            innerCountChangePercentSeries: args.innerCountChangePercentSeries,
            innerNullCountChangePercentSeries: args.innerNullCountChangePercentSeries,
            lengthPercentilesDriftSeries: args.lengthPercentilesDriftSeries,
            stringLengthPercentilesDriftSeries: args.stringLengthPercentilesDriftSeries,
            timestamps: args.timestamps,
            key: args.key
        };
        output.writeStructBegin("TileDriftSeries");
        if (obj.percentileDriftSeries != null) {
            output.writeFieldBegin("percentileDriftSeries", thrift.TType.LIST, 1);
            output.writeListBegin(thrift.TType.DOUBLE, obj.percentileDriftSeries.length);
            obj.percentileDriftSeries.forEach((value_1: number): void => {
                output.writeDouble(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.histogramDriftSeries != null) {
            output.writeFieldBegin("histogramDriftSeries", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.DOUBLE, obj.histogramDriftSeries.length);
            obj.histogramDriftSeries.forEach((value_2: number): void => {
                output.writeDouble(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.countChangePercentSeries != null) {
            output.writeFieldBegin("countChangePercentSeries", thrift.TType.LIST, 3);
            output.writeListBegin(thrift.TType.DOUBLE, obj.countChangePercentSeries.length);
            obj.countChangePercentSeries.forEach((value_3: number): void => {
                output.writeDouble(value_3);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.nullRatioChangePercentSeries != null) {
            output.writeFieldBegin("nullRatioChangePercentSeries", thrift.TType.LIST, 4);
            output.writeListBegin(thrift.TType.DOUBLE, obj.nullRatioChangePercentSeries.length);
            obj.nullRatioChangePercentSeries.forEach((value_4: number): void => {
                output.writeDouble(value_4);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.innerCountChangePercentSeries != null) {
            output.writeFieldBegin("innerCountChangePercentSeries", thrift.TType.LIST, 5);
            output.writeListBegin(thrift.TType.DOUBLE, obj.innerCountChangePercentSeries.length);
            obj.innerCountChangePercentSeries.forEach((value_5: number): void => {
                output.writeDouble(value_5);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.innerNullCountChangePercentSeries != null) {
            output.writeFieldBegin("innerNullCountChangePercentSeries", thrift.TType.LIST, 6);
            output.writeListBegin(thrift.TType.DOUBLE, obj.innerNullCountChangePercentSeries.length);
            obj.innerNullCountChangePercentSeries.forEach((value_6: number): void => {
                output.writeDouble(value_6);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.lengthPercentilesDriftSeries != null) {
            output.writeFieldBegin("lengthPercentilesDriftSeries", thrift.TType.LIST, 7);
            output.writeListBegin(thrift.TType.DOUBLE, obj.lengthPercentilesDriftSeries.length);
            obj.lengthPercentilesDriftSeries.forEach((value_7: number): void => {
                output.writeDouble(value_7);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.stringLengthPercentilesDriftSeries != null) {
            output.writeFieldBegin("stringLengthPercentilesDriftSeries", thrift.TType.LIST, 8);
            output.writeListBegin(thrift.TType.DOUBLE, obj.stringLengthPercentilesDriftSeries.length);
            obj.stringLengthPercentilesDriftSeries.forEach((value_8: number): void => {
                output.writeDouble(value_8);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.timestamps != null) {
            output.writeFieldBegin("timestamps", thrift.TType.LIST, 200);
            output.writeListBegin(thrift.TType.I64, obj.timestamps.length);
            obj.timestamps.forEach((value_9: number | string | thrift.Int64): void => {
                output.writeI64((typeof value_9 === "number" ? new thrift.Int64(value_9) : typeof value_9 === "string" ? thrift.Int64.fromDecimalString(value_9) : value_9));
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.key != null) {
            output.writeFieldBegin("key", thrift.TType.STRUCT, 300);
            TileSeriesKey.TileSeriesKeyCodec.encode(obj.key, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ITileDriftSeries {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.LIST) {
                        const value_10: Array<number> = new Array<number>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_11: number = input.readDouble();
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.percentileDriftSeries = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_12: Array<number> = new Array<number>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_13: number = input.readDouble();
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.histogramDriftSeries = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.LIST) {
                        const value_14: Array<number> = new Array<number>();
                        const metadata_3: thrift.IThriftList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_15: number = input.readDouble();
                            value_14.push(value_15);
                        }
                        input.readListEnd();
                        _args.countChangePercentSeries = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.LIST) {
                        const value_16: Array<number> = new Array<number>();
                        const metadata_4: thrift.IThriftList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_17: number = input.readDouble();
                            value_16.push(value_17);
                        }
                        input.readListEnd();
                        _args.nullRatioChangePercentSeries = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.LIST) {
                        const value_18: Array<number> = new Array<number>();
                        const metadata_5: thrift.IThriftList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_19: number = input.readDouble();
                            value_18.push(value_19);
                        }
                        input.readListEnd();
                        _args.innerCountChangePercentSeries = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.LIST) {
                        const value_20: Array<number> = new Array<number>();
                        const metadata_6: thrift.IThriftList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_21: number = input.readDouble();
                            value_20.push(value_21);
                        }
                        input.readListEnd();
                        _args.innerNullCountChangePercentSeries = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.LIST) {
                        const value_22: Array<number> = new Array<number>();
                        const metadata_7: thrift.IThriftList = input.readListBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const value_23: number = input.readDouble();
                            value_22.push(value_23);
                        }
                        input.readListEnd();
                        _args.lengthPercentilesDriftSeries = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.LIST) {
                        const value_24: Array<number> = new Array<number>();
                        const metadata_8: thrift.IThriftList = input.readListBegin();
                        const size_8: number = metadata_8.size;
                        for (let i_8: number = 0; i_8 < size_8; i_8++) {
                            const value_25: number = input.readDouble();
                            value_24.push(value_25);
                        }
                        input.readListEnd();
                        _args.stringLengthPercentilesDriftSeries = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 200:
                    if (fieldType === thrift.TType.LIST) {
                        const value_26: Array<thrift.Int64> = new Array<thrift.Int64>();
                        const metadata_9: thrift.IThriftList = input.readListBegin();
                        const size_9: number = metadata_9.size;
                        for (let i_9: number = 0; i_9 < size_9; i_9++) {
                            const value_27: thrift.Int64 = input.readI64();
                            value_26.push(value_27);
                        }
                        input.readListEnd();
                        _args.timestamps = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 300:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_28: TileSeriesKey.ITileSeriesKey = TileSeriesKey.TileSeriesKeyCodec.decode(input);
                        _args.key = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            percentileDriftSeries: _args.percentileDriftSeries,
            histogramDriftSeries: _args.histogramDriftSeries,
            countChangePercentSeries: _args.countChangePercentSeries,
            nullRatioChangePercentSeries: _args.nullRatioChangePercentSeries,
            innerCountChangePercentSeries: _args.innerCountChangePercentSeries,
            innerNullCountChangePercentSeries: _args.innerNullCountChangePercentSeries,
            lengthPercentilesDriftSeries: _args.lengthPercentilesDriftSeries,
            stringLengthPercentilesDriftSeries: _args.stringLengthPercentilesDriftSeries,
            timestamps: _args.timestamps,
            key: _args.key
        };
    }
};
export class TileDriftSeries extends thrift.StructLike implements ITileDriftSeries {
    public percentileDriftSeries?: Array<number>;
    public histogramDriftSeries?: Array<number>;
    public countChangePercentSeries?: Array<number>;
    public nullRatioChangePercentSeries?: Array<number>;
    public innerCountChangePercentSeries?: Array<number>;
    public innerNullCountChangePercentSeries?: Array<number>;
    public lengthPercentilesDriftSeries?: Array<number>;
    public stringLengthPercentilesDriftSeries?: Array<number>;
    public timestamps?: Array<thrift.Int64>;
    public key?: TileSeriesKey.ITileSeriesKey;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ITileDriftSeriesArgs = {}) {
        super();
        if (args.percentileDriftSeries != null) {
            const value_29: Array<number> = new Array<number>();
            args.percentileDriftSeries.forEach((value_39: number): void => {
                const value_40: number = value_39;
                value_29.push(value_40);
            });
            this.percentileDriftSeries = value_29;
        }
        if (args.histogramDriftSeries != null) {
            const value_30: Array<number> = new Array<number>();
            args.histogramDriftSeries.forEach((value_41: number): void => {
                const value_42: number = value_41;
                value_30.push(value_42);
            });
            this.histogramDriftSeries = value_30;
        }
        if (args.countChangePercentSeries != null) {
            const value_31: Array<number> = new Array<number>();
            args.countChangePercentSeries.forEach((value_43: number): void => {
                const value_44: number = value_43;
                value_31.push(value_44);
            });
            this.countChangePercentSeries = value_31;
        }
        if (args.nullRatioChangePercentSeries != null) {
            const value_32: Array<number> = new Array<number>();
            args.nullRatioChangePercentSeries.forEach((value_45: number): void => {
                const value_46: number = value_45;
                value_32.push(value_46);
            });
            this.nullRatioChangePercentSeries = value_32;
        }
        if (args.innerCountChangePercentSeries != null) {
            const value_33: Array<number> = new Array<number>();
            args.innerCountChangePercentSeries.forEach((value_47: number): void => {
                const value_48: number = value_47;
                value_33.push(value_48);
            });
            this.innerCountChangePercentSeries = value_33;
        }
        if (args.innerNullCountChangePercentSeries != null) {
            const value_34: Array<number> = new Array<number>();
            args.innerNullCountChangePercentSeries.forEach((value_49: number): void => {
                const value_50: number = value_49;
                value_34.push(value_50);
            });
            this.innerNullCountChangePercentSeries = value_34;
        }
        if (args.lengthPercentilesDriftSeries != null) {
            const value_35: Array<number> = new Array<number>();
            args.lengthPercentilesDriftSeries.forEach((value_51: number): void => {
                const value_52: number = value_51;
                value_35.push(value_52);
            });
            this.lengthPercentilesDriftSeries = value_35;
        }
        if (args.stringLengthPercentilesDriftSeries != null) {
            const value_36: Array<number> = new Array<number>();
            args.stringLengthPercentilesDriftSeries.forEach((value_53: number): void => {
                const value_54: number = value_53;
                value_36.push(value_54);
            });
            this.stringLengthPercentilesDriftSeries = value_36;
        }
        if (args.timestamps != null) {
            const value_37: Array<thrift.Int64> = new Array<thrift.Int64>();
            args.timestamps.forEach((value_55: number | string | thrift.Int64): void => {
                const value_56: thrift.Int64 = (typeof value_55 === "number" ? new thrift.Int64(value_55) : typeof value_55 === "string" ? thrift.Int64.fromDecimalString(value_55) : value_55);
                value_37.push(value_56);
            });
            this.timestamps = value_37;
        }
        if (args.key != null) {
            const value_38: TileSeriesKey.ITileSeriesKey = new TileSeriesKey.TileSeriesKey(args.key);
            this.key = value_38;
        }
    }
    public static read(input: thrift.TProtocol): TileDriftSeries {
        return new TileDriftSeries(TileDriftSeriesCodec.decode(input));
    }
    public static write(args: ITileDriftSeriesArgs, output: thrift.TProtocol): void {
        return TileDriftSeriesCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return TileDriftSeriesCodec.encode(this, output);
    }
}
