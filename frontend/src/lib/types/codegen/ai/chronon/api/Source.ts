/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as EventSource from "./EventSource";
import * as EntitySource from "./EntitySource";
import * as JoinSource from "./JoinSource";
export interface ISource {
    events?: EventSource.IEventSource;
    entities?: EntitySource.IEntitySource;
    joinSource?: JoinSource.IJoinSource;
}
export interface ISourceArgs {
    events?: EventSource.IEventSourceArgs;
    entities?: EntitySource.IEntitySourceArgs;
    joinSource?: JoinSource.IJoinSourceArgs;
}
export const SourceCodec: thrift.IStructCodec<ISourceArgs, ISource> = {
    encode(args: ISourceArgs, output: thrift.TProtocol): void {
        let _fieldsSet: number = 0;
        const obj: any = {
            events: args.events,
            entities: args.entities,
            joinSource: args.joinSource
        };
        output.writeStructBegin("Source");
        if (obj.events != null) {
            _fieldsSet++;
            output.writeFieldBegin("events", thrift.TType.STRUCT, 1);
            EventSource.EventSourceCodec.encode(obj.events, output);
            output.writeFieldEnd();
        }
        if (obj.entities != null) {
            _fieldsSet++;
            output.writeFieldBegin("entities", thrift.TType.STRUCT, 2);
            EntitySource.EntitySourceCodec.encode(obj.entities, output);
            output.writeFieldEnd();
        }
        if (obj.joinSource != null) {
            _fieldsSet++;
            output.writeFieldBegin("joinSource", thrift.TType.STRUCT, 3);
            JoinSource.JoinSourceCodec.encode(obj.joinSource, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        if (_fieldsSet > 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion cannot have more than one value");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion must have one value set");
        }
        return;
    },
    decode(input: thrift.TProtocol): ISource {
        let _fieldsSet: number = 0;
        let _returnValue: any = null;
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_1: EventSource.IEventSource = EventSource.EventSourceCodec.decode(input);
                        _returnValue = { events: value_1 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_2: EntitySource.IEntitySource = EntitySource.EntitySourceCodec.decode(input);
                        _returnValue = { entities: value_2 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRUCT) {
                        _fieldsSet++;
                        const value_3: JoinSource.IJoinSource = JoinSource.JoinSourceCodec.decode(input);
                        _returnValue = { joinSource: value_3 };
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_fieldsSet > 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion cannot have more than one value");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion must have one value set");
        }
        if (_returnValue !== null) {
            if (_returnValue.events !== undefined) {
                return {
                    events: _returnValue.events
                };
            }
            else {
                if (_returnValue.entities !== undefined) {
                    return {
                        entities: _returnValue.entities
                    };
                }
                else {
                    return {
                        joinSource: _returnValue.joinSource
                    };
                }
            }
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read data for TUnion");
        }
    }
};
export class Source extends thrift.StructLike implements ISource {
    public events?: EventSource.IEventSource;
    public entities?: EntitySource.IEntitySource;
    public joinSource?: JoinSource.IJoinSource;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ISourceArgs = {}) {
        super();
        let _fieldsSet: number = 0;
        if (args.events != null) {
            _fieldsSet++;
            const value_4: EventSource.IEventSource = new EventSource.EventSource(args.events);
            this.events = value_4;
        }
        if (args.entities != null) {
            _fieldsSet++;
            const value_5: EntitySource.IEntitySource = new EntitySource.EntitySource(args.entities);
            this.entities = value_5;
        }
        if (args.joinSource != null) {
            _fieldsSet++;
            const value_6: JoinSource.IJoinSource = new JoinSource.JoinSource(args.joinSource);
            this.joinSource = value_6;
        }
        if (_fieldsSet > 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion cannot have more than one value");
        }
        else if (_fieldsSet < 1) {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.INVALID_DATA, "TUnion must have one value set");
        }
    }
    public static read(input: thrift.TProtocol): Source {
        return new Source(SourceCodec.decode(input));
    }
    public static write(args: ISourceArgs, output: thrift.TProtocol): void {
        return SourceCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return SourceCodec.encode(this, output);
    }
}
