/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as JoinPart from "./JoinPart";
import * as MetaData from "./MetaData";
export interface ILabelPart {
    labels?: Array<JoinPart.IJoinPart>;
    leftStartOffset?: number;
    leftEndOffset?: number;
    metaData?: MetaData.IMetaData;
}
export interface ILabelPartArgs {
    labels?: Array<JoinPart.IJoinPartArgs>;
    leftStartOffset?: number;
    leftEndOffset?: number;
    metaData?: MetaData.IMetaDataArgs;
}
export const LabelPartCodec: thrift.IStructCodec<ILabelPartArgs, ILabelPart> = {
    encode(args: ILabelPartArgs, output: thrift.TProtocol): void {
        const obj: any = {
            labels: args.labels,
            leftStartOffset: args.leftStartOffset,
            leftEndOffset: args.leftEndOffset,
            metaData: args.metaData
        };
        output.writeStructBegin("LabelPart");
        if (obj.labels != null) {
            output.writeFieldBegin("labels", thrift.TType.LIST, 1);
            output.writeListBegin(thrift.TType.STRUCT, obj.labels.length);
            obj.labels.forEach((value_1: JoinPart.IJoinPartArgs): void => {
                JoinPart.JoinPartCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.leftStartOffset != null) {
            output.writeFieldBegin("leftStartOffset", thrift.TType.I32, 2);
            output.writeI32(obj.leftStartOffset);
            output.writeFieldEnd();
        }
        if (obj.leftEndOffset != null) {
            output.writeFieldBegin("leftEndOffset", thrift.TType.I32, 3);
            output.writeI32(obj.leftEndOffset);
            output.writeFieldEnd();
        }
        if (obj.metaData != null) {
            output.writeFieldBegin("metaData", thrift.TType.STRUCT, 4);
            MetaData.MetaDataCodec.encode(obj.metaData, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ILabelPart {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.LIST) {
                        const value_2: Array<JoinPart.IJoinPart> = new Array<JoinPart.IJoinPart>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_3: JoinPart.IJoinPart = JoinPart.JoinPartCodec.decode(input);
                            value_2.push(value_3);
                        }
                        input.readListEnd();
                        _args.labels = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_4: number = input.readI32();
                        _args.leftStartOffset = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I32) {
                        const value_5: number = input.readI32();
                        _args.leftEndOffset = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_6: MetaData.IMetaData = MetaData.MetaDataCodec.decode(input);
                        _args.metaData = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            labels: _args.labels,
            leftStartOffset: _args.leftStartOffset,
            leftEndOffset: _args.leftEndOffset,
            metaData: _args.metaData
        };
    }
};
export class LabelPart extends thrift.StructLike implements ILabelPart {
    public labels?: Array<JoinPart.IJoinPart>;
    public leftStartOffset?: number;
    public leftEndOffset?: number;
    public metaData?: MetaData.IMetaData;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ILabelPartArgs = {}) {
        super();
        if (args.labels != null) {
            const value_7: Array<JoinPart.IJoinPart> = new Array<JoinPart.IJoinPart>();
            args.labels.forEach((value_11: JoinPart.IJoinPartArgs): void => {
                const value_12: JoinPart.IJoinPart = new JoinPart.JoinPart(value_11);
                value_7.push(value_12);
            });
            this.labels = value_7;
        }
        if (args.leftStartOffset != null) {
            const value_8: number = args.leftStartOffset;
            this.leftStartOffset = value_8;
        }
        if (args.leftEndOffset != null) {
            const value_9: number = args.leftEndOffset;
            this.leftEndOffset = value_9;
        }
        if (args.metaData != null) {
            const value_10: MetaData.IMetaData = new MetaData.MetaData(args.metaData);
            this.metaData = value_10;
        }
    }
    public static read(input: thrift.TProtocol): LabelPart {
        return new LabelPart(LabelPartCodec.decode(input));
    }
    public static write(args: ILabelPartArgs, output: thrift.TProtocol): void {
        return LabelPartCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return LabelPartCodec.encode(this, output);
    }
}
