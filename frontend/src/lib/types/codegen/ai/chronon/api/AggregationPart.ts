/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Operation from "./Operation";
import * as Window from "./Window";
export interface IAggregationPart {
    inputColumn?: string;
    operation?: Operation.Operation;
    argMap?: Map<string, string>;
    window?: Window.IWindow;
    bucket?: string;
}
export interface IAggregationPartArgs {
    inputColumn?: string;
    operation?: Operation.Operation;
    argMap?: Map<string, string>;
    window?: Window.IWindowArgs;
    bucket?: string;
}
export const AggregationPartCodec: thrift.IStructCodec<IAggregationPartArgs, IAggregationPart> = {
    encode(args: IAggregationPartArgs, output: thrift.TProtocol): void {
        const obj: any = {
            inputColumn: args.inputColumn,
            operation: args.operation,
            argMap: args.argMap,
            window: args.window,
            bucket: args.bucket
        };
        output.writeStructBegin("AggregationPart");
        if (obj.inputColumn != null) {
            output.writeFieldBegin("inputColumn", thrift.TType.STRING, 1);
            output.writeString(obj.inputColumn);
            output.writeFieldEnd();
        }
        if (obj.operation != null) {
            output.writeFieldBegin("operation", thrift.TType.I32, 2);
            output.writeI32(obj.operation);
            output.writeFieldEnd();
        }
        if (obj.argMap != null) {
            output.writeFieldBegin("argMap", thrift.TType.MAP, 3);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.STRING, obj.argMap.size);
            obj.argMap.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (obj.window != null) {
            output.writeFieldBegin("window", thrift.TType.STRUCT, 4);
            Window.WindowCodec.encode(obj.window, output);
            output.writeFieldEnd();
        }
        if (obj.bucket != null) {
            output.writeFieldBegin("bucket", thrift.TType.STRING, 5);
            output.writeString(obj.bucket);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAggregationPart {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.inputColumn = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_3: Operation.Operation = input.readI32();
                        _args.operation = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.MAP) {
                        const value_4: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.IThriftMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_5: string = input.readString();
                            value_4.set(key_2, value_5);
                        }
                        input.readMapEnd();
                        _args.argMap = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_6: Window.IWindow = Window.WindowCodec.decode(input);
                        _args.window = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.bucket = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            inputColumn: _args.inputColumn,
            operation: _args.operation,
            argMap: _args.argMap,
            window: _args.window,
            bucket: _args.bucket
        };
    }
};
export class AggregationPart extends thrift.StructLike implements IAggregationPart {
    public inputColumn?: string;
    public operation?: Operation.Operation;
    public argMap?: Map<string, string>;
    public window?: Window.IWindow;
    public bucket?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAggregationPartArgs = {}) {
        super();
        if (args.inputColumn != null) {
            const value_8: string = args.inputColumn;
            this.inputColumn = value_8;
        }
        if (args.operation != null) {
            const value_9: Operation.Operation = args.operation;
            this.operation = value_9;
        }
        if (args.argMap != null) {
            const value_10: Map<string, string> = new Map<string, string>();
            args.argMap.forEach((value_13: string, key_3: string): void => {
                const value_14: string = value_13;
                const key_4: string = key_3;
                value_10.set(key_4, value_14);
            });
            this.argMap = value_10;
        }
        if (args.window != null) {
            const value_11: Window.IWindow = new Window.Window(args.window);
            this.window = value_11;
        }
        if (args.bucket != null) {
            const value_12: string = args.bucket;
            this.bucket = value_12;
        }
    }
    public static read(input: thrift.TProtocol): AggregationPart {
        return new AggregationPart(AggregationPartCodec.decode(input));
    }
    public static write(args: IAggregationPartArgs, output: thrift.TProtocol): void {
        return AggregationPartCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return AggregationPartCodec.encode(this, output);
    }
}
