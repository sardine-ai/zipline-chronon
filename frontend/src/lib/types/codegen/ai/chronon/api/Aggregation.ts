/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Operation from "./Operation";
import * as Window from "./Window";
export interface IAggregation {
    inputColumn?: string;
    operation?: Operation.Operation;
    argMap?: Map<string, string>;
    windows?: Array<Window.IWindow>;
    buckets?: Array<string>;
}
export interface IAggregationArgs {
    inputColumn?: string;
    operation?: Operation.Operation;
    argMap?: Map<string, string>;
    windows?: Array<Window.IWindowArgs>;
    buckets?: Array<string>;
}
export const AggregationCodec: thrift.IStructCodec<IAggregationArgs, IAggregation> = {
    encode(args: IAggregationArgs, output: thrift.TProtocol): void {
        const obj: any = {
            inputColumn: args.inputColumn,
            operation: args.operation,
            argMap: args.argMap,
            windows: args.windows,
            buckets: args.buckets
        };
        output.writeStructBegin("Aggregation");
        if (obj.inputColumn != null) {
            output.writeFieldBegin("inputColumn", thrift.TType.STRING, 1);
            output.writeString(obj.inputColumn);
            output.writeFieldEnd();
        }
        if (obj.operation != null) {
            output.writeFieldBegin("operation", thrift.TType.I32, 2);
            output.writeI32(obj.operation);
            output.writeFieldEnd();
        }
        if (obj.argMap != null) {
            output.writeFieldBegin("argMap", thrift.TType.MAP, 3);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.STRING, obj.argMap.size);
            obj.argMap.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (obj.windows != null) {
            output.writeFieldBegin("windows", thrift.TType.LIST, 4);
            output.writeListBegin(thrift.TType.STRUCT, obj.windows.length);
            obj.windows.forEach((value_2: Window.IWindowArgs): void => {
                Window.WindowCodec.encode(value_2, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.buckets != null) {
            output.writeFieldBegin("buckets", thrift.TType.LIST, 5);
            output.writeListBegin(thrift.TType.STRING, obj.buckets.length);
            obj.buckets.forEach((value_3: string): void => {
                output.writeString(value_3);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAggregation {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.inputColumn = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_5: Operation.Operation = input.readI32();
                        _args.operation = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.MAP) {
                        const value_6: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.IThriftMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_7: string = input.readString();
                            value_6.set(key_2, value_7);
                        }
                        input.readMapEnd();
                        _args.argMap = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.LIST) {
                        const value_8: Array<Window.IWindow> = new Array<Window.IWindow>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_9: Window.IWindow = Window.WindowCodec.decode(input);
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.windows = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.LIST) {
                        const value_10: Array<string> = new Array<string>();
                        const metadata_3: thrift.IThriftList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_11: string = input.readString();
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.buckets = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            inputColumn: _args.inputColumn,
            operation: _args.operation,
            argMap: _args.argMap,
            windows: _args.windows,
            buckets: _args.buckets
        };
    }
};
export class Aggregation extends thrift.StructLike implements IAggregation {
    public inputColumn?: string;
    public operation?: Operation.Operation;
    public argMap?: Map<string, string>;
    public windows?: Array<Window.IWindow>;
    public buckets?: Array<string>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAggregationArgs = {}) {
        super();
        if (args.inputColumn != null) {
            const value_12: string = args.inputColumn;
            this.inputColumn = value_12;
        }
        if (args.operation != null) {
            const value_13: Operation.Operation = args.operation;
            this.operation = value_13;
        }
        if (args.argMap != null) {
            const value_14: Map<string, string> = new Map<string, string>();
            args.argMap.forEach((value_17: string, key_3: string): void => {
                const value_18: string = value_17;
                const key_4: string = key_3;
                value_14.set(key_4, value_18);
            });
            this.argMap = value_14;
        }
        if (args.windows != null) {
            const value_15: Array<Window.IWindow> = new Array<Window.IWindow>();
            args.windows.forEach((value_19: Window.IWindowArgs): void => {
                const value_20: Window.IWindow = new Window.Window(value_19);
                value_15.push(value_20);
            });
            this.windows = value_15;
        }
        if (args.buckets != null) {
            const value_16: Array<string> = new Array<string>();
            args.buckets.forEach((value_21: string): void => {
                const value_22: string = value_21;
                value_16.push(value_22);
            });
            this.buckets = value_16;
        }
    }
    public static read(input: thrift.TProtocol): Aggregation {
        return new Aggregation(AggregationCodec.decode(input));
    }
    public static write(args: IAggregationArgs, output: thrift.TProtocol): void {
        return AggregationCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return AggregationCodec.encode(this, output);
    }
}
