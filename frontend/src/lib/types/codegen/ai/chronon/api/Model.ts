/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as TDataType from "./TDataType";
import * as ModelType from "./ModelType";
import * as MetaData from "./MetaData";
import * as Source from "./Source";
export interface IModel {
    outputSchema?: TDataType.ITDataType;
    modelType?: ModelType.ModelType;
    metaData?: MetaData.IMetaData;
    source?: Source.ISource;
    modelParams?: Map<string, string>;
}
export interface IModelArgs {
    outputSchema?: TDataType.ITDataTypeArgs;
    modelType?: ModelType.ModelType;
    metaData?: MetaData.IMetaDataArgs;
    source?: Source.ISourceArgs;
    modelParams?: Map<string, string>;
}
export const ModelCodec: thrift.IStructCodec<IModelArgs, IModel> = {
    encode(args: IModelArgs, output: thrift.TProtocol): void {
        const obj: any = {
            outputSchema: args.outputSchema,
            modelType: args.modelType,
            metaData: args.metaData,
            source: args.source,
            modelParams: args.modelParams
        };
        output.writeStructBegin("Model");
        if (obj.outputSchema != null) {
            output.writeFieldBegin("outputSchema", thrift.TType.STRUCT, 1);
            TDataType.TDataTypeCodec.encode(obj.outputSchema, output);
            output.writeFieldEnd();
        }
        if (obj.modelType != null) {
            output.writeFieldBegin("modelType", thrift.TType.I32, 2);
            output.writeI32(obj.modelType);
            output.writeFieldEnd();
        }
        if (obj.metaData != null) {
            output.writeFieldBegin("metaData", thrift.TType.STRUCT, 3);
            MetaData.MetaDataCodec.encode(obj.metaData, output);
            output.writeFieldEnd();
        }
        if (obj.source != null) {
            output.writeFieldBegin("source", thrift.TType.STRUCT, 4);
            Source.SourceCodec.encode(obj.source, output);
            output.writeFieldEnd();
        }
        if (obj.modelParams != null) {
            output.writeFieldBegin("modelParams", thrift.TType.MAP, 5);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.STRING, obj.modelParams.size);
            obj.modelParams.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IModel {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_2: TDataType.ITDataType = TDataType.TDataTypeCodec.decode(input);
                        _args.outputSchema = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_3: ModelType.ModelType = input.readI32();
                        _args.modelType = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_4: MetaData.IMetaData = MetaData.MetaDataCodec.decode(input);
                        _args.metaData = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_5: Source.ISource = Source.SourceCodec.decode(input);
                        _args.source = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.MAP) {
                        const value_6: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.IThriftMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_7: string = input.readString();
                            value_6.set(key_2, value_7);
                        }
                        input.readMapEnd();
                        _args.modelParams = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            outputSchema: _args.outputSchema,
            modelType: _args.modelType,
            metaData: _args.metaData,
            source: _args.source,
            modelParams: _args.modelParams
        };
    }
};
export class Model extends thrift.StructLike implements IModel {
    public outputSchema?: TDataType.ITDataType;
    public modelType?: ModelType.ModelType;
    public metaData?: MetaData.IMetaData;
    public source?: Source.ISource;
    public modelParams?: Map<string, string>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IModelArgs = {}) {
        super();
        if (args.outputSchema != null) {
            const value_8: TDataType.ITDataType = new TDataType.TDataType(args.outputSchema);
            this.outputSchema = value_8;
        }
        if (args.modelType != null) {
            const value_9: ModelType.ModelType = args.modelType;
            this.modelType = value_9;
        }
        if (args.metaData != null) {
            const value_10: MetaData.IMetaData = new MetaData.MetaData(args.metaData);
            this.metaData = value_10;
        }
        if (args.source != null) {
            const value_11: Source.ISource = new Source.Source(args.source);
            this.source = value_11;
        }
        if (args.modelParams != null) {
            const value_12: Map<string, string> = new Map<string, string>();
            args.modelParams.forEach((value_13: string, key_3: string): void => {
                const value_14: string = value_13;
                const key_4: string = key_3;
                value_12.set(key_4, value_14);
            });
            this.modelParams = value_12;
        }
    }
    public static read(input: thrift.TProtocol): Model {
        return new Model(ModelCodec.decode(input));
    }
    public static write(args: IModelArgs, output: thrift.TProtocol): void {
        return ModelCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ModelCodec.encode(this, output);
    }
}
