/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Query from "./Query";
export interface IEntitySource {
    snapshotTable?: string;
    mutationTable?: string;
    mutationTopic?: string;
    query?: Query.IQuery;
}
export interface IEntitySourceArgs {
    snapshotTable?: string;
    mutationTable?: string;
    mutationTopic?: string;
    query?: Query.IQueryArgs;
}
export const EntitySourceCodec: thrift.IStructCodec<IEntitySourceArgs, IEntitySource> = {
    encode(args: IEntitySourceArgs, output: thrift.TProtocol): void {
        const obj: any = {
            snapshotTable: args.snapshotTable,
            mutationTable: args.mutationTable,
            mutationTopic: args.mutationTopic,
            query: args.query
        };
        output.writeStructBegin("EntitySource");
        if (obj.snapshotTable != null) {
            output.writeFieldBegin("snapshotTable", thrift.TType.STRING, 1);
            output.writeString(obj.snapshotTable);
            output.writeFieldEnd();
        }
        if (obj.mutationTable != null) {
            output.writeFieldBegin("mutationTable", thrift.TType.STRING, 2);
            output.writeString(obj.mutationTable);
            output.writeFieldEnd();
        }
        if (obj.mutationTopic != null) {
            output.writeFieldBegin("mutationTopic", thrift.TType.STRING, 3);
            output.writeString(obj.mutationTopic);
            output.writeFieldEnd();
        }
        if (obj.query != null) {
            output.writeFieldBegin("query", thrift.TType.STRUCT, 4);
            Query.QueryCodec.encode(obj.query, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IEntitySource {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.snapshotTable = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.mutationTable = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.mutationTopic = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_4: Query.IQuery = Query.QueryCodec.decode(input);
                        _args.query = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            snapshotTable: _args.snapshotTable,
            mutationTable: _args.mutationTable,
            mutationTopic: _args.mutationTopic,
            query: _args.query
        };
    }
};
export class EntitySource extends thrift.StructLike implements IEntitySource {
    public snapshotTable?: string;
    public mutationTable?: string;
    public mutationTopic?: string;
    public query?: Query.IQuery;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IEntitySourceArgs = {}) {
        super();
        if (args.snapshotTable != null) {
            const value_5: string = args.snapshotTable;
            this.snapshotTable = value_5;
        }
        if (args.mutationTable != null) {
            const value_6: string = args.mutationTable;
            this.mutationTable = value_6;
        }
        if (args.mutationTopic != null) {
            const value_7: string = args.mutationTopic;
            this.mutationTopic = value_7;
        }
        if (args.query != null) {
            const value_8: Query.IQuery = new Query.Query(args.query);
            this.query = value_8;
        }
    }
    public static read(input: thrift.TProtocol): EntitySource {
        return new EntitySource(EntitySourceCodec.decode(input));
    }
    public static write(args: IEntitySourceArgs, output: thrift.TProtocol): void {
        return EntitySourceCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return EntitySourceCodec.encode(this, output);
    }
}
