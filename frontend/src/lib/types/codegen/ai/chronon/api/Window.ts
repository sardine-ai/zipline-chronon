/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as TimeUnit from "./TimeUnit";
export interface IWindow {
    length?: number;
    timeUnit?: TimeUnit.TimeUnit;
}
export interface IWindowArgs {
    length?: number;
    timeUnit?: TimeUnit.TimeUnit;
}
export const WindowCodec: thrift.IStructCodec<IWindowArgs, IWindow> = {
    encode(args: IWindowArgs, output: thrift.TProtocol): void {
        const obj: any = {
            length: args.length,
            timeUnit: args.timeUnit
        };
        output.writeStructBegin("Window");
        if (obj.length != null) {
            output.writeFieldBegin("length", thrift.TType.I32, 1);
            output.writeI32(obj.length);
            output.writeFieldEnd();
        }
        if (obj.timeUnit != null) {
            output.writeFieldBegin("timeUnit", thrift.TType.I32, 2);
            output.writeI32(obj.timeUnit);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IWindow {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: number = input.readI32();
                        _args.length = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I32) {
                        const value_2: TimeUnit.TimeUnit = input.readI32();
                        _args.timeUnit = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            length: _args.length,
            timeUnit: _args.timeUnit
        };
    }
};
export class Window extends thrift.StructLike implements IWindow {
    public length?: number;
    public timeUnit?: TimeUnit.TimeUnit;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IWindowArgs = {}) {
        super();
        if (args.length != null) {
            const value_3: number = args.length;
            this.length = value_3;
        }
        if (args.timeUnit != null) {
            const value_4: TimeUnit.TimeUnit = args.timeUnit;
            this.timeUnit = value_4;
        }
    }
    public static read(input: thrift.TProtocol): Window {
        return new Window(WindowCodec.decode(input));
    }
    public static write(args: IWindowArgs, output: thrift.TProtocol): void {
        return WindowCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return WindowCodec.encode(this, output);
    }
}
