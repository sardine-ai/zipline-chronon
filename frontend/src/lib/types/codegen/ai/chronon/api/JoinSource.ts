/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Join from "./Join";
import * as Query from "./Query";
export interface IJoinSource {
    join?: Join.IJoin;
    query?: Query.IQuery;
}
export interface IJoinSourceArgs {
    join?: Join.IJoinArgs;
    query?: Query.IQueryArgs;
}
export const JoinSourceCodec: thrift.IStructCodec<IJoinSourceArgs, IJoinSource> = {
    encode(args: IJoinSourceArgs, output: thrift.TProtocol): void {
        const obj: any = {
            join: args.join,
            query: args.query
        };
        output.writeStructBegin("JoinSource");
        if (obj.join != null) {
            output.writeFieldBegin("join", thrift.TType.STRUCT, 1);
            Join.JoinCodec.encode(obj.join, output);
            output.writeFieldEnd();
        }
        if (obj.query != null) {
            output.writeFieldBegin("query", thrift.TType.STRUCT, 2);
            Query.QueryCodec.encode(obj.query, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IJoinSource {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_1: Join.IJoin = Join.JoinCodec.decode(input);
                        _args.join = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_2: Query.IQuery = Query.QueryCodec.decode(input);
                        _args.query = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            join: _args.join,
            query: _args.query
        };
    }
};
export class JoinSource extends thrift.StructLike implements IJoinSource {
    public join?: Join.IJoin;
    public query?: Query.IQuery;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IJoinSourceArgs = {}) {
        super();
        if (args.join != null) {
            const value_3: Join.IJoin = new Join.Join(args.join);
            this.join = value_3;
        }
        if (args.query != null) {
            const value_4: Query.IQuery = new Query.Query(args.query);
            this.query = value_4;
        }
    }
    public static read(input: thrift.TProtocol): JoinSource {
        return new JoinSource(JoinSourceCodec.decode(input));
    }
    public static write(args: IJoinSourceArgs, output: thrift.TProtocol): void {
        return JoinSourceCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return JoinSourceCodec.encode(this, output);
    }
}
