/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface ITileKey {
    column?: string;
    slice?: string;
    name?: string;
    sizeMillis?: thrift.Int64;
}
export interface ITileKeyArgs {
    column?: string;
    slice?: string;
    name?: string;
    sizeMillis?: number | string | thrift.Int64;
}
export const TileKeyCodec: thrift.IStructCodec<ITileKeyArgs, ITileKey> = {
    encode(args: ITileKeyArgs, output: thrift.TProtocol): void {
        const obj: any = {
            column: args.column,
            slice: args.slice,
            name: args.name,
            sizeMillis: (typeof args.sizeMillis === "number" ? new thrift.Int64(args.sizeMillis) : typeof args.sizeMillis === "string" ? thrift.Int64.fromDecimalString(args.sizeMillis) : args.sizeMillis)
        };
        output.writeStructBegin("TileKey");
        if (obj.column != null) {
            output.writeFieldBegin("column", thrift.TType.STRING, 1);
            output.writeString(obj.column);
            output.writeFieldEnd();
        }
        if (obj.slice != null) {
            output.writeFieldBegin("slice", thrift.TType.STRING, 2);
            output.writeString(obj.slice);
            output.writeFieldEnd();
        }
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 3);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        if (obj.sizeMillis != null) {
            output.writeFieldBegin("sizeMillis", thrift.TType.I64, 4);
            output.writeI64((typeof obj.sizeMillis === "number" ? new thrift.Int64(obj.sizeMillis) : typeof obj.sizeMillis === "string" ? thrift.Int64.fromDecimalString(obj.sizeMillis) : obj.sizeMillis));
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ITileKey {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.column = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.slice = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.name = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.I64) {
                        const value_4: thrift.Int64 = input.readI64();
                        _args.sizeMillis = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            column: _args.column,
            slice: _args.slice,
            name: _args.name,
            sizeMillis: _args.sizeMillis
        };
    }
};
export class TileKey extends thrift.StructLike implements ITileKey {
    public column?: string;
    public slice?: string;
    public name?: string;
    public sizeMillis?: thrift.Int64;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ITileKeyArgs = {}) {
        super();
        if (args.column != null) {
            const value_5: string = args.column;
            this.column = value_5;
        }
        if (args.slice != null) {
            const value_6: string = args.slice;
            this.slice = value_6;
        }
        if (args.name != null) {
            const value_7: string = args.name;
            this.name = value_7;
        }
        if (args.sizeMillis != null) {
            const value_8: thrift.Int64 = (typeof args.sizeMillis === "number" ? new thrift.Int64(args.sizeMillis) : typeof args.sizeMillis === "string" ? thrift.Int64.fromDecimalString(args.sizeMillis) : args.sizeMillis);
            this.sizeMillis = value_8;
        }
    }
    public static read(input: thrift.TProtocol): TileKey {
        return new TileKey(TileKeyCodec.decode(input));
    }
    public static write(args: ITileKeyArgs, output: thrift.TProtocol): void {
        return TileKeyCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return TileKeyCodec.encode(this, output);
    }
}
