/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as TDataType from "./TDataType";
export interface IDataSpec {
    schema?: TDataType.ITDataType;
    partitionColumns?: Array<string>;
    retentionDays?: number;
    props?: Map<string, string>;
}
export interface IDataSpecArgs {
    schema?: TDataType.ITDataTypeArgs;
    partitionColumns?: Array<string>;
    retentionDays?: number;
    props?: Map<string, string>;
}
export const DataSpecCodec: thrift.IStructCodec<IDataSpecArgs, IDataSpec> = {
    encode(args: IDataSpecArgs, output: thrift.TProtocol): void {
        const obj: any = {
            schema: args.schema,
            partitionColumns: args.partitionColumns,
            retentionDays: args.retentionDays,
            props: args.props
        };
        output.writeStructBegin("DataSpec");
        if (obj.schema != null) {
            output.writeFieldBegin("schema", thrift.TType.STRUCT, 1);
            TDataType.TDataTypeCodec.encode(obj.schema, output);
            output.writeFieldEnd();
        }
        if (obj.partitionColumns != null) {
            output.writeFieldBegin("partitionColumns", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.STRING, obj.partitionColumns.length);
            obj.partitionColumns.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.retentionDays != null) {
            output.writeFieldBegin("retentionDays", thrift.TType.I32, 3);
            output.writeI32(obj.retentionDays);
            output.writeFieldEnd();
        }
        if (obj.props != null) {
            output.writeFieldBegin("props", thrift.TType.MAP, 4);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.STRING, obj.props.size);
            obj.props.forEach((value_2: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_2);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IDataSpec {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_3: TDataType.ITDataType = TDataType.TDataTypeCodec.decode(input);
                        _args.schema = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_4: Array<string> = new Array<string>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: string = input.readString();
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.partitionColumns = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I32) {
                        const value_6: number = input.readI32();
                        _args.retentionDays = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.MAP) {
                        const value_7: Map<string, string> = new Map<string, string>();
                        const metadata_2: thrift.IThriftMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_2: string = input.readString();
                            const value_8: string = input.readString();
                            value_7.set(key_2, value_8);
                        }
                        input.readMapEnd();
                        _args.props = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            schema: _args.schema,
            partitionColumns: _args.partitionColumns,
            retentionDays: _args.retentionDays,
            props: _args.props
        };
    }
};
export class DataSpec extends thrift.StructLike implements IDataSpec {
    public schema?: TDataType.ITDataType;
    public partitionColumns?: Array<string>;
    public retentionDays?: number;
    public props?: Map<string, string>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IDataSpecArgs = {}) {
        super();
        if (args.schema != null) {
            const value_9: TDataType.ITDataType = new TDataType.TDataType(args.schema);
            this.schema = value_9;
        }
        if (args.partitionColumns != null) {
            const value_10: Array<string> = new Array<string>();
            args.partitionColumns.forEach((value_13: string): void => {
                const value_14: string = value_13;
                value_10.push(value_14);
            });
            this.partitionColumns = value_10;
        }
        if (args.retentionDays != null) {
            const value_11: number = args.retentionDays;
            this.retentionDays = value_11;
        }
        if (args.props != null) {
            const value_12: Map<string, string> = new Map<string, string>();
            args.props.forEach((value_15: string, key_3: string): void => {
                const value_16: string = value_15;
                const key_4: string = key_3;
                value_12.set(key_4, value_16);
            });
            this.props = value_12;
        }
    }
    public static read(input: thrift.TProtocol): DataSpec {
        return new DataSpec(DataSpecCodec.decode(input));
    }
    public static write(args: IDataSpecArgs, output: thrift.TProtocol): void {
        return DataSpecCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return DataSpecCodec.encode(this, output);
    }
}
