/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as MetaData from "./MetaData";
import * as Source from "./Source";
import * as JoinPart from "./JoinPart";
import * as ExternalPart from "./ExternalPart";
import * as LabelPart from "./LabelPart";
import * as BootstrapPart from "./BootstrapPart";
import * as Derivation from "./Derivation";
export interface IJoin {
    metaData?: MetaData.IMetaData;
    left?: Source.ISource;
    joinParts?: Array<JoinPart.IJoinPart>;
    skewKeys?: Map<string, Array<string>>;
    onlineExternalParts?: Array<ExternalPart.IExternalPart>;
    labelPart?: LabelPart.ILabelPart;
    bootstrapParts?: Array<BootstrapPart.IBootstrapPart>;
    rowIds?: Array<string>;
    derivations?: Array<Derivation.IDerivation>;
}
export interface IJoinArgs {
    metaData?: MetaData.IMetaDataArgs;
    left?: Source.ISourceArgs;
    joinParts?: Array<JoinPart.IJoinPartArgs>;
    skewKeys?: Map<string, Array<string>>;
    onlineExternalParts?: Array<ExternalPart.IExternalPartArgs>;
    labelPart?: LabelPart.ILabelPartArgs;
    bootstrapParts?: Array<BootstrapPart.IBootstrapPartArgs>;
    rowIds?: Array<string>;
    derivations?: Array<Derivation.IDerivationArgs>;
}
export const JoinCodec: thrift.IStructCodec<IJoinArgs, IJoin> = {
    encode(args: IJoinArgs, output: thrift.TProtocol): void {
        const obj: any = {
            metaData: args.metaData,
            left: args.left,
            joinParts: args.joinParts,
            skewKeys: args.skewKeys,
            onlineExternalParts: args.onlineExternalParts,
            labelPart: args.labelPart,
            bootstrapParts: args.bootstrapParts,
            rowIds: args.rowIds,
            derivations: args.derivations
        };
        output.writeStructBegin("Join");
        if (obj.metaData != null) {
            output.writeFieldBegin("metaData", thrift.TType.STRUCT, 1);
            MetaData.MetaDataCodec.encode(obj.metaData, output);
            output.writeFieldEnd();
        }
        if (obj.left != null) {
            output.writeFieldBegin("left", thrift.TType.STRUCT, 2);
            Source.SourceCodec.encode(obj.left, output);
            output.writeFieldEnd();
        }
        if (obj.joinParts != null) {
            output.writeFieldBegin("joinParts", thrift.TType.LIST, 3);
            output.writeListBegin(thrift.TType.STRUCT, obj.joinParts.length);
            obj.joinParts.forEach((value_1: JoinPart.IJoinPartArgs): void => {
                JoinPart.JoinPartCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.skewKeys != null) {
            output.writeFieldBegin("skewKeys", thrift.TType.MAP, 4);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.LIST, obj.skewKeys.size);
            obj.skewKeys.forEach((value_2: Array<string>, key_1: string): void => {
                output.writeString(key_1);
                output.writeListBegin(thrift.TType.STRING, value_2.length);
                value_2.forEach((value_3: string): void => {
                    output.writeString(value_3);
                });
                output.writeListEnd();
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (obj.onlineExternalParts != null) {
            output.writeFieldBegin("onlineExternalParts", thrift.TType.LIST, 5);
            output.writeListBegin(thrift.TType.STRUCT, obj.onlineExternalParts.length);
            obj.onlineExternalParts.forEach((value_4: ExternalPart.IExternalPartArgs): void => {
                ExternalPart.ExternalPartCodec.encode(value_4, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.labelPart != null) {
            output.writeFieldBegin("labelPart", thrift.TType.STRUCT, 6);
            LabelPart.LabelPartCodec.encode(obj.labelPart, output);
            output.writeFieldEnd();
        }
        if (obj.bootstrapParts != null) {
            output.writeFieldBegin("bootstrapParts", thrift.TType.LIST, 7);
            output.writeListBegin(thrift.TType.STRUCT, obj.bootstrapParts.length);
            obj.bootstrapParts.forEach((value_5: BootstrapPart.IBootstrapPartArgs): void => {
                BootstrapPart.BootstrapPartCodec.encode(value_5, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.rowIds != null) {
            output.writeFieldBegin("rowIds", thrift.TType.LIST, 8);
            output.writeListBegin(thrift.TType.STRING, obj.rowIds.length);
            obj.rowIds.forEach((value_6: string): void => {
                output.writeString(value_6);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.derivations != null) {
            output.writeFieldBegin("derivations", thrift.TType.LIST, 9);
            output.writeListBegin(thrift.TType.STRUCT, obj.derivations.length);
            obj.derivations.forEach((value_7: Derivation.IDerivationArgs): void => {
                Derivation.DerivationCodec.encode(value_7, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IJoin {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_8: MetaData.IMetaData = MetaData.MetaDataCodec.decode(input);
                        _args.metaData = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_9: Source.ISource = Source.SourceCodec.decode(input);
                        _args.left = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.LIST) {
                        const value_10: Array<JoinPart.IJoinPart> = new Array<JoinPart.IJoinPart>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_11: JoinPart.IJoinPart = JoinPart.JoinPartCodec.decode(input);
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.joinParts = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.MAP) {
                        const value_12: Map<string, Array<string>> = new Map<string, Array<string>>();
                        const metadata_2: thrift.IThriftMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_2: string = input.readString();
                            const value_13: Array<string> = new Array<string>();
                            const metadata_3: thrift.IThriftList = input.readListBegin();
                            const size_3: number = metadata_3.size;
                            for (let i_3: number = 0; i_3 < size_3; i_3++) {
                                const value_14: string = input.readString();
                                value_13.push(value_14);
                            }
                            input.readListEnd();
                            value_12.set(key_2, value_13);
                        }
                        input.readMapEnd();
                        _args.skewKeys = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.LIST) {
                        const value_15: Array<ExternalPart.IExternalPart> = new Array<ExternalPart.IExternalPart>();
                        const metadata_4: thrift.IThriftList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_16: ExternalPart.IExternalPart = ExternalPart.ExternalPartCodec.decode(input);
                            value_15.push(value_16);
                        }
                        input.readListEnd();
                        _args.onlineExternalParts = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_17: LabelPart.ILabelPart = LabelPart.LabelPartCodec.decode(input);
                        _args.labelPart = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.LIST) {
                        const value_18: Array<BootstrapPart.IBootstrapPart> = new Array<BootstrapPart.IBootstrapPart>();
                        const metadata_5: thrift.IThriftList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_19: BootstrapPart.IBootstrapPart = BootstrapPart.BootstrapPartCodec.decode(input);
                            value_18.push(value_19);
                        }
                        input.readListEnd();
                        _args.bootstrapParts = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.LIST) {
                        const value_20: Array<string> = new Array<string>();
                        const metadata_6: thrift.IThriftList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_21: string = input.readString();
                            value_20.push(value_21);
                        }
                        input.readListEnd();
                        _args.rowIds = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.LIST) {
                        const value_22: Array<Derivation.IDerivation> = new Array<Derivation.IDerivation>();
                        const metadata_7: thrift.IThriftList = input.readListBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const value_23: Derivation.IDerivation = Derivation.DerivationCodec.decode(input);
                            value_22.push(value_23);
                        }
                        input.readListEnd();
                        _args.derivations = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            metaData: _args.metaData,
            left: _args.left,
            joinParts: _args.joinParts,
            skewKeys: _args.skewKeys,
            onlineExternalParts: _args.onlineExternalParts,
            labelPart: _args.labelPart,
            bootstrapParts: _args.bootstrapParts,
            rowIds: _args.rowIds,
            derivations: _args.derivations
        };
    }
};
export class Join extends thrift.StructLike implements IJoin {
    public metaData?: MetaData.IMetaData;
    public left?: Source.ISource;
    public joinParts?: Array<JoinPart.IJoinPart>;
    public skewKeys?: Map<string, Array<string>>;
    public onlineExternalParts?: Array<ExternalPart.IExternalPart>;
    public labelPart?: LabelPart.ILabelPart;
    public bootstrapParts?: Array<BootstrapPart.IBootstrapPart>;
    public rowIds?: Array<string>;
    public derivations?: Array<Derivation.IDerivation>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IJoinArgs = {}) {
        super();
        if (args.metaData != null) {
            const value_24: MetaData.IMetaData = new MetaData.MetaData(args.metaData);
            this.metaData = value_24;
        }
        if (args.left != null) {
            const value_25: Source.ISource = new Source.Source(args.left);
            this.left = value_25;
        }
        if (args.joinParts != null) {
            const value_26: Array<JoinPart.IJoinPart> = new Array<JoinPart.IJoinPart>();
            args.joinParts.forEach((value_33: JoinPart.IJoinPartArgs): void => {
                const value_34: JoinPart.IJoinPart = new JoinPart.JoinPart(value_33);
                value_26.push(value_34);
            });
            this.joinParts = value_26;
        }
        if (args.skewKeys != null) {
            const value_27: Map<string, Array<string>> = new Map<string, Array<string>>();
            args.skewKeys.forEach((value_35: Array<string>, key_3: string): void => {
                const value_36: Array<string> = new Array<string>();
                value_35.forEach((value_37: string): void => {
                    const value_38: string = value_37;
                    value_36.push(value_38);
                });
                const key_4: string = key_3;
                value_27.set(key_4, value_36);
            });
            this.skewKeys = value_27;
        }
        if (args.onlineExternalParts != null) {
            const value_28: Array<ExternalPart.IExternalPart> = new Array<ExternalPart.IExternalPart>();
            args.onlineExternalParts.forEach((value_39: ExternalPart.IExternalPartArgs): void => {
                const value_40: ExternalPart.IExternalPart = new ExternalPart.ExternalPart(value_39);
                value_28.push(value_40);
            });
            this.onlineExternalParts = value_28;
        }
        if (args.labelPart != null) {
            const value_29: LabelPart.ILabelPart = new LabelPart.LabelPart(args.labelPart);
            this.labelPart = value_29;
        }
        if (args.bootstrapParts != null) {
            const value_30: Array<BootstrapPart.IBootstrapPart> = new Array<BootstrapPart.IBootstrapPart>();
            args.bootstrapParts.forEach((value_41: BootstrapPart.IBootstrapPartArgs): void => {
                const value_42: BootstrapPart.IBootstrapPart = new BootstrapPart.BootstrapPart(value_41);
                value_30.push(value_42);
            });
            this.bootstrapParts = value_30;
        }
        if (args.rowIds != null) {
            const value_31: Array<string> = new Array<string>();
            args.rowIds.forEach((value_43: string): void => {
                const value_44: string = value_43;
                value_31.push(value_44);
            });
            this.rowIds = value_31;
        }
        if (args.derivations != null) {
            const value_32: Array<Derivation.IDerivation> = new Array<Derivation.IDerivation>();
            args.derivations.forEach((value_45: Derivation.IDerivationArgs): void => {
                const value_46: Derivation.IDerivation = new Derivation.Derivation(value_45);
                value_32.push(value_46);
            });
            this.derivations = value_32;
        }
    }
    public static read(input: thrift.TProtocol): Join {
        return new Join(JoinCodec.decode(input));
    }
    public static write(args: IJoinArgs, output: thrift.TProtocol): void {
        return JoinCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return JoinCodec.encode(this, output);
    }
}
