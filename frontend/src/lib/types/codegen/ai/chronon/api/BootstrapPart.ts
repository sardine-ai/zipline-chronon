/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as MetaData from "./MetaData";
import * as Query from "./Query";
export interface IBootstrapPart {
    metaData?: MetaData.IMetaData;
    table?: string;
    query?: Query.IQuery;
    keyColumns?: Array<string>;
}
export interface IBootstrapPartArgs {
    metaData?: MetaData.IMetaDataArgs;
    table?: string;
    query?: Query.IQueryArgs;
    keyColumns?: Array<string>;
}
export const BootstrapPartCodec: thrift.IStructCodec<IBootstrapPartArgs, IBootstrapPart> = {
    encode(args: IBootstrapPartArgs, output: thrift.TProtocol): void {
        const obj: any = {
            metaData: args.metaData,
            table: args.table,
            query: args.query,
            keyColumns: args.keyColumns
        };
        output.writeStructBegin("BootstrapPart");
        if (obj.metaData != null) {
            output.writeFieldBegin("metaData", thrift.TType.STRUCT, 1);
            MetaData.MetaDataCodec.encode(obj.metaData, output);
            output.writeFieldEnd();
        }
        if (obj.table != null) {
            output.writeFieldBegin("table", thrift.TType.STRING, 2);
            output.writeString(obj.table);
            output.writeFieldEnd();
        }
        if (obj.query != null) {
            output.writeFieldBegin("query", thrift.TType.STRUCT, 3);
            Query.QueryCodec.encode(obj.query, output);
            output.writeFieldEnd();
        }
        if (obj.keyColumns != null) {
            output.writeFieldBegin("keyColumns", thrift.TType.LIST, 4);
            output.writeListBegin(thrift.TType.STRING, obj.keyColumns.length);
            obj.keyColumns.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IBootstrapPart {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_2: MetaData.IMetaData = MetaData.MetaDataCodec.decode(input);
                        _args.metaData = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.table = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_4: Query.IQuery = Query.QueryCodec.decode(input);
                        _args.query = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.LIST) {
                        const value_5: Array<string> = new Array<string>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: string = input.readString();
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.keyColumns = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            metaData: _args.metaData,
            table: _args.table,
            query: _args.query,
            keyColumns: _args.keyColumns
        };
    }
};
export class BootstrapPart extends thrift.StructLike implements IBootstrapPart {
    public metaData?: MetaData.IMetaData;
    public table?: string;
    public query?: Query.IQuery;
    public keyColumns?: Array<string>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IBootstrapPartArgs = {}) {
        super();
        if (args.metaData != null) {
            const value_7: MetaData.IMetaData = new MetaData.MetaData(args.metaData);
            this.metaData = value_7;
        }
        if (args.table != null) {
            const value_8: string = args.table;
            this.table = value_8;
        }
        if (args.query != null) {
            const value_9: Query.IQuery = new Query.Query(args.query);
            this.query = value_9;
        }
        if (args.keyColumns != null) {
            const value_10: Array<string> = new Array<string>();
            args.keyColumns.forEach((value_11: string): void => {
                const value_12: string = value_11;
                value_10.push(value_12);
            });
            this.keyColumns = value_10;
        }
    }
    public static read(input: thrift.TProtocol): BootstrapPart {
        return new BootstrapPart(BootstrapPartCodec.decode(input));
    }
    public static write(args: IBootstrapPartArgs, output: thrift.TProtocol): void {
        return BootstrapPartCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return BootstrapPartCodec.encode(this, output);
    }
}
