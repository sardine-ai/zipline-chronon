/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as MetaData from "./MetaData";
import * as TDataType from "./TDataType";
export interface IExternalSource {
    metadata?: MetaData.IMetaData;
    keySchema?: TDataType.ITDataType;
    valueSchema?: TDataType.ITDataType;
}
export interface IExternalSourceArgs {
    metadata?: MetaData.IMetaDataArgs;
    keySchema?: TDataType.ITDataTypeArgs;
    valueSchema?: TDataType.ITDataTypeArgs;
}
export const ExternalSourceCodec: thrift.IStructCodec<IExternalSourceArgs, IExternalSource> = {
    encode(args: IExternalSourceArgs, output: thrift.TProtocol): void {
        const obj: any = {
            metadata: args.metadata,
            keySchema: args.keySchema,
            valueSchema: args.valueSchema
        };
        output.writeStructBegin("ExternalSource");
        if (obj.metadata != null) {
            output.writeFieldBegin("metadata", thrift.TType.STRUCT, 1);
            MetaData.MetaDataCodec.encode(obj.metadata, output);
            output.writeFieldEnd();
        }
        if (obj.keySchema != null) {
            output.writeFieldBegin("keySchema", thrift.TType.STRUCT, 2);
            TDataType.TDataTypeCodec.encode(obj.keySchema, output);
            output.writeFieldEnd();
        }
        if (obj.valueSchema != null) {
            output.writeFieldBegin("valueSchema", thrift.TType.STRUCT, 3);
            TDataType.TDataTypeCodec.encode(obj.valueSchema, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IExternalSource {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_1: MetaData.IMetaData = MetaData.MetaDataCodec.decode(input);
                        _args.metadata = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_2: TDataType.ITDataType = TDataType.TDataTypeCodec.decode(input);
                        _args.keySchema = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_3: TDataType.ITDataType = TDataType.TDataTypeCodec.decode(input);
                        _args.valueSchema = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            metadata: _args.metadata,
            keySchema: _args.keySchema,
            valueSchema: _args.valueSchema
        };
    }
};
export class ExternalSource extends thrift.StructLike implements IExternalSource {
    public metadata?: MetaData.IMetaData;
    public keySchema?: TDataType.ITDataType;
    public valueSchema?: TDataType.ITDataType;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IExternalSourceArgs = {}) {
        super();
        if (args.metadata != null) {
            const value_4: MetaData.IMetaData = new MetaData.MetaData(args.metadata);
            this.metadata = value_4;
        }
        if (args.keySchema != null) {
            const value_5: TDataType.ITDataType = new TDataType.TDataType(args.keySchema);
            this.keySchema = value_5;
        }
        if (args.valueSchema != null) {
            const value_6: TDataType.ITDataType = new TDataType.TDataType(args.valueSchema);
            this.valueSchema = value_6;
        }
    }
    public static read(input: thrift.TProtocol): ExternalSource {
        return new ExternalSource(ExternalSourceCodec.decode(input));
    }
    public static write(args: IExternalSourceArgs, output: thrift.TProtocol): void {
        return ExternalSourceCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ExternalSourceCodec.encode(this, output);
    }
}
