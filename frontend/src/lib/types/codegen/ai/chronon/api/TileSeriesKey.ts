/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface ITileSeriesKey {
    column?: string;
    slice?: string;
    groupName?: string;
    nodeName?: string;
}
export interface ITileSeriesKeyArgs {
    column?: string;
    slice?: string;
    groupName?: string;
    nodeName?: string;
}
export const TileSeriesKeyCodec: thrift.IStructCodec<ITileSeriesKeyArgs, ITileSeriesKey> = {
    encode(args: ITileSeriesKeyArgs, output: thrift.TProtocol): void {
        const obj: any = {
            column: args.column,
            slice: args.slice,
            groupName: args.groupName,
            nodeName: args.nodeName
        };
        output.writeStructBegin("TileSeriesKey");
        if (obj.column != null) {
            output.writeFieldBegin("column", thrift.TType.STRING, 1);
            output.writeString(obj.column);
            output.writeFieldEnd();
        }
        if (obj.slice != null) {
            output.writeFieldBegin("slice", thrift.TType.STRING, 2);
            output.writeString(obj.slice);
            output.writeFieldEnd();
        }
        if (obj.groupName != null) {
            output.writeFieldBegin("groupName", thrift.TType.STRING, 3);
            output.writeString(obj.groupName);
            output.writeFieldEnd();
        }
        if (obj.nodeName != null) {
            output.writeFieldBegin("nodeName", thrift.TType.STRING, 4);
            output.writeString(obj.nodeName);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ITileSeriesKey {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.column = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.slice = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.groupName = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.nodeName = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            column: _args.column,
            slice: _args.slice,
            groupName: _args.groupName,
            nodeName: _args.nodeName
        };
    }
};
export class TileSeriesKey extends thrift.StructLike implements ITileSeriesKey {
    public column?: string;
    public slice?: string;
    public groupName?: string;
    public nodeName?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ITileSeriesKeyArgs = {}) {
        super();
        if (args.column != null) {
            const value_5: string = args.column;
            this.column = value_5;
        }
        if (args.slice != null) {
            const value_6: string = args.slice;
            this.slice = value_6;
        }
        if (args.groupName != null) {
            const value_7: string = args.groupName;
            this.groupName = value_7;
        }
        if (args.nodeName != null) {
            const value_8: string = args.nodeName;
            this.nodeName = value_8;
        }
    }
    public static read(input: thrift.TProtocol): TileSeriesKey {
        return new TileSeriesKey(TileSeriesKeyCodec.decode(input));
    }
    public static write(args: ITileSeriesKeyArgs, output: thrift.TProtocol): void {
        return TileSeriesKeyCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return TileSeriesKeyCodec.encode(this, output);
    }
}
