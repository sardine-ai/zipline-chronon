/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Cardinality from "./Cardinality";
import * as Window from "./Window";
import * as DriftMetric from "./DriftMetric";
export interface IDriftSpec {
    slices?: Array<string>;
    derivations?: Map<string, string>;
    columnCardinalityHints?: Map<string, Cardinality.Cardinality>;
    tileSize?: Window.IWindow;
    lookbackWindows?: Array<Window.IWindow>;
    driftMetric?: DriftMetric.DriftMetric;
}
export interface IDriftSpecArgs {
    slices?: Array<string>;
    derivations?: Map<string, string>;
    columnCardinalityHints?: Map<string, Cardinality.Cardinality>;
    tileSize?: Window.IWindowArgs;
    lookbackWindows?: Array<Window.IWindowArgs>;
    driftMetric?: DriftMetric.DriftMetric;
}
export const DriftSpecCodec: thrift.IStructCodec<IDriftSpecArgs, IDriftSpec> = {
    encode(args: IDriftSpecArgs, output: thrift.TProtocol): void {
        const obj: any = {
            slices: args.slices,
            derivations: args.derivations,
            columnCardinalityHints: args.columnCardinalityHints,
            tileSize: args.tileSize,
            lookbackWindows: args.lookbackWindows,
            driftMetric: (args.driftMetric != null ? args.driftMetric : DriftMetric.DriftMetric.JENSEN_SHANNON)
        };
        output.writeStructBegin("DriftSpec");
        if (obj.slices != null) {
            output.writeFieldBegin("slices", thrift.TType.LIST, 1);
            output.writeListBegin(thrift.TType.STRING, obj.slices.length);
            obj.slices.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.derivations != null) {
            output.writeFieldBegin("derivations", thrift.TType.MAP, 2);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.STRING, obj.derivations.size);
            obj.derivations.forEach((value_2: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_2);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (obj.columnCardinalityHints != null) {
            output.writeFieldBegin("columnCardinalityHints", thrift.TType.MAP, 3);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.I32, obj.columnCardinalityHints.size);
            obj.columnCardinalityHints.forEach((value_3: Cardinality.Cardinality, key_2: string): void => {
                output.writeString(key_2);
                output.writeI32(value_3);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (obj.tileSize != null) {
            output.writeFieldBegin("tileSize", thrift.TType.STRUCT, 4);
            Window.WindowCodec.encode(obj.tileSize, output);
            output.writeFieldEnd();
        }
        if (obj.lookbackWindows != null) {
            output.writeFieldBegin("lookbackWindows", thrift.TType.LIST, 5);
            output.writeListBegin(thrift.TType.STRUCT, obj.lookbackWindows.length);
            obj.lookbackWindows.forEach((value_4: Window.IWindowArgs): void => {
                Window.WindowCodec.encode(value_4, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.driftMetric != null) {
            output.writeFieldBegin("driftMetric", thrift.TType.I32, 6);
            output.writeI32(obj.driftMetric);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IDriftSpec {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.LIST) {
                        const value_5: Array<string> = new Array<string>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: string = input.readString();
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.slices = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.MAP) {
                        const value_7: Map<string, string> = new Map<string, string>();
                        const metadata_2: thrift.IThriftMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_3: string = input.readString();
                            const value_8: string = input.readString();
                            value_7.set(key_3, value_8);
                        }
                        input.readMapEnd();
                        _args.derivations = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.MAP) {
                        const value_9: Map<string, Cardinality.Cardinality> = new Map<string, Cardinality.Cardinality>();
                        const metadata_3: thrift.IThriftMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_4: string = input.readString();
                            const value_10: Cardinality.Cardinality = input.readI32();
                            value_9.set(key_4, value_10);
                        }
                        input.readMapEnd();
                        _args.columnCardinalityHints = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_11: Window.IWindow = Window.WindowCodec.decode(input);
                        _args.tileSize = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.LIST) {
                        const value_12: Array<Window.IWindow> = new Array<Window.IWindow>();
                        const metadata_4: thrift.IThriftList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_13: Window.IWindow = Window.WindowCodec.decode(input);
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.lookbackWindows = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.I32) {
                        const value_14: DriftMetric.DriftMetric = input.readI32();
                        _args.driftMetric = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            slices: _args.slices,
            derivations: _args.derivations,
            columnCardinalityHints: _args.columnCardinalityHints,
            tileSize: _args.tileSize,
            lookbackWindows: _args.lookbackWindows,
            driftMetric: (_args.driftMetric != null ? _args.driftMetric : DriftMetric.DriftMetric.JENSEN_SHANNON)
        };
    }
};
export class DriftSpec extends thrift.StructLike implements IDriftSpec {
    public slices?: Array<string>;
    public derivations?: Map<string, string>;
    public columnCardinalityHints?: Map<string, Cardinality.Cardinality>;
    public tileSize?: Window.IWindow;
    public lookbackWindows?: Array<Window.IWindow>;
    public driftMetric?: DriftMetric.DriftMetric = DriftMetric.DriftMetric.JENSEN_SHANNON;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IDriftSpecArgs = {}) {
        super();
        if (args.slices != null) {
            const value_15: Array<string> = new Array<string>();
            args.slices.forEach((value_21: string): void => {
                const value_22: string = value_21;
                value_15.push(value_22);
            });
            this.slices = value_15;
        }
        if (args.derivations != null) {
            const value_16: Map<string, string> = new Map<string, string>();
            args.derivations.forEach((value_23: string, key_5: string): void => {
                const value_24: string = value_23;
                const key_6: string = key_5;
                value_16.set(key_6, value_24);
            });
            this.derivations = value_16;
        }
        if (args.columnCardinalityHints != null) {
            const value_17: Map<string, Cardinality.Cardinality> = new Map<string, Cardinality.Cardinality>();
            args.columnCardinalityHints.forEach((value_25: Cardinality.Cardinality, key_7: string): void => {
                const value_26: Cardinality.Cardinality = value_25;
                const key_8: string = key_7;
                value_17.set(key_8, value_26);
            });
            this.columnCardinalityHints = value_17;
        }
        if (args.tileSize != null) {
            const value_18: Window.IWindow = new Window.Window(args.tileSize);
            this.tileSize = value_18;
        }
        if (args.lookbackWindows != null) {
            const value_19: Array<Window.IWindow> = new Array<Window.IWindow>();
            args.lookbackWindows.forEach((value_27: Window.IWindowArgs): void => {
                const value_28: Window.IWindow = new Window.Window(value_27);
                value_19.push(value_28);
            });
            this.lookbackWindows = value_19;
        }
        if (args.driftMetric != null) {
            const value_20: DriftMetric.DriftMetric = args.driftMetric;
            this.driftMetric = value_20;
        }
    }
    public static read(input: thrift.TProtocol): DriftSpec {
        return new DriftSpec(DriftSpecCodec.decode(input));
    }
    public static write(args: IDriftSpecArgs, output: thrift.TProtocol): void {
        return DriftSpecCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return DriftSpecCodec.encode(this, output);
    }
}
