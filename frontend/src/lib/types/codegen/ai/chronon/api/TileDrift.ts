/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface ITileDrift {
    percentileDrift?: number;
    histogramDrift?: number;
    countChangePercent?: number;
    nullRatioChangePercent?: number;
    innerCountChangePercent?: number;
    innerNullCountChangePercent?: number;
    lengthPercentilesDrift?: number;
    stringLengthPercentilesDrift?: number;
}
export interface ITileDriftArgs {
    percentileDrift?: number;
    histogramDrift?: number;
    countChangePercent?: number;
    nullRatioChangePercent?: number;
    innerCountChangePercent?: number;
    innerNullCountChangePercent?: number;
    lengthPercentilesDrift?: number;
    stringLengthPercentilesDrift?: number;
}
export const TileDriftCodec: thrift.IStructCodec<ITileDriftArgs, ITileDrift> = {
    encode(args: ITileDriftArgs, output: thrift.TProtocol): void {
        const obj: any = {
            percentileDrift: args.percentileDrift,
            histogramDrift: args.histogramDrift,
            countChangePercent: args.countChangePercent,
            nullRatioChangePercent: args.nullRatioChangePercent,
            innerCountChangePercent: args.innerCountChangePercent,
            innerNullCountChangePercent: args.innerNullCountChangePercent,
            lengthPercentilesDrift: args.lengthPercentilesDrift,
            stringLengthPercentilesDrift: args.stringLengthPercentilesDrift
        };
        output.writeStructBegin("TileDrift");
        if (obj.percentileDrift != null) {
            output.writeFieldBegin("percentileDrift", thrift.TType.DOUBLE, 1);
            output.writeDouble(obj.percentileDrift);
            output.writeFieldEnd();
        }
        if (obj.histogramDrift != null) {
            output.writeFieldBegin("histogramDrift", thrift.TType.DOUBLE, 2);
            output.writeDouble(obj.histogramDrift);
            output.writeFieldEnd();
        }
        if (obj.countChangePercent != null) {
            output.writeFieldBegin("countChangePercent", thrift.TType.DOUBLE, 3);
            output.writeDouble(obj.countChangePercent);
            output.writeFieldEnd();
        }
        if (obj.nullRatioChangePercent != null) {
            output.writeFieldBegin("nullRatioChangePercent", thrift.TType.DOUBLE, 4);
            output.writeDouble(obj.nullRatioChangePercent);
            output.writeFieldEnd();
        }
        if (obj.innerCountChangePercent != null) {
            output.writeFieldBegin("innerCountChangePercent", thrift.TType.DOUBLE, 5);
            output.writeDouble(obj.innerCountChangePercent);
            output.writeFieldEnd();
        }
        if (obj.innerNullCountChangePercent != null) {
            output.writeFieldBegin("innerNullCountChangePercent", thrift.TType.DOUBLE, 6);
            output.writeDouble(obj.innerNullCountChangePercent);
            output.writeFieldEnd();
        }
        if (obj.lengthPercentilesDrift != null) {
            output.writeFieldBegin("lengthPercentilesDrift", thrift.TType.DOUBLE, 7);
            output.writeDouble(obj.lengthPercentilesDrift);
            output.writeFieldEnd();
        }
        if (obj.stringLengthPercentilesDrift != null) {
            output.writeFieldBegin("stringLengthPercentilesDrift", thrift.TType.DOUBLE, 8);
            output.writeDouble(obj.stringLengthPercentilesDrift);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ITileDrift {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.DOUBLE) {
                        const value_1: number = input.readDouble();
                        _args.percentileDrift = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.DOUBLE) {
                        const value_2: number = input.readDouble();
                        _args.histogramDrift = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.DOUBLE) {
                        const value_3: number = input.readDouble();
                        _args.countChangePercent = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.DOUBLE) {
                        const value_4: number = input.readDouble();
                        _args.nullRatioChangePercent = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.DOUBLE) {
                        const value_5: number = input.readDouble();
                        _args.innerCountChangePercent = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.DOUBLE) {
                        const value_6: number = input.readDouble();
                        _args.innerNullCountChangePercent = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.DOUBLE) {
                        const value_7: number = input.readDouble();
                        _args.lengthPercentilesDrift = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.DOUBLE) {
                        const value_8: number = input.readDouble();
                        _args.stringLengthPercentilesDrift = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            percentileDrift: _args.percentileDrift,
            histogramDrift: _args.histogramDrift,
            countChangePercent: _args.countChangePercent,
            nullRatioChangePercent: _args.nullRatioChangePercent,
            innerCountChangePercent: _args.innerCountChangePercent,
            innerNullCountChangePercent: _args.innerNullCountChangePercent,
            lengthPercentilesDrift: _args.lengthPercentilesDrift,
            stringLengthPercentilesDrift: _args.stringLengthPercentilesDrift
        };
    }
};
export class TileDrift extends thrift.StructLike implements ITileDrift {
    public percentileDrift?: number;
    public histogramDrift?: number;
    public countChangePercent?: number;
    public nullRatioChangePercent?: number;
    public innerCountChangePercent?: number;
    public innerNullCountChangePercent?: number;
    public lengthPercentilesDrift?: number;
    public stringLengthPercentilesDrift?: number;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ITileDriftArgs = {}) {
        super();
        if (args.percentileDrift != null) {
            const value_9: number = args.percentileDrift;
            this.percentileDrift = value_9;
        }
        if (args.histogramDrift != null) {
            const value_10: number = args.histogramDrift;
            this.histogramDrift = value_10;
        }
        if (args.countChangePercent != null) {
            const value_11: number = args.countChangePercent;
            this.countChangePercent = value_11;
        }
        if (args.nullRatioChangePercent != null) {
            const value_12: number = args.nullRatioChangePercent;
            this.nullRatioChangePercent = value_12;
        }
        if (args.innerCountChangePercent != null) {
            const value_13: number = args.innerCountChangePercent;
            this.innerCountChangePercent = value_13;
        }
        if (args.innerNullCountChangePercent != null) {
            const value_14: number = args.innerNullCountChangePercent;
            this.innerNullCountChangePercent = value_14;
        }
        if (args.lengthPercentilesDrift != null) {
            const value_15: number = args.lengthPercentilesDrift;
            this.lengthPercentilesDrift = value_15;
        }
        if (args.stringLengthPercentilesDrift != null) {
            const value_16: number = args.stringLengthPercentilesDrift;
            this.stringLengthPercentilesDrift = value_16;
        }
    }
    public static read(input: thrift.TProtocol): TileDrift {
        return new TileDrift(TileDriftCodec.decode(input));
    }
    public static write(args: ITileDriftArgs, output: thrift.TProtocol): void {
        return TileDriftCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return TileDriftCodec.encode(this, output);
    }
}
