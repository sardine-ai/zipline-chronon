/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as MetaData from "./MetaData";
import * as Source from "./Source";
import * as Aggregation from "./Aggregation";
import * as Accuracy from "./Accuracy";
import * as Derivation from "./Derivation";
export interface IGroupBy {
    metaData?: MetaData.IMetaData;
    sources?: Array<Source.ISource>;
    keyColumns?: Array<string>;
    aggregations?: Array<Aggregation.IAggregation>;
    accuracy?: Accuracy.Accuracy;
    backfillStartDate?: string;
    derivations?: Array<Derivation.IDerivation>;
}
export interface IGroupByArgs {
    metaData?: MetaData.IMetaDataArgs;
    sources?: Array<Source.ISourceArgs>;
    keyColumns?: Array<string>;
    aggregations?: Array<Aggregation.IAggregationArgs>;
    accuracy?: Accuracy.Accuracy;
    backfillStartDate?: string;
    derivations?: Array<Derivation.IDerivationArgs>;
}
export const GroupByCodec: thrift.IStructCodec<IGroupByArgs, IGroupBy> = {
    encode(args: IGroupByArgs, output: thrift.TProtocol): void {
        const obj: any = {
            metaData: args.metaData,
            sources: args.sources,
            keyColumns: args.keyColumns,
            aggregations: args.aggregations,
            accuracy: args.accuracy,
            backfillStartDate: args.backfillStartDate,
            derivations: args.derivations
        };
        output.writeStructBegin("GroupBy");
        if (obj.metaData != null) {
            output.writeFieldBegin("metaData", thrift.TType.STRUCT, 1);
            MetaData.MetaDataCodec.encode(obj.metaData, output);
            output.writeFieldEnd();
        }
        if (obj.sources != null) {
            output.writeFieldBegin("sources", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.STRUCT, obj.sources.length);
            obj.sources.forEach((value_1: Source.ISourceArgs): void => {
                Source.SourceCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.keyColumns != null) {
            output.writeFieldBegin("keyColumns", thrift.TType.LIST, 3);
            output.writeListBegin(thrift.TType.STRING, obj.keyColumns.length);
            obj.keyColumns.forEach((value_2: string): void => {
                output.writeString(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.aggregations != null) {
            output.writeFieldBegin("aggregations", thrift.TType.LIST, 4);
            output.writeListBegin(thrift.TType.STRUCT, obj.aggregations.length);
            obj.aggregations.forEach((value_3: Aggregation.IAggregationArgs): void => {
                Aggregation.AggregationCodec.encode(value_3, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.accuracy != null) {
            output.writeFieldBegin("accuracy", thrift.TType.I32, 5);
            output.writeI32(obj.accuracy);
            output.writeFieldEnd();
        }
        if (obj.backfillStartDate != null) {
            output.writeFieldBegin("backfillStartDate", thrift.TType.STRING, 6);
            output.writeString(obj.backfillStartDate);
            output.writeFieldEnd();
        }
        if (obj.derivations != null) {
            output.writeFieldBegin("derivations", thrift.TType.LIST, 7);
            output.writeListBegin(thrift.TType.STRUCT, obj.derivations.length);
            obj.derivations.forEach((value_4: Derivation.IDerivationArgs): void => {
                Derivation.DerivationCodec.encode(value_4, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IGroupBy {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_5: MetaData.IMetaData = MetaData.MetaDataCodec.decode(input);
                        _args.metaData = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_6: Array<Source.ISource> = new Array<Source.ISource>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_7: Source.ISource = Source.SourceCodec.decode(input);
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.sources = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.LIST) {
                        const value_8: Array<string> = new Array<string>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_9: string = input.readString();
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.keyColumns = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.LIST) {
                        const value_10: Array<Aggregation.IAggregation> = new Array<Aggregation.IAggregation>();
                        const metadata_3: thrift.IThriftList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_11: Aggregation.IAggregation = Aggregation.AggregationCodec.decode(input);
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.aggregations = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.I32) {
                        const value_12: Accuracy.Accuracy = input.readI32();
                        _args.accuracy = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_13: string = input.readString();
                        _args.backfillStartDate = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.LIST) {
                        const value_14: Array<Derivation.IDerivation> = new Array<Derivation.IDerivation>();
                        const metadata_4: thrift.IThriftList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_15: Derivation.IDerivation = Derivation.DerivationCodec.decode(input);
                            value_14.push(value_15);
                        }
                        input.readListEnd();
                        _args.derivations = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            metaData: _args.metaData,
            sources: _args.sources,
            keyColumns: _args.keyColumns,
            aggregations: _args.aggregations,
            accuracy: _args.accuracy,
            backfillStartDate: _args.backfillStartDate,
            derivations: _args.derivations
        };
    }
};
export class GroupBy extends thrift.StructLike implements IGroupBy {
    public metaData?: MetaData.IMetaData;
    public sources?: Array<Source.ISource>;
    public keyColumns?: Array<string>;
    public aggregations?: Array<Aggregation.IAggregation>;
    public accuracy?: Accuracy.Accuracy;
    public backfillStartDate?: string;
    public derivations?: Array<Derivation.IDerivation>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IGroupByArgs = {}) {
        super();
        if (args.metaData != null) {
            const value_16: MetaData.IMetaData = new MetaData.MetaData(args.metaData);
            this.metaData = value_16;
        }
        if (args.sources != null) {
            const value_17: Array<Source.ISource> = new Array<Source.ISource>();
            args.sources.forEach((value_23: Source.ISourceArgs): void => {
                const value_24: Source.ISource = new Source.Source(value_23);
                value_17.push(value_24);
            });
            this.sources = value_17;
        }
        if (args.keyColumns != null) {
            const value_18: Array<string> = new Array<string>();
            args.keyColumns.forEach((value_25: string): void => {
                const value_26: string = value_25;
                value_18.push(value_26);
            });
            this.keyColumns = value_18;
        }
        if (args.aggregations != null) {
            const value_19: Array<Aggregation.IAggregation> = new Array<Aggregation.IAggregation>();
            args.aggregations.forEach((value_27: Aggregation.IAggregationArgs): void => {
                const value_28: Aggregation.IAggregation = new Aggregation.Aggregation(value_27);
                value_19.push(value_28);
            });
            this.aggregations = value_19;
        }
        if (args.accuracy != null) {
            const value_20: Accuracy.Accuracy = args.accuracy;
            this.accuracy = value_20;
        }
        if (args.backfillStartDate != null) {
            const value_21: string = args.backfillStartDate;
            this.backfillStartDate = value_21;
        }
        if (args.derivations != null) {
            const value_22: Array<Derivation.IDerivation> = new Array<Derivation.IDerivation>();
            args.derivations.forEach((value_29: Derivation.IDerivationArgs): void => {
                const value_30: Derivation.IDerivation = new Derivation.Derivation(value_29);
                value_22.push(value_30);
            });
            this.derivations = value_22;
        }
    }
    public static read(input: thrift.TProtocol): GroupBy {
        return new GroupBy(GroupByCodec.decode(input));
    }
    public static write(args: IGroupByArgs, output: thrift.TProtocol): void {
        return GroupByCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return GroupByCodec.encode(this, output);
    }
}
