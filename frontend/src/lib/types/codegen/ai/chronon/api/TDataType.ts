/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as DataKind from "./DataKind";
import * as DataField from "./DataField";
export interface ITDataType {
    kind?: DataKind.DataKind;
    params?: Array<DataField.IDataField>;
    name?: string;
}
export interface ITDataTypeArgs {
    kind?: DataKind.DataKind;
    params?: Array<DataField.IDataFieldArgs>;
    name?: string;
}
export const TDataTypeCodec: thrift.IStructCodec<ITDataTypeArgs, ITDataType> = {
    encode(args: ITDataTypeArgs, output: thrift.TProtocol): void {
        const obj: any = {
            kind: args.kind,
            params: args.params,
            name: args.name
        };
        output.writeStructBegin("TDataType");
        if (obj.kind != null) {
            output.writeFieldBegin("kind", thrift.TType.I32, 1);
            output.writeI32(obj.kind);
            output.writeFieldEnd();
        }
        if (obj.params != null) {
            output.writeFieldBegin("params", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.STRUCT, obj.params.length);
            obj.params.forEach((value_1: DataField.IDataFieldArgs): void => {
                DataField.DataFieldCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 3);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ITDataType {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_2: DataKind.DataKind = input.readI32();
                        _args.kind = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_3: Array<DataField.IDataField> = new Array<DataField.IDataField>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: DataField.IDataField = DataField.DataFieldCodec.decode(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.params = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.name = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            kind: _args.kind,
            params: _args.params,
            name: _args.name
        };
    }
};
export class TDataType extends thrift.StructLike implements ITDataType {
    public kind?: DataKind.DataKind;
    public params?: Array<DataField.IDataField>;
    public name?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ITDataTypeArgs = {}) {
        super();
        if (args.kind != null) {
            const value_6: DataKind.DataKind = args.kind;
            this.kind = value_6;
        }
        if (args.params != null) {
            const value_7: Array<DataField.IDataField> = new Array<DataField.IDataField>();
            args.params.forEach((value_9: DataField.IDataFieldArgs): void => {
                const value_10: DataField.IDataField = new DataField.DataField(value_9);
                value_7.push(value_10);
            });
            this.params = value_7;
        }
        if (args.name != null) {
            const value_8: string = args.name;
            this.name = value_8;
        }
    }
    public static read(input: thrift.TProtocol): TDataType {
        return new TDataType(TDataTypeCodec.decode(input));
    }
    public static write(args: ITDataTypeArgs, output: thrift.TProtocol): void {
        return TDataTypeCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return TDataTypeCodec.encode(this, output);
    }
}
