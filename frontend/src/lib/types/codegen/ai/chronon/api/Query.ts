/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IQuery {
    selects?: Map<string, string>;
    wheres?: Array<string>;
    startPartition?: string;
    endPartition?: string;
    timeColumn?: string;
    setups?: Array<string>;
    mutationTimeColumn?: string;
    reversalColumn?: string;
}
export interface IQueryArgs {
    selects?: Map<string, string>;
    wheres?: Array<string>;
    startPartition?: string;
    endPartition?: string;
    timeColumn?: string;
    setups?: Array<string>;
    mutationTimeColumn?: string;
    reversalColumn?: string;
}
export const QueryCodec: thrift.IStructCodec<IQueryArgs, IQuery> = {
    encode(args: IQueryArgs, output: thrift.TProtocol): void {
        const obj: any = {
            selects: args.selects,
            wheres: args.wheres,
            startPartition: args.startPartition,
            endPartition: args.endPartition,
            timeColumn: args.timeColumn,
            setups: (args.setups != null ? args.setups : []),
            mutationTimeColumn: args.mutationTimeColumn,
            reversalColumn: args.reversalColumn
        };
        output.writeStructBegin("Query");
        if (obj.selects != null) {
            output.writeFieldBegin("selects", thrift.TType.MAP, 1);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.STRING, obj.selects.size);
            obj.selects.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (obj.wheres != null) {
            output.writeFieldBegin("wheres", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.STRING, obj.wheres.length);
            obj.wheres.forEach((value_2: string): void => {
                output.writeString(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.startPartition != null) {
            output.writeFieldBegin("startPartition", thrift.TType.STRING, 3);
            output.writeString(obj.startPartition);
            output.writeFieldEnd();
        }
        if (obj.endPartition != null) {
            output.writeFieldBegin("endPartition", thrift.TType.STRING, 4);
            output.writeString(obj.endPartition);
            output.writeFieldEnd();
        }
        if (obj.timeColumn != null) {
            output.writeFieldBegin("timeColumn", thrift.TType.STRING, 5);
            output.writeString(obj.timeColumn);
            output.writeFieldEnd();
        }
        if (obj.setups != null) {
            output.writeFieldBegin("setups", thrift.TType.LIST, 6);
            output.writeListBegin(thrift.TType.STRING, obj.setups.length);
            obj.setups.forEach((value_3: string): void => {
                output.writeString(value_3);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.mutationTimeColumn != null) {
            output.writeFieldBegin("mutationTimeColumn", thrift.TType.STRING, 7);
            output.writeString(obj.mutationTimeColumn);
            output.writeFieldEnd();
        }
        if (obj.reversalColumn != null) {
            output.writeFieldBegin("reversalColumn", thrift.TType.STRING, 8);
            output.writeString(obj.reversalColumn);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IQuery {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.MAP) {
                        const value_4: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.IThriftMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_5: string = input.readString();
                            value_4.set(key_2, value_5);
                        }
                        input.readMapEnd();
                        _args.selects = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_6: Array<string> = new Array<string>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_7: string = input.readString();
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.wheres = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.startPartition = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.endPartition = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_10: string = input.readString();
                        _args.timeColumn = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.LIST) {
                        const value_11: Array<string> = new Array<string>();
                        const metadata_3: thrift.IThriftList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_12: string = input.readString();
                            value_11.push(value_12);
                        }
                        input.readListEnd();
                        _args.setups = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRING) {
                        const value_13: string = input.readString();
                        _args.mutationTimeColumn = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_14: string = input.readString();
                        _args.reversalColumn = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            selects: _args.selects,
            wheres: _args.wheres,
            startPartition: _args.startPartition,
            endPartition: _args.endPartition,
            timeColumn: _args.timeColumn,
            setups: (_args.setups != null ? _args.setups : []),
            mutationTimeColumn: _args.mutationTimeColumn,
            reversalColumn: _args.reversalColumn
        };
    }
};
export class Query extends thrift.StructLike implements IQuery {
    public selects?: Map<string, string>;
    public wheres?: Array<string>;
    public startPartition?: string;
    public endPartition?: string;
    public timeColumn?: string;
    public setups?: Array<string> = [];
    public mutationTimeColumn?: string;
    public reversalColumn?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IQueryArgs = {}) {
        super();
        if (args.selects != null) {
            const value_15: Map<string, string> = new Map<string, string>();
            args.selects.forEach((value_23: string, key_3: string): void => {
                const value_24: string = value_23;
                const key_4: string = key_3;
                value_15.set(key_4, value_24);
            });
            this.selects = value_15;
        }
        if (args.wheres != null) {
            const value_16: Array<string> = new Array<string>();
            args.wheres.forEach((value_25: string): void => {
                const value_26: string = value_25;
                value_16.push(value_26);
            });
            this.wheres = value_16;
        }
        if (args.startPartition != null) {
            const value_17: string = args.startPartition;
            this.startPartition = value_17;
        }
        if (args.endPartition != null) {
            const value_18: string = args.endPartition;
            this.endPartition = value_18;
        }
        if (args.timeColumn != null) {
            const value_19: string = args.timeColumn;
            this.timeColumn = value_19;
        }
        if (args.setups != null) {
            const value_20: Array<string> = new Array<string>();
            args.setups.forEach((value_27: string): void => {
                const value_28: string = value_27;
                value_20.push(value_28);
            });
            this.setups = value_20;
        }
        if (args.mutationTimeColumn != null) {
            const value_21: string = args.mutationTimeColumn;
            this.mutationTimeColumn = value_21;
        }
        if (args.reversalColumn != null) {
            const value_22: string = args.reversalColumn;
            this.reversalColumn = value_22;
        }
    }
    public static read(input: thrift.TProtocol): Query {
        return new Query(QueryCodec.decode(input));
    }
    public static write(args: IQueryArgs, output: thrift.TProtocol): void {
        return QueryCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return QueryCodec.encode(this, output);
    }
}
