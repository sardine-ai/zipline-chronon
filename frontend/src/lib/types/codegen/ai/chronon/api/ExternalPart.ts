/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as ExternalSource from "./ExternalSource";
export interface IExternalPart {
    source?: ExternalSource.IExternalSource;
    keyMapping?: Map<string, string>;
    prefix?: string;
}
export interface IExternalPartArgs {
    source?: ExternalSource.IExternalSourceArgs;
    keyMapping?: Map<string, string>;
    prefix?: string;
}
export const ExternalPartCodec: thrift.IStructCodec<IExternalPartArgs, IExternalPart> = {
    encode(args: IExternalPartArgs, output: thrift.TProtocol): void {
        const obj: any = {
            source: args.source,
            keyMapping: args.keyMapping,
            prefix: args.prefix
        };
        output.writeStructBegin("ExternalPart");
        if (obj.source != null) {
            output.writeFieldBegin("source", thrift.TType.STRUCT, 1);
            ExternalSource.ExternalSourceCodec.encode(obj.source, output);
            output.writeFieldEnd();
        }
        if (obj.keyMapping != null) {
            output.writeFieldBegin("keyMapping", thrift.TType.MAP, 2);
            output.writeMapBegin(thrift.TType.STRING, thrift.TType.STRING, obj.keyMapping.size);
            obj.keyMapping.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (obj.prefix != null) {
            output.writeFieldBegin("prefix", thrift.TType.STRING, 3);
            output.writeString(obj.prefix);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IExternalPart {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_2: ExternalSource.IExternalSource = ExternalSource.ExternalSourceCodec.decode(input);
                        _args.source = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.MAP) {
                        const value_3: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.IThriftMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_4: string = input.readString();
                            value_3.set(key_2, value_4);
                        }
                        input.readMapEnd();
                        _args.keyMapping = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.prefix = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return {
            source: _args.source,
            keyMapping: _args.keyMapping,
            prefix: _args.prefix
        };
    }
};
export class ExternalPart extends thrift.StructLike implements IExternalPart {
    public source?: ExternalSource.IExternalSource;
    public keyMapping?: Map<string, string>;
    public prefix?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IExternalPartArgs = {}) {
        super();
        if (args.source != null) {
            const value_6: ExternalSource.IExternalSource = new ExternalSource.ExternalSource(args.source);
            this.source = value_6;
        }
        if (args.keyMapping != null) {
            const value_7: Map<string, string> = new Map<string, string>();
            args.keyMapping.forEach((value_9: string, key_3: string): void => {
                const value_10: string = value_9;
                const key_4: string = key_3;
                value_7.set(key_4, value_10);
            });
            this.keyMapping = value_7;
        }
        if (args.prefix != null) {
            const value_8: string = args.prefix;
            this.prefix = value_8;
        }
    }
    public static read(input: thrift.TProtocol): ExternalPart {
        return new ExternalPart(ExternalPartCodec.decode(input));
    }
    public static write(args: IExternalPartArgs, output: thrift.TProtocol): void {
        return ExternalPartCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ExternalPartCodec.encode(this, output);
    }
}
