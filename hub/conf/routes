# Backend APIs
GET     /api/v1/ping                                     controllers.ApplicationController.ping()
GET     /api/v1/models                                   controllers.ModelController.list(offset: Option[Int], limit: Option[Int])
GET     /api/v1/search                                   controllers.SearchController.search(term: String, offset: Option[Int], limit: Option[Int])

# model prediction & model drift
GET     /api/v1/model/:id/timeseries                     controllers.TimeSeriesController.fetchModel(id: String, startTs: Long, endTs: Long, offset: String, algorithm: String)

# all timeseries of a given join id
# when metricType == "drift" - will return time series list of drift values
GET     /api/v1/join/:name/timeseries                    controllers.TimeSeriesController.fetchJoin(name: String, startTs: Long, endTs: Long, metricType: String, metrics: String, offset: Option[String], algorithm: Option[String])

# join -> seq(feature)
# when metricType == "drift" - will return time series list of drift values
GET     /api/v1/feature/:name/timeseries                 controllers.TimeSeriesController.fetchFeature(name: String, startTs: Long, endTs: Long, metricType: String, metrics: String, granularity: String, offset: Option[String], algorithm: Option[String])


# TODO - move the core flow to fine-grained end-points
#GET     /api/v1/feature/:name/timeseries                  controllers.TimeSeriesController.fetchFeature(name: String, startTs: Long, endTs: Long, metricType: String, metrics: String, granularity: String, offset: Option[String], algorithm: Option[String])
#GET     /api/v1/feature/:name/percentiles                 controllers.TimeSeriesController.fetchFeature(name: String, startTs: Long, endTs: Long, metricType: String, metrics: String, granularity: String, offset: Option[String], algorithm: Option[String])
#GET     /api/v1/feature/:name/values                      controllers.TimeSeriesController.fetchFeature(name: String, startTs: Long, endTs: Long, metricType: String, metrics: String, granularity: String, offset: Option[String], algorithm: Option[String])
#GET     /api/v1/feature/:name/drift                       controllers.TimeSeriesController.fetchFeature(name: String, startTs: Long, endTs: Long, metricType: String, metrics: String, granularity: String, offset: Option[String], algorithm: Option[String])
#GET     /api/v1/feature/:name/skew                        controllers.TimeSeriesController.fetchFeature(name: String, startTs: Long, endTs: Long, metricType: String, metrics: String, granularity: String, offset: Option[String], algorithm: Option[String])
#
#GET     /api/v1/feature/:name/compare/distribution        controllers.TimeSeriesController.fetchFeature(name: String, startTs: Long, endTs: Long, metricType: String, metrics: String, granularity: String, offset: Option[String], algorithm: Option[String])
#GET     /api/v1/feature/:name/compare/coverage            controllers.TimeSeriesController.fetchFeature(name: String, startTs: Long, endTs: Long, metricType: String, metrics: String, granularity: String, offset: Option[String], algorithm: Option[String])
