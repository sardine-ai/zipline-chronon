name: "hub-monitoring-demo"
services:
  dynamo:
    image: "amazon/dynamodb-local:2.5.2"
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
    user: dynamodblocal
    entrypoint: >
      /bin/sh -c "
        chown -R dynamodblocal:dynamodblocal /home/dynamodblocal/data
        java -jar DynamoDBLocal.jar -sharedDb -dbPath ./data
      "

  spark:
    image: bitnami/spark:3.5.2
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=yes
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - "8081:8080"
      - "7077:7077"

  spark-worker:
    image: bitnami/spark:3.5.2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=${SPARK_WORKER_MEMORY:-1G}
      - SPARK_WORKER_CORES=${SPARK_WORKER_CORES:-1}
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=yes
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark

  app:
    build:
      context: ..
      dockerfile: docker-init/Dockerfile
    depends_on:
      - dynamo
    environment:
      - DYNAMO_ENDPOINT=http://dynamo:8000
      - AWS_DEFAULT_REGION=us-west-2
      - AWS_ACCESS_KEY_ID=fakeaccesskey
      - AWS_SECRET_ACCESS_KEY=fakesecretkey
      - PLAY_HTTP_SECRET_KEY=my_fake_chronon_monitoring_hub_http_secret_key # needs to be long to make Play happy
      - JAVA_OPTS="-Xms1g -Xmx1g"
      - SPARK_JAR=/app/cli/spark.jar
      - CLOUD_AWS_JAR=/app/cli/cloud_aws.jar
      - ONLINE_CLASS=ai.chronon.integrations.aws.AwsApiImpl
    ports:
      - "9000:9000"
    healthcheck:
      interval: 1s
      retries: 5
      start_period: 60s
      test: curl -sS --fail http://app:${APP_PORT:-9000}/api/v1/ping
      timeout: 5s

  frontend:
    build:
      context: ..
      dockerfile: docker-init/frontend/Dockerfile
    depends_on:
      - app
    environment:
      - API_BASE_URL=http://app:9000
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mysql:
    container_name: temporal-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
    image: mysql:8
    networks:
      - temporal-network
    ports:
      - 3306:3306
    volumes:
      - /var/lib/mysql
  elasticsearch:
    container_name: temporal-elasticsearch
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=${ES_JAVA_OPTS:--Xms1g -Xmx1g}
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
    image: elasticsearch:8.16.0
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - temporal-network
    ports:
      - 9200:9200
    volumes:
      - ./elasticsearch-data:/usr/share/elasticsearch/data
  temporal:
    container_name: temporal
    depends_on:
      - mysql
      - elasticsearch
    environment:
      - DB=mysql8
      - DB_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PWD=root
      - MYSQL_SEEDS=mysql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - ES_USER=elastic
      - ES_PWD=${ELASTIC_PASSWORD:-changeme}
    image: temporalio/server:1.25.2
    networks:
      - temporal-network
    ports:
      - 7233:7233
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:1.25.2-tctl-1.18.1-cli-1.1.1
    networks:
      - temporal-network
    stdin_open: true
    tty: true
  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:2.31.2
    networks:
      - temporal-network
    ports:
      - 8080:8080
networks:
  temporal-network:
    driver: bridge
    name: temporal-network