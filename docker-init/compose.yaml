name: "hub-monitoring-demo"
services:
  dynamo:
    image: "amazon/dynamodb-local:2.5.2"
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
    user: dynamodblocal
    entrypoint: >
      /bin/sh -c "
        chown -R dynamodblocal:dynamodblocal /home/dynamodblocal/data
        java -jar DynamoDBLocal.jar -sharedDb -dbPath ./data
      "

  spark:
    image: bitnami/spark:3.5.2
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=yes
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - "8080:8080"
      - "7077:7077"

  spark-worker:
    image: bitnami/spark:3.5.2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=${SPARK_WORKER_MEMORY:-1G}
      - SPARK_WORKER_CORES=${SPARK_WORKER_CORES:-1}
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=yes
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark

  base:
    build:
      context: ..
      dockerfile: .github/image/Dockerfile
    image: base_image:latest

  app:
    build:
      context: ..
      dockerfile: docker-init/Dockerfile
    depends_on:
      - base
      - dynamo
    environment:
      - DYNAMO_ENDPOINT=http://dynamo:8000
      - AWS_DEFAULT_REGION=us-west-2
      - AWS_ACCESS_KEY_ID=fakeaccesskey
      - AWS_SECRET_ACCESS_KEY=fakesecretkey
      - PLAY_HTTP_SECRET_KEY=my_fake_chronon_monitoring_hub_http_secret_key # needs to be long to make Play happy
      - JAVA_OPTS="-Xms1g -Xmx1g"
      - SPARK_JAR=/app/cli/spark.jar
      - CLOUD_AWS_JAR=/app/cli/cloud_aws.jar
      - ONLINE_CLASS=ai.chronon.integrations.aws.AwsApiImpl
    ports:
      - "9000:9000"
    healthcheck:
      interval: 1s
      retries: 5
      start_period: 60s
      test: curl -sS --fail http://app:${APP_PORT:-9000}/api/v1/ping
      timeout: 5s

  frontend:
    build:
      context: ..
      dockerfile: docker-init/frontend/Dockerfile
    depends_on:
      - base
      - app
    environment:
      - API_BASE_URL=http://app:9000
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
